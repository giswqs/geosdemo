{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geosdemo","text":"<p>A python package for interactive mapping.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://geosdemo.gishub.org</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/giswqs/geosdemo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geosdemo could always use more documentation, whether as part of the official geosdemo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/giswqs/geosdemo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geosdemo for local development.</p> <ol> <li> <p>Fork the geosdemo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geosdemo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geosdemo\n$ cd geosdemo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geosdemo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/giswqs/geosdemo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":""},{"location":"foliumap/#geosdemo.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>description</p> required Source code in <code>geosdemo/foliumap.py</code> <pre><code>class Map(folium.Map):\n\"\"\"Create a folium map object.\n\n    Args:\n        folium (_type_): _description_\n    \"\"\"    \n    def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Initializes the map object.\n\n        Args:\n            center (list, optional): The map center. Defaults to [20, 0].\n            zoom (int, optional): The zoom level. Defaults to 2.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles=url,\n            name=name,\n            attr=attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumap/#geosdemo.foliumap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The map center. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The zoom level. Defaults to 2.</p> <code>2</code> Source code in <code>geosdemo/foliumap.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Initializes the map object.\n\n    Args:\n        center (list, optional): The map center. Defaults to [20, 0].\n        zoom (int, optional): The zoom level. Defaults to 2.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#geosdemo.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>geosdemo/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles=url,\n        name=name,\n        attr=attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"geosdemo/","title":"geosdemo module","text":"<p>Main module.</p>"},{"location":"geosdemo/#geosdemo.geosdemo.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geosdemo/geosdemo.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n        if \"height\" in kwargs:\n            self.layout.height = kwargs[\"height\"]\n        else:\n            self.layout.height = \"600px\"\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layers_control(self, position='topright'):\n\"\"\"Adds a layers control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the layers control.\n        \"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the fullscreen control.\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = ipyleaflet.TileLayer(\n            url=url,\n            name=name,\n            attribution=attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n\n\n    def add_basemap(self, basemap, **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n\n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n        \"\"\"\n\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n        Args:\n            data (str): The path to the Shapefile.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n            kwargs: Keyword arguments to pass to the GeoJSON layer.\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n        self.add_layer(geojson)\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n        Args:\n            url (str): The URL of the raster layer.\n            name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n    def add_toolbar(self, position=\"topright\"):\n\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.HBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"bluetooth\", \"area-chart\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the draw control.</p> <code>{}</code> Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Adds a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the fullscreen control.</p> required Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the fullscreen control.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the GeoJSON layer.</p> <code>{}</code> Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (dict): The GeoJSON data.\n        kwargs: Keyword arguments to pass to the GeoJSON layer.\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the layers control.</p> required Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_layers_control(self, position='topright'):\n\"\"\"Adds a layers control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the layers control.\n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map bounds to the raster layer. Defaults to True.</p> <code>True</code> Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n    Args:\n        url (str): The URL of the raster layer.\n        name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the search control.</p> <code>{}</code> Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n    Args:\n        data (str): The path to the Shapefile.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(\n        url=url,\n        name=name,\n        attribution=attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>Generates a random number of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the number to generate. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>The generated number.</p> Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def generate_lucky_number(length=1):\n\"\"\"Generates a random number of a given length.\n\n    Args:\n        length (int, optional): The length of the number to generate. Defaults to 1.\n\n    Returns:\n        int: The generated number.\n    \"\"\"\n\n    result_str = ''.join(random.choice(string.digits) for i in range(length))\n    return int(result_str)\n</code></pre>"},{"location":"geosdemo/#geosdemo.geosdemo.generate_random_string","title":"<code>generate_random_string(length=10, upper=False, digits=False, punctuation=False)</code>","text":"<p>Generates a random string of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the string to generate. Defaults to 10.</p> <code>10</code> <code>upper</code> <code>bool</code> <p>Whether to include uppercase letters. Defaults to False.</p> <code>False</code> <code>digits</code> <code>bool</code> <p>Whether to include digits. Defaults to False.</p> <code>False</code> <code>punctuation</code> <code>bool</code> <p>Whether to include punctuation. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The generated string.</p> Source code in <code>geosdemo/geosdemo.py</code> <pre><code>def generate_random_string(length=10, upper=False, digits=False, punctuation=False):\n\"\"\"Generates a random string of a given length.\n\n    Args:\n        length (int, optional): The length of the string to generate. Defaults to 10.\n        upper (bool, optional): Whether to include uppercase letters. Defaults to False.\n        digits (bool, optional): Whether to include digits. Defaults to False.\n        punctuation (bool, optional): Whether to include punctuation. Defaults to False.\n\n    Returns:\n        str: The generated string.\n    \"\"\"\n\n    letters = string.ascii_lowercase\n    if upper:\n        letters += string.ascii_uppercase\n    if digits:\n        letters += string.digits\n    if punctuation:\n        letters += string.punctuation\n    result_str = ''.join(random.choice(letters) for i in range(length))\n    return result_str\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geosdemo, run this command in your terminal:</p> <pre><code>pip install geosdemo\n</code></pre> <p>This is the preferred method to install geosdemo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for geosdemo can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/giswqs/geosdemo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geosdemo in a project:</p> <pre><code>import geosdemo\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import geosdemo.foliumap as geosdemo\n</pre> import geosdemo.foliumap as geosdemo In\u00a0[2]: Copied! <pre>m = geosdemo.Map(center=(40.7128, -74.0060), zoom=12)\n</pre> m = geosdemo.Map(center=(40.7128, -74.0060), zoom=12) In\u00a0[3]: Copied! <pre>url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n</pre> url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' In\u00a0[4]: Copied! <pre>m.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Google\")\n</pre> m.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Google\") In\u00a0[5]: Copied! <pre>m\n</pre> m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>import folium\n</pre> import folium In\u00a0[7]: Copied! <pre>m = folium.Map(location=[40, -100], zoom_start=4)\nm\n</pre> m = folium.Map(location=[40, -100], zoom_start=4) m Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[8]: Copied! <pre>m = folium.Map(location=[45.372, -121.6972], zoom_start=12, tiles=\"Stamen Terrain\")\n\ntooltip = \"Click me!\"\n\nfolium.Marker(\n    [45.3288, -121.6625], popup=\"&lt;i&gt;Mt. Hood Meadows&lt;/i&gt;\", tooltip=tooltip\n).add_to(m)\nfolium.Marker(\n    [45.3311, -121.7113], popup=\"&lt;b&gt;Timberline Lodge&lt;/b&gt;\", tooltip=tooltip\n).add_to(m)\n\nm\n</pre> m = folium.Map(location=[45.372, -121.6972], zoom_start=12, tiles=\"Stamen Terrain\")  tooltip = \"Click me!\"  folium.Marker(     [45.3288, -121.6625], popup=\"Mt. Hood Meadows\", tooltip=tooltip ).add_to(m) folium.Marker(     [45.3311, -121.7113], popup=\"Timberline Lodge\", tooltip=tooltip ).add_to(m)  m Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/geosdemo/","title":"Geosdemo","text":"In\u00a0[1]: Copied! <pre>import geosdemo\n</pre> import geosdemo In\u00a0[2]: Copied! <pre>m = geosdemo.Map(center=[40, -100], zoom=4)\nm.add_search_control(position='topright')\nm.add_draw_control()\nm\n</pre> m = geosdemo.Map(center=[40, -100], zoom=4) m.add_search_control(position='topright') m.add_draw_control() m Out[2]: In\u00a0[3]: Copied! <pre>m.add_search_control()\n</pre> m.add_search_control() In\u00a0[4]: Copied! <pre>url = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n</pre> url = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\" In\u00a0[5]: Copied! <pre>m.add_search_control(position=\"topleft\", zoom=10, url=url)\n</pre> m.add_search_control(position=\"topleft\", zoom=10, url=url)"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import geosdemo\n</pre> import geosdemo In\u00a0[2]: Copied! <pre>geosdemo.generate_random_string(10, upper=True, digits=True, punctuation=True)\n</pre> geosdemo.generate_random_string(10, upper=True, digits=True, punctuation=True) Out[2]: <pre>'|G#z8IK.eh'</pre> In\u00a0[3]: Copied! <pre>geosdemo.generate_lucky_number(3)\n</pre> geosdemo.generate_lucky_number(3) Out[3]: <pre>420</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import geosdemo\n</pre> import geosdemo In\u00a0[2]: Copied! <pre>m = geosdemo.Map(layers_control=False)\nm\n</pre> m = geosdemo.Map(layers_control=False) m Out[2]: In\u00a0[3]: Copied! <pre>m.add_layers_control()\n</pre> m.add_layers_control() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[1]: Copied! <pre># !pip install geosdemo\n</pre> # !pip install geosdemo In\u00a0[2]: Copied! <pre>import geosdemo\n</pre> import geosdemo In\u00a0[3]: Copied! <pre>m = geosdemo.Map()\nm\n</pre> m = geosdemo.Map() m Out[3]: In\u00a0[4]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name='Raster', fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name='Raster', fit_bounds=True) In\u00a0[5]: Copied! <pre>m.layers\n</pre> m.layers Out[5]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(attribution='', name='Raster', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'))</pre> In\u00a0[6]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) Out[6]: In\u00a0[7]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[8]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000,\n    min=1984,\n    max=2020,\n    step=1,\n    description='Year:'\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000,     min=1984,     max=2020,     step=1,     description='Year:' ) int_slider Out[8]: In\u00a0[9]: Copied! <pre>int_slider.value\n</pre> int_slider.value Out[9]: <pre>2000</pre> In\u00a0[10]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0,\n    min=-1,\n    max=1,\n    step=0.05,\n    description='Threshold:'\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0,     min=-1,     max=1,     step=0.05,     description='Threshold:' ) float_slider Out[10]: In\u00a0[11]: Copied! <pre>float_slider.value\n</pre> float_slider.value Out[11]: <pre>0.0</pre> In\u00a0[12]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    orientation='horizontal'\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=7,     min=0,     max=10,     step=1,     description='Loading:',     bar_style='', # 'success', 'info', 'warning', 'danger' or ''     orientation='horizontal' ) int_progress Out[12]: In\u00a0[13]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description='Any:',\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description='Any:', ) int_text Out[13]: In\u00a0[14]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    description='Any:',\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     description='Any:', ) float_text Out[14]: In\u00a0[15]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='success', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description='Click me',     disabled=False,     button_style='success', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Description',     icon='check' # (FontAwesome names without the `fa-` prefix) ) toggle_button Out[15]: In\u00a0[16]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value Out[16]: <pre>False</pre> In\u00a0[17]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False,     description='Check me',     disabled=False,     indent=False ) checkbox Out[17]: In\u00a0[18]: Copied! <pre>checkbox.value\n</pre> checkbox.value Out[18]: <pre>False</pre> In\u00a0[19]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) dropdown Out[19]: In\u00a0[20]: Copied! <pre>dropdown.value\n</pre> dropdown.value Out[20]: <pre>'Canada'</pre> In\u00a0[21]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) radio_buttons Out[21]: In\u00a0[22]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value Out[22]: <pre>'Canada'</pre> In\u00a0[23]: Copied! <pre>text = widgets.Text(\n    value='USA',\n    placeholder='Enter a country name',\n    description='Country:',\n    disabled=False\n)\ntext\n</pre> text = widgets.Text(     value='USA',     placeholder='Enter a country name',     description='Country:',     disabled=False ) text Out[23]: In\u00a0[24]: Copied! <pre>text.value\n</pre> text.value Out[24]: <pre>'USA'</pre> In\u00a0[25]: Copied! <pre>widgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n</pre> widgets.Textarea(     value='Hello World',     placeholder='Type something',     description='String:',     disabled=False ) Out[25]: In\u00a0[26]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder='Some HTML',     description='Some HTML', ) Out[26]: In\u00a0[27]: Copied! <pre>widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n</pre> widgets.HTML(     value='' ) Out[27]: In\u00a0[28]: Copied! <pre>button = widgets.Button(\n    description='Click me',\n    button_style='info', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n</pre> button = widgets.Button(     description='Click me',     button_style='info', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Click me',     icon='check' # (FontAwesome names without the `fa-` prefix) ) button Out[28]: In\u00a0[29]: Copied! <pre>date_picker = widgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\ndate_picker\n</pre> date_picker = widgets.DatePicker(     description='Pick a Date',     disabled=False ) date_picker Out[29]: In\u00a0[30]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[31]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False,     description='Pick a color',     value='blue',     disabled=False ) color_picker Out[31]: In\u00a0[32]: Copied! <pre>color_picker.value\n</pre> color_picker.value Out[32]: <pre>'blue'</pre> In\u00a0[33]: Copied! <pre>out = widgets.Output(layout={'border': '1px solid black'})\nout\n</pre> out = widgets.Output(layout={'border': '1px solid black'}) out Out[33]: In\u00a0[34]: Copied! <pre>with out:\n    for i in range(10):\n        print(i, 'Hello world!')\n</pre> with out:     for i in range(10):         print(i, 'Hello world!') In\u00a0[35]: Copied! <pre>from IPython.display import YouTubeVideo\nout.clear_output()\nwith out:\n    display(YouTubeVideo('mA21Us_3m28'))\nout\n</pre> from IPython.display import YouTubeVideo out.clear_output() with out:     display(YouTubeVideo('mA21Us_3m28')) out Out[35]: In\u00a0[36]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out Out[36]: In\u00a0[37]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[38]: Copied! <pre>m = geosdemo.Map()\nm\n</pre> m = geosdemo.Map() m Out[38]: In\u00a0[39]: Copied! <pre>output_widget = widgets.Output(layout={'border': '1px solid black'})\noutput_control = WidgetControl(widget=output_widget, position='bottomright')\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={'border': '1px solid black'}) output_control = WidgetControl(widget=output_widget, position='bottomright') m.add_control(output_control) In\u00a0[40]: Copied! <pre>with output_widget:\n    print('Nice map!')\n</pre> with output_widget:     print('Nice map!') In\u00a0[41]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[42]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get('coordinates')\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get('type') == 'click':\n        with output_widget:\n            output_widget.clear_output()\n            print('You clicked at: {}'.format(latlon))\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get('coordinates')     # latlon = [round(x, 2) for x in latlon]     if kwargs.get('type') == 'click':         with output_widget:             output_widget.clear_output()             print('You clicked at: {}'.format(latlon))  m.on_interaction(handle_interaction)"},{"location":"examples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"examples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"examples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"examples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"examples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"examples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"examples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"examples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"examples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"examples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"examples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"examples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"examples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"examples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"examples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"examples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"examples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"examples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"examples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"examples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"examples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"examples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[1]: Copied! <pre># import geemap\n# Map = geemap.Map()\n# Map\n</pre> # import geemap # Map = geemap.Map() # Map In\u00a0[2]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[3]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[4]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"gear\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ntoolbar_button\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"gear\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) toolbar_button Out[4]: In\u00a0[5]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[6]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value Out[6]: <pre>False</pre> In\u00a0[7]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button Out[7]: In\u00a0[8]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) Out[8]: In\u00a0[9]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box Out[9]: In\u00a0[10]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Checkbox\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Checkbox\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox Out[10]: In\u00a0[11]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"Option 1\", \"Option 2\", \"Option 3\"],     value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown Out[11]: In\u00a0[12]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=100,\n    description=\"Int Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=100,     description=\"Int Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider Out[12]: In\u00a0[13]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=1,\n    max=100,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\n</pre> float_slider = widgets.FloatSlider(     min=1,     max=100,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) In\u00a0[14]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"white\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"white\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color Out[14]: In\u00a0[15]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text Out[15]: In\u00a0[16]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea Out[16]: In\u00a0[17]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\" buttons Out[17]: In\u00a0[18]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding)) with output:     output.clear_output()     print(\"Running ...\") output Out[18]: In\u00a0[19]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n    output,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons,     output, ] toolbar_widget Out[19]:"},{"location":"examples/ipywidgets_events/","title":"Ipywidgets events","text":"In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[2]: Copied! <pre>print(widgets.Button.on_click.__doc__)\n</pre> print(widgets.Button.on_click.__doc__) <pre>Register a callback to execute when the button is clicked.\n\n        The callback will be called with one argument, the clicked button\n        widget instance.\n\n        Parameters\n        ----------\n        remove: bool (optional)\n            Set to true to remove the callback from the list of callbacks.\n        \n</pre> In\u00a0[3]: Copied! <pre>button = widgets.Button(description=\"Click Me!\", button_style=\"primary\")\noutput = widgets.Output()\n\ndef on_button_clicked(b):\n    with output:\n        print(\"Button clicked.\")\n\nbutton.on_click(on_button_clicked)\n\nwidgets.VBox([button, output])\n</pre> button = widgets.Button(description=\"Click Me!\", button_style=\"primary\") output = widgets.Output()  def on_button_clicked(b):     with output:         print(\"Button clicked.\")  button.on_click(on_button_clicked)  widgets.VBox([button, output]) Out[3]: In\u00a0[4]: Copied! <pre>print(widgets.Widget.observe.__doc__)\n</pre> print(widgets.Widget.observe.__doc__) <pre>Setup a handler to be called when a trait changes.\n\n        This is used to setup dynamic notifications of trait changes.\n\n        Parameters\n        ----------\n        handler : callable\n            A callable that is called when a trait changes. Its\n            signature should be ``handler(change)``, where ``change`` is a\n            dictionary. The change dictionary at least holds a 'type' key.\n            * ``type``: the type of notification.\n            Other keys may be passed depending on the value of 'type'. In the\n            case where type is 'change', we also have the following keys:\n            * ``owner`` : the HasTraits instance\n            * ``old`` : the old value of the modified trait attribute\n            * ``new`` : the new value of the modified trait attribute\n            * ``name`` : the name of the modified trait attribute.\n        names : list, str, All\n            If names is All, the handler will apply to all traits.  If a list\n            of str, handler will apply to all names in the list.  If a\n            str, the handler will apply just to that name.\n        type : str, All (default: 'change')\n            The type of notification to filter by. If equal to All, then all\n            notifications are passed to the observe handler.\n        \n</pre> In\u00a0[5]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Show\", \"Hide\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\n\nhtml = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n\nvbox = widgets.VBox([buttons, html])\nvbox\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Show\", \"Hide\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\"  html = widgets.HTML(     value='' )  vbox = widgets.VBox([buttons, html]) vbox Out[5]: In\u00a0[6]: Copied! <pre>def handle_btn_click(change):\n    \n    if change['new'] == 'Show':\n        vbox.children = [buttons, html]\n    elif change['new'] == 'Hide':\n        vbox.children = [buttons]\n    elif change['new'] == 'Close':\n        buttons.close()\n        html.close()\n        vbox.close()\n        \nbuttons.observe(handle_btn_click, \"value\")\n</pre> def handle_btn_click(change):          if change['new'] == 'Show':         vbox.children = [buttons, html]     elif change['new'] == 'Hide':         vbox.children = [buttons]     elif change['new'] == 'Close':         buttons.close()         html.close()         vbox.close()          buttons.observe(handle_btn_click, \"value\") In\u00a0[7]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Landsat\", \"Sentinel\", \"MODIS\"],\n    value=None,\n    description=\"Satellite:\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=\"250px\")\n)\n\nbtns = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbtns.style.button_width = \"80px\"\n\noutput = widgets.Output()\n\nbox = widgets.VBox([dropdown, btns, output])\nbox\n</pre> dropdown = widgets.Dropdown(     options=[\"Landsat\", \"Sentinel\", \"MODIS\"],     value=None,     description=\"Satellite:\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=\"250px\") )  btns = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) btns.style.button_width = \"80px\"  output = widgets.Output()  box = widgets.VBox([dropdown, btns, output]) box Out[7]: In\u00a0[8]: Copied! <pre>def dropdown_change(change):\n    if change['new']:\n        with output:\n            output.clear_output()\n            print(change['new'])\n            \ndropdown.observe(dropdown_change, \"value\")\n</pre> def dropdown_change(change):     if change['new']:         with output:             output.clear_output()             print(change['new'])              dropdown.observe(dropdown_change, \"value\") In\u00a0[9]: Copied! <pre>def button_click(change):\n    with output:\n        output.clear_output()\n        if change['new'] == \"Apply\":\n            if dropdown.value is None:\n                print(\"Please select a satellite from the dropdown list.\")\n            else:\n                print(f\"You selected {dropdown.value}\")\n        elif change['new'] == 'Reset':\n            dropdown.value = None\n        else:\n            box.close()\n            \nbtns.observe(button_click, \"value\")\n</pre> def button_click(change):     with output:         output.clear_output()         if change['new'] == \"Apply\":             if dropdown.value is None:                 print(\"Please select a satellite from the dropdown list.\")             else:                 print(f\"You selected {dropdown.value}\")         elif change['new'] == 'Reset':             dropdown.value = None         else:             box.close()              btns.observe(button_click, \"value\")"},{"location":"examples/ipywidgets_events/#button-event","title":"Button event\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#</p>"},{"location":"examples/ipywidgets_events/#other-widget-events","title":"Other widget events\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#Traitlet-events</p>"},{"location":"examples/ipywidgets_events/#first-example","title":"First example\u00b6","text":""},{"location":"examples/ipywidgets_events/#second-example","title":"Second example\u00b6","text":""},{"location":"examples/ipywidgets_events/#third-example","title":"Third example\u00b6","text":"<ul> <li>https://leafmap.org/notebooks/02_using_basemaps/</li> </ul>"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import geosdemo\n</pre> import geosdemo In\u00a0[2]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[3]: Copied! <pre>m = geosdemo.Map()\nm\n</pre> m = geosdemo.Map() m Out[3]: In\u00a0[4]: Copied! <pre>m.add_raster(url, name=\"oil_spill\")\n</pre> m.add_raster(url, name=\"oil_spill\") In\u00a0[5]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[6]: Copied! <pre>opacity_slider = widgets.FloatSlider(min=0, max=1, step=0.05, value=1)\nopacity_slider\n</pre> opacity_slider = widgets.FloatSlider(min=0, max=1, step=0.05, value=1) opacity_slider Out[6]: In\u00a0[7]: Copied! <pre>widgets.jslink((m.layers[-1], \"opacity\"), (opacity_slider, \"value\"))\n</pre> widgets.jslink((m.layers[-1], \"opacity\"), (opacity_slider, \"value\")) Out[7]: <pre>Link(source=(TileLayer(attribution='', name='oil_spill', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'), 'opacity'), target=(FloatSlider(value=1.0, max=1.0, step=0.05), 'value'))</pre>"},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import geosdemo\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import geosdemo import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[3]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar Out[3]: In\u00a0[4]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[5]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar Out[5]: In\u00a0[6]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[7]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid Out[7]: In\u00a0[8]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[9]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar Out[9]: In\u00a0[10]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[11]: Copied! <pre>m = geosdemo.Map()\nm.add_control(toolbar_ctrl)\nm\n</pre> m = geosdemo.Map() m.add_control(toolbar_ctrl) m Out[11]: In\u00a0[12]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add_control(output_ctrl) In\u00a0[13]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\") In\u00a0[14]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) <p></p>"},{"location":"examples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""},{"location":"labs/lab4/","title":"Lab 4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2023-05-11 00:23:32.804980\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"labs/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geosdemo.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"labs/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"labs/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"labs/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"labs/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"labs/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"labs/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"labs/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"labs/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"labs/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"labs/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"labs/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"labs/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"labs/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"labs/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"labs/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"labs/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"labs/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"labs/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"labs/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"labs/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"labs/lab5/","title":"Lab 5","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2023-05-11 00:23:34.885008\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[2]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count('row')\n</pre> line = \"Row, row, row your boat\" line.count('row') Out[2]: <pre>2</pre> In\u00a0[3]: Copied! <pre>line.lower().count('row')\n</pre> line.lower().count('row') Out[3]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"labs/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geosdemo.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"labs/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"labs/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"labs/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"labs/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"labs/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"labs/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"labs/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"labs/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"labs/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"labs/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"labs/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"labs/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"labs/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"labs/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"labs/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"labs/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"labs/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"labs/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"labs/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"labs/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"labs/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"labs/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"labs/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"labs/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"labs/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"labs/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"labs/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"labs/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"labs/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"labs/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"labs/midterm/","title":"GEOG 422/510 Midterm Exam","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2023-05-11 00:23:37.200869\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/midterm/#geog-422510-midterm-exam","title":"GEOG 422/510 Midterm Exam\u00b6","text":"<p>Firstname Lastname</p> <p>150 points in total (30 points each question). You have 75 minutes to complete the exam.</p>"},{"location":"python/01_getting_started/","title":"Getting Started","text":""},{"location":"python/01_getting_started/#getting-started","title":"Getting Started\u00b6","text":""},{"location":"python/01_getting_started/#jupyter-notebook-keyboard-shortcuts","title":"Jupyter Notebook Keyboard Shortcuts\u00b6","text":"<ul> <li>Shift-Enter: run cell, select below</li> <li>Ctrl-Enter: : run selected cells</li> <li>Alt-Enter: run cell and insert below</li> <li>Tab: code completion or indent</li> <li>Shift-Tab: tooltip</li> <li>Matplotlib plotting: %matplotlib inline</li> </ul>"},{"location":"python/01_getting_started/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> </ul>"},{"location":"python/02_variables_data_types/","title":"Variables and Data Types","text":"In\u00a0[1]: Copied! <pre>message = \"Hello Python World!\"\nprint(message)\n</pre> message = \"Hello Python World!\" print(message) <pre>Hello Python World!\n</pre> <p>We\u2019ve added a variable named message. Every variable is connected to a value, which is the information associated with that variable. In this case the value is the <code>\"Hello Python world!\"</code> text. Adding a variable makes a little more work for the Python interpreter. When it processes the first line, it associates the variable message with the <code>\"Hello Python world!\"</code> text. When it reaches the second line, it prints the value associated with message to the screen. Let\u2019s expand on this program by adding two new lines of code:</p> In\u00a0[2]: Copied! <pre>message = \"Hello Python Crash Course World!\"\nprint(message)\n</pre> message = \"Hello Python Crash Course World!\" print(message) <pre>Hello Python Crash Course World!\n</pre> <p>You can change the value of a variable in your program at any time, and Python will always keep track of its current value.</p> In\u00a0[3]: Copied! <pre>message = \"Hello Python Crash Course reader!\"\n# print(mesage)\n</pre> message = \"Hello Python Crash Course reader!\" # print(mesage) <p>When an error occurs in your program, the Python interpreter does its best to help you figure out where the problem is. The interpreter provides a traceback when a program cannot run successfully. A traceback is a record of where the interpreter ran into trouble when trying to execute your code. Here\u2019s an example of the traceback that Python provides after you\u2019ve accidentally misspelled a variable\u2019s name. Let's fix it:</p> In\u00a0[4]: Copied! <pre>mesage = \"Hello Python Crash Course reader!\"\nprint(mesage)\n</pre> mesage = \"Hello Python Crash Course reader!\" print(mesage) <pre>Hello Python Crash Course reader!\n</pre> In\u00a0[5]: Copied! <pre>name = \"ada lovelace\"\nprint(name.title())\n</pre> name = \"ada lovelace\" print(name.title()) <pre>Ada Lovelace\n</pre> <p>In this example, the variable name refers to the lowercase string \"ada lovelace\". The method title() appears after the variable in the print() call. A method is an action that Python can perform on a piece of data. The dot (.) after name in name.title() tells Python to make the title() method act on the variable name. Every method is followed by a set of parentheses, because methods often need additional information to do their work. That informa- tion is provided inside the parentheses. The title() function doesn\u2019t need any additional information, so its parentheses are empty. The title() method changes each word to title case, where each word begins with a capital letter. This is useful because you\u2019ll often want to think of a name as a piece of information. For example, you might want your pro- gram to recognize the input values Ada, ADA, and ada as the same name, and display all of them as Ada. Several other useful methods are available for dealing with case as well. For example, you can change a string to all uppercase or all lowercase letters like this:</p> In\u00a0[6]: Copied! <pre>name = \"Ada Lovelace\"\nprint(name.upper())\nprint(name.lower())\n</pre> name = \"Ada Lovelace\" print(name.upper()) print(name.lower()) <pre>ADA LOVELACE\nada lovelace\n</pre> In\u00a0[7]: Copied! <pre>first_name = \"ada\"\nlast_name = \"lovelace\"\nfull_name = f\"{first_name} {last_name}\"\nprint(full_name)\n</pre> first_name = \"ada\" last_name = \"lovelace\" full_name = f\"{first_name} {last_name}\" print(full_name) <pre>ada lovelace\n</pre> <p>To insert a variable\u2019s value into a string, place the letter f immediately before the opening quotation mark. Put braces around the name or names of any variable you want to use inside the string. Python will replace each variable with its value when the string is displayed. These strings are called f-strings. The f is for format, because Python formats the string by replacing the name of any variable in braces with its value.</p> In\u00a0[8]: Copied! <pre>first_name = \"ada\"\nlast_name = \"lovelace\"\nfull_name = f\"{first_name} {last_name}\"\nmessage = f\"Hello, {full_name.title()}!\"\nprint(message)\n</pre> first_name = \"ada\" last_name = \"lovelace\" full_name = f\"{first_name} {last_name}\" message = f\"Hello, {full_name.title()}!\" print(message) <pre>Hello, Ada Lovelace!\n</pre> In\u00a0[9]: Copied! <pre>full_name = \"{} {}\".format(first_name, last_name)\nprint(full_name)\n</pre> full_name = \"{} {}\".format(first_name, last_name) print(full_name) <pre>ada lovelace\n</pre> In\u00a0[10]: Copied! <pre>print(\"Python\")\nprint(\"\\tPython\")\n</pre> print(\"Python\") print(\"\\tPython\") <pre>Python\n\tPython\n</pre> <p>To add a newline in a string, use the character combination \\n:</p> In\u00a0[11]: Copied! <pre>print(\"Languages:\\nPython\\nC\\nJavaScript\")\n</pre> print(\"Languages:\\nPython\\nC\\nJavaScript\") <pre>Languages:\nPython\nC\nJavaScript\n</pre> <p>You can also combine tabs and newlines in a single string. The string \"\\n\\t\" tells Python to move to a new line, and start the next line with a tab. The following example shows how you can use a one-line string to generate four lines of output:</p> In\u00a0[12]: Copied! <pre>print(\"Languages:\\n\\tPython\\n\\tC\\n\\tJavaScript\")\n</pre> print(\"Languages:\\n\\tPython\\n\\tC\\n\\tJavaScript\") <pre>Languages:\n\tPython\n\tC\n\tJavaScript\n</pre> In\u00a0[13]: Copied! <pre>favorite_language = 'python '\nprint(favorite_language)\nprint(favorite_language.rstrip())\n</pre> favorite_language = 'python ' print(favorite_language) print(favorite_language.rstrip()) <pre>python \npython\n</pre> In\u00a0[14]: Copied! <pre>favorite_language = ' python '\nprint(favorite_language.rstrip())\nprint(favorite_language.lstrip())\nprint(favorite_language.strip())\n</pre> favorite_language = ' python ' print(favorite_language.rstrip()) print(favorite_language.lstrip()) print(favorite_language.strip()) <pre> python\npython \npython\n</pre> In\u00a0[15]: Copied! <pre>message = \"One of Python's strengths is its diverse community.\"\nprint(message)\n</pre> message = \"One of Python's strengths is its diverse community.\" print(message) <pre>One of Python's strengths is its diverse community.\n</pre> In\u00a0[16]: Copied! <pre># message = 'One of Python's strengths is its diverse community.'\n# print(message)\n</pre> # message = 'One of Python's strengths is its diverse community.' # print(message) In\u00a0[17]: Copied! <pre>2 + 3\n</pre> 2 + 3 Out[17]: <pre>5</pre> In\u00a0[18]: Copied! <pre>3 - 2\n</pre> 3 - 2 Out[18]: <pre>1</pre> In\u00a0[19]: Copied! <pre>2 * 3\n</pre> 2 * 3 Out[19]: <pre>6</pre> In\u00a0[20]: Copied! <pre>3 / 2\n</pre> 3 / 2 Out[20]: <pre>1.5</pre> <p>Python simply returns the result of the Python uses two multiplication symbols to represent exponents:</p> In\u00a0[21]: Copied! <pre>3 ** 2\n</pre> 3 ** 2 Out[21]: <pre>9</pre> In\u00a0[22]: Copied! <pre>3 ** 3\n</pre> 3 ** 3 Out[22]: <pre>27</pre> In\u00a0[23]: Copied! <pre>10 ** 6\n</pre> 10 ** 6 Out[23]: <pre>1000000</pre> <p>Python supports the order of operations too, so you can use multiple operations in one expression. You can also use parentheses to modify the order of operations so Python can evaluate your expression in the order you specify. For example:</p> In\u00a0[24]: Copied! <pre>2 + 3*4\n</pre> 2 + 3*4 Out[24]: <pre>14</pre> In\u00a0[25]: Copied! <pre>(2 + 3) * 4\n</pre> (2 + 3) * 4 Out[25]: <pre>20</pre> In\u00a0[26]: Copied! <pre>0.1 + 0.1\n</pre> 0.1 + 0.1 Out[26]: <pre>0.2</pre> In\u00a0[27]: Copied! <pre>2 * 0.1\n</pre> 2 * 0.1 Out[27]: <pre>0.2</pre> <p>But be aware that you can sometimes get an arbitrary number of decimal places in your answer. This happens in all languages and is of little concern. Python tries to find a way to represent the result as precisely as possible, which is sometimes difficult given how computers have to represent numbers internally. Just ignore the extra decimal places for now; you\u2019ll learn ways to deal with this later.</p> In\u00a0[28]: Copied! <pre>0.2 + 0.1\n</pre> 0.2 + 0.1 Out[28]: <pre>0.30000000000000004</pre> In\u00a0[29]: Copied! <pre>4 / 2\n</pre> 4 / 2 Out[29]: <pre>2.0</pre> <p>If you mix an integer and a float in any other operation, you\u2019ll get a float as well:</p> In\u00a0[30]: Copied! <pre>1 + 2.0\n</pre> 1 + 2.0 Out[30]: <pre>3.0</pre> In\u00a0[31]: Copied! <pre>universe_age = 14_000_000_000\nprint(universe_age)\n</pre> universe_age = 14_000_000_000 print(universe_age) <pre>14000000000\n</pre> In\u00a0[32]: Copied! <pre>x, y, z = 0, 0, 0\n</pre> x, y, z = 0, 0, 0 <p>You need to separate the variable names with commas, and do the same with the values, and Python will assign each value to its respectively positioned variable. As long as the number of values matches the number of variables, Python will match them up correctly.</p> In\u00a0[33]: Copied! <pre>MAX_CONNECTIONS = 5000\n</pre> MAX_CONNECTIONS = 5000 In\u00a0[34]: Copied! <pre># Say hello to everyone.\nprint(\"Hello Python people!\")\n</pre> # Say hello to everyone. print(\"Hello Python people!\") <pre>Hello Python people!\n</pre>"},{"location":"python/02_variables_data_types/#variables-and-data-types","title":"Variables and Data Types\u00b6","text":"<p>In this lecture you\u2019ll learn about the different kinds of data you can work with in your Python programs. You\u2019ll also learn how to use variables to represent data in your programs.</p> <ul> <li>Variables</li> <li>Strings</li> <li>Numbers</li> <li>Comments</li> </ul>"},{"location":"python/02_variables_data_types/#variables","title":"Variables\u00b6","text":""},{"location":"python/02_variables_data_types/#naming-and-using-variables","title":"Naming and Using Variables\u00b6","text":"<p>When you\u2019re using variables in Python, you need to adhere to a few rules and guidelines. Breaking some of these rules will cause errors; other guidelines just help you write code that\u2019s easier to read and understand. Be sure to keep the following variable rules in mind:</p> <ul> <li>Variable names can contain only letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number. For instance, you can call a variable <code>message_1</code> but not <code>1_message</code>.</li> <li>Spaces are not allowed in variable names, but underscores can be used to separate words in variable names. For example, <code>greeting_message</code> works, but <code>greeting message</code> will cause errors.</li> <li>Avoid using Python keywords and function names as variable names; that is, do not use words that Python has reserved for a particular pro- grammatic purpose, such as the word print. (See Python Keywords and Built-in Functions)</li> <li>Variable names should be short but descriptive. For example, <code>name</code> is better than <code>n</code>, <code>student_name</code> is better than <code>s_n</code>, and <code>name_length</code> is better than <code>length_of_persons_name</code>.</li> <li>Be careful when using the lowercase letter <code>l</code> and the uppercase letter <code>O</code> because they could be confused with the numbers <code>1</code> and <code>0</code>.</li> </ul> <p>Note: The Python variables you\u2019re using at this point should be lowercase. You won\u2019t get errors if you use uppercase letters, but uppercase letters in variable names have special meanings that we\u2019ll discuss in later chapters.</p>"},{"location":"python/02_variables_data_types/#avoiding-name-errors-when-using-variables","title":"Avoiding Name Errors When Using Variables\u00b6","text":"<p>Every programmer makes mistakes, and most make mistakes every day. Although good programmers might create errors, they also know how to respond to those errors efficiently. Let\u2019s look at an error you\u2019re likely to make early on and learn how to fix it. We\u2019ll write some code that generates an error on purpose. Enter the following code, including the misspelled word <code>mesage</code> shown in bold:</p>"},{"location":"python/02_variables_data_types/#strings","title":"Strings\u00b6","text":"<p>A string is a series of characters. Anything inside quotes is considered a string in Python, and you can use single or double quotes around your strings like this:</p> <pre><code>\"This is a string.\"\n'This is also a string.'\n</code></pre> <p>This flexibility allows you to use quotes and apostrophes within your strings:</p> <pre><code>'I told my friend, \"Python is my favorite language!\"'\n\"The language 'Python' is named after Monty Python, not the snake.\"\n\"One of Python's strengths is its diverse and supportive community.\"\n</code></pre>"},{"location":"python/02_variables_data_types/#changing-case-in-a-string-with-methods","title":"Changing Case in a String with Methods\u00b6","text":"<p>One of the simplest tasks you can do with strings is change the case of the words in a string. Look at the following code, and try to determine what\u2019s happening:</p>"},{"location":"python/02_variables_data_types/#using-variables-in-strings","title":"Using Variables in Strings\u00b6","text":"<p>In some situations, you\u2019ll want to use a variable\u2019s value inside a string. For example, you might want two variables to represent a first name and a last name respectively, and then want to combine those values to display someone\u2019s full name:</p>"},{"location":"python/02_variables_data_types/#adding-whitespace-to-strings-with-tabs-or-newlines","title":"Adding Whitespace to Strings with Tabs or Newlines\u00b6","text":"<p>In programming, whitespace refers to any nonprinting character, such as spaces, tabs, and end-of-line symbols. You can use whitespace to organize your output so it\u2019s easier for users to read. To add a tab to your text, use the character combination \\t as shown at:</p>"},{"location":"python/02_variables_data_types/#stripping-whitespace","title":"Stripping Whitespace\u00b6","text":"<p>Extra whitespace can be confusing in your programs. To programmers 'python' and 'python ' look pretty much the same. But to a program, they are two different strings. Python detects the extra space in 'python ' and considers it significant unless you tell it otherwise. whitespace from data that people enter. Python can look for extra whitespace on the right and left sides of a string. To ensure that no whitespace exists at the right end of a string, use the rstrip() method.</p>"},{"location":"python/02_variables_data_types/#avoiding-syntax-errors-with-strings","title":"Avoiding Syntax Errors with Strings\u00b6","text":"<p>One kind of error that you might see with some regularity is a syntax error. A syntax error occurs when Python doesn\u2019t recognize a section of your pro gram as valid Python code. For example, if you use an apostrophe within single quotes, you\u2019ll produce an error. This happens because Python interprets everything between the first single quote and the apostrophe as a string. It then tries to interpret the rest of the text as Python code, which causes errors.</p>"},{"location":"python/02_variables_data_types/#numbers","title":"Numbers\u00b6","text":"<p>Numbers are used quite often in programming to keep score in games, represent data in visualizations, store information in web applications, and so on. Python treats numbers in several different ways, depending on how they\u2019re being used. Let\u2019s first look at how Python manages integers, because they\u2019re the simplest to work with.</p>"},{"location":"python/02_variables_data_types/#integers","title":"Integers\u00b6","text":"<p>You can add ( +), subtract ( -), multiply (*), and divide ( /) integers in Python.</p>"},{"location":"python/02_variables_data_types/#floats","title":"Floats\u00b6","text":"<p>Python calls any number with a decimal point a float. This term is used in most programming languages, and it refers to the fact that a decimal point can appear at any position in a number. Every programming language must be carefully designed to properly manage decimal numbers so numbers behave appropriately no matter where the decimal point appears.</p>"},{"location":"python/02_variables_data_types/#integers-and-floats","title":"Integers and Floats\u00b6","text":"<p>When you divide any two numbers, even if they are integers that result in a whole number, you\u2019ll always get a float:</p>"},{"location":"python/02_variables_data_types/#underscores-in-numbers","title":"Underscores in Numbers\u00b6","text":"<p>When you\u2019re writing long numbers, you can group digits using underscores to make large numbers more readable. When you print a number that was defined using underscores, Python prints only the digits. Python ignores the underscores when storing these kinds of values. Even if you don\u2019t group the digits in threes, the value will still be un\u00ada ffected. To Python, 1000 is the same as 1_000, which is the same as 10_00. This feature works for integers and floats, but it\u2019s only available in Python 3.6</p>"},{"location":"python/02_variables_data_types/#multiple-assignment","title":"Multiple Assignment\u00b6","text":"<p>You can assign values to more than one variable using just a single line. This can help shorten your programs and make them easier to read; you\u2019ll use this technique most often when initializing a set of numbers. For example, here\u2019s how you can initialize the variables x, y, and z to zero:</p>"},{"location":"python/02_variables_data_types/#constants","title":"Constants\u00b6","text":"<p>A constant is like a variable whose value stays the same throughout the life of a program. Python doesn\u2019t have built-in constant types, but Python programmers use all capital letters to indicate a variable should be treated as a constant and never be changed:</p>"},{"location":"python/02_variables_data_types/#comments","title":"Comments\u00b6","text":"<p>Comments are an extremely useful feature in most programming languages. Everything you\u2019ve written in your programs so far is Python code. As your programs become longer and more complicated, you should add notes within your programs that describe your overall approach to the problem you\u2019re solving. A comment allows you to write notes in English within your programs.</p>"},{"location":"python/02_variables_data_types/#how-do-you-write-comments","title":"How Do You Write Comments?\u00b6","text":"<p>In Python, the hash mark (#) indicates a comment. Anything following a hash mark in your code is ignored by the Python interpreter. For example:</p>"},{"location":"python/02_variables_data_types/#shortcut-for-making-comments-in-jupyter-notebook","title":"Shortcut for making comments in Jupyter Notebook\u00b6","text":"<ul> <li>Ctrl + /</li> </ul>"},{"location":"python/02_variables_data_types/#what-kind-of-comments-should-you-write","title":"What Kind of Comments Should You Write?\u00b6","text":"<p>The main reason to write comments is to explain what your code is supposed to do and how you are making it work. When you\u2019re in the middle of working on a project, you understand how all of the pieces fit together. But when you return to a project after some time away, you\u2019ll likely have forgotten some of the details. You can always study your code for a while and figure out how segments were supposed to work, but writing good comments can save you time by summarizing your overall approach in clear English. If you want to become a professional programmer or collaborate with other programmers, you should write meaningful comments. Today, most software is written collaboratively, whether by a group of employees at one company or a group of people working together on an open source project. Skilled programmers expect to see comments in code, so it\u2019s best to start adding descriptive comments to your programs now. Writing clear, concise comments in your code is one of the most beneficial habits you can form as a new programmer.</p>"},{"location":"python/03_introducing_lists/","title":"Introducing List","text":"In\u00a0[1]: Copied! <pre>x = 5\ns = \"geeksforgeeks\"\ny = [1,2,3]\nprint(type(x))\nprint(type(s))\nprint(type(y))\n</pre> x = 5 s = \"geeksforgeeks\" y = [1,2,3] print(type(x)) print(type(s)) print(type(y)) <pre>&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n&lt;class 'list'&gt;\n</pre> In\u00a0[2]: Copied! <pre>bicycles = ['trek', 'cannondale', 'redline', 'specialized']\nprint(bicycles)\n</pre> bicycles = ['trek', 'cannondale', 'redline', 'specialized'] print(bicycles) <pre>['trek', 'cannondale', 'redline', 'specialized']\n</pre> In\u00a0[3]: Copied! <pre>print(bicycles[0])\n</pre> print(bicycles[0]) <pre>trek\n</pre> <p>You can also use the string methods from Chapter 2 on any element in this list. For example, you can format the element 'trek' more neatly by using the title() method:</p> In\u00a0[4]: Copied! <pre>print(bicycles[0].title())\n</pre> print(bicycles[0].title()) <pre>Trek\n</pre> In\u00a0[5]: Copied! <pre>print(bicycles[1])\nprint(bicycles[3])\n</pre> print(bicycles[1]) print(bicycles[3]) <pre>cannondale\nspecialized\n</pre> <p>Python has a special syntax for accessing the last element in a list. By ask ing for the item at index -1, Python always returns the last item in the list:</p> In\u00a0[6]: Copied! <pre>bicycles = ['trek', 'cannondale', 'redline', 'specialized']\nprint(bicycles[-1])\n</pre> bicycles = ['trek', 'cannondale', 'redline', 'specialized'] print(bicycles[-1]) <pre>specialized\n</pre> In\u00a0[7]: Copied! <pre>bicycles = ['trek', 'cannondale', 'redline', 'specialized']\nmessage = f\"My first bicycle was a {bicycles[0].title()}.\"\nprint(message)\n</pre> bicycles = ['trek', 'cannondale', 'redline', 'specialized'] message = f\"My first bicycle was a {bicycles[0].title()}.\" print(message) <pre>My first bicycle was a Trek.\n</pre> In\u00a0[8]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles) <pre>['honda', 'yamaha', 'suzuki']\n</pre> In\u00a0[9]: Copied! <pre>motorcycles[0] = 'ducati'\nprint(motorcycles)\n</pre> motorcycles[0] = 'ducati' print(motorcycles) <pre>['ducati', 'yamaha', 'suzuki']\n</pre> In\u00a0[10]: Copied! <pre>motorcycles.append('ducati')\nprint(motorcycles)\n</pre> motorcycles.append('ducati') print(motorcycles) <pre>['ducati', 'yamaha', 'suzuki', 'ducati']\n</pre> <p>The append() method makes it easy to build lists dynamically. For example, you can start with an empty list and then add items to the list using a series of append() calls. Using an empty list, let\u2019s add the elements 'honda', 'yamaha', and 'suzuki' to the list:</p> In\u00a0[11]: Copied! <pre>motorcycles = []\n\nmotorcycles.append('honda')\nmotorcycles.append('yamaha')\nmotorcycles.append('suzuki')\n\nprint(motorcycles)\n</pre> motorcycles = []  motorcycles.append('honda') motorcycles.append('yamaha') motorcycles.append('suzuki')  print(motorcycles) <pre>['honda', 'yamaha', 'suzuki']\n</pre> In\u00a0[12]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nmotorcycles.insert(0, 'ducati')\nprint(motorcycles)\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] motorcycles.insert(0, 'ducati') print(motorcycles) <pre>['ducati', 'honda', 'yamaha', 'suzuki']\n</pre> In\u00a0[13]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\ndel motorcycles[0]\nprint(motorcycles)\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles) del motorcycles[0] print(motorcycles) <pre>['honda', 'yamaha', 'suzuki']\n['yamaha', 'suzuki']\n</pre> In\u00a0[14]: Copied! <pre>del motorcycles[1]\nprint(motorcycles)\n</pre> del motorcycles[1] print(motorcycles) <pre>['yamaha']\n</pre> In\u00a0[15]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\npopped_motorcycle = motorcycles.pop()\nprint(motorcycles)\nprint(popped_motorcycle)\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles) popped_motorcycle = motorcycles.pop() print(motorcycles) print(popped_motorcycle) <pre>['honda', 'yamaha', 'suzuki']\n['honda', 'yamaha']\nsuzuki\n</pre> In\u00a0[16]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nlast_owned = motorcycles.pop()\nprint(f\"The last motorcycle I owned was a {last_owned.title()}.\")\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] last_owned = motorcycles.pop() print(f\"The last motorcycle I owned was a {last_owned.title()}.\") <pre>The last motorcycle I owned was a Suzuki.\n</pre> In\u00a0[17]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nfirst_owned = motorcycles.pop(0)\nprint(f\"The first motorcycle I owned was a {first_owned.title()}.\")\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] first_owned = motorcycles.pop(0) print(f\"The first motorcycle I owned was a {first_owned.title()}.\") <pre>The first motorcycle I owned was a Honda.\n</pre> In\u00a0[18]: Copied! <pre>print(motorcycles)\n</pre> print(motorcycles) <pre>['yamaha', 'suzuki']\n</pre> In\u00a0[19]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']\nprint(motorcycles)\nmotorcycles.remove('ducati')\nprint(motorcycles)\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati'] print(motorcycles) motorcycles.remove('ducati') print(motorcycles) <pre>['honda', 'yamaha', 'suzuki', 'ducati']\n['honda', 'yamaha', 'suzuki']\n</pre> <p>You can also use the remove() method to work with a value that\u2019s being removed from a list. Let\u2019s remove the value 'ducati' and print a reason for removing it from the list:</p> In\u00a0[20]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']\nprint(motorcycles)\ntoo_expensive = 'ducati'\nmotorcycles.remove(too_expensive)\nprint(motorcycles)\nprint(f\"\\nA {too_expensive.title()} is too expensive for me.\")\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati'] print(motorcycles) too_expensive = 'ducati' motorcycles.remove(too_expensive) print(motorcycles) print(f\"\\nA {too_expensive.title()} is too expensive for me.\") <pre>['honda', 'yamaha', 'suzuki', 'ducati']\n['honda', 'yamaha', 'suzuki']\n\nA Ducati is too expensive for me.\n</pre> In\u00a0[21]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\ncars.sort()\nprint(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] cars.sort() print(cars) <pre>['audi', 'bmw', 'subaru', 'toyota']\n</pre> <p>You can also sort this list in reverse alphabetical order by passing the argument reverse=True to the sort() method. The following example sorts the list of cars in reverse alphabetical order:</p> In\u00a0[22]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\ncars.sort(reverse=True)\nprint(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] cars.sort(reverse=True) print(cars) <pre>['toyota', 'subaru', 'bmw', 'audi']\n</pre> In\u00a0[23]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\nprint(\"Here is the original list:\")\nprint(cars)\nprint(\"\\nHere is the sorted list:\")\nprint(sorted(cars))\nprint(\"\\nHere is the original list again:\")\nprint(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] print(\"Here is the original list:\") print(cars) print(\"\\nHere is the sorted list:\") print(sorted(cars)) print(\"\\nHere is the original list again:\") print(cars) <pre>Here is the original list:\n['bmw', 'audi', 'toyota', 'subaru']\n\nHere is the sorted list:\n['audi', 'bmw', 'subaru', 'toyota']\n\nHere is the original list again:\n['bmw', 'audi', 'toyota', 'subaru']\n</pre> In\u00a0[24]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\nprint(cars)\ncars.reverse()\nprint(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] print(cars) cars.reverse() print(cars) <pre>['bmw', 'audi', 'toyota', 'subaru']\n['subaru', 'toyota', 'audi', 'bmw']\n</pre> In\u00a0[25]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\nlen(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] len(cars) Out[25]: <pre>4</pre> In\u00a0[26]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\n# print(motorcycles[3])\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] # print(motorcycles[3]) <p>Python attempts to give you the item at index 3. But when it searches the list, no item in motorcycles has an index of 3. Because of the off-by-one nature of indexing in lists, this error is typical. People think the third item is item number 3, because they start counting at 1. But in Python the third item is number 2, because it starts indexing at 0.</p> <p>An index error means Python can\u2019t find an item at the index you requested. If an index error occurs in your program, try adjusting the index you\u2019re asking for by one. Then run the program again to see if the results are correct.</p> <p>Keep in mind that whenever you want to access the last item in a list you use the index -1. This will always work, even if your list has changed size since the last time you accessed it:</p> In\u00a0[27]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles[-1])\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles[-1]) <pre>suzuki\n</pre> In\u00a0[28]: Copied! <pre>motorcycles = []\n# print(motorcycles[-1])\n</pre> motorcycles = [] # print(motorcycles[-1])"},{"location":"python/03_introducing_lists/#introducing-list","title":"Introducing List\u00b6","text":"<p>In this lecture and the next you\u2019ll learn what lists are and how to start working with the elements in a list. Lists allow you to store sets of information in one place, whether you have just a few items or millions of items. Lists are one of Python\u2019s most powerful features readily accessible to new programmers, and they tie together many important concepts in programming.</p> <ul> <li>What is a List?</li> <li>Changing, Adding, and Removing Elements</li> <li>Organizing a List</li> <li>Avoiding Index Errors When Working with Lists</li> </ul>"},{"location":"python/03_introducing_lists/#type-in-python","title":"Type in Python\u00b6","text":"<p>Python have a built-in method called as type which generally come in handy while figuring out the type of variable used in the program in the runtime.</p> <p>If a single argument (object) is passed to type() built-in, it returns type of the given object. If three arguments (name, bases and dict) are passed, it returns a new type object.</p>"},{"location":"python/03_introducing_lists/#what-is-a-list","title":"What is a List?\u00b6","text":"<p>A list is a collection of items in a particular order. You can make a list that includes the letters of the alphabet, the digits from 0\u20139, or the names of all the people in your family. You can put anything you want into a list, and the items in your list don\u2019t have to be related in any particular way. Because a list usually contains more than one element, it\u2019s a good idea to make the name of your list plural, such as letters, digits, or names. In Python, square brackets ([]) indicate a list, and individual elements in the list are separated by commas. Here\u2019s a simple example of a list that contains a few kinds of bicycles:</p>"},{"location":"python/03_introducing_lists/#accessing-elements-in-a-list","title":"Accessing Elements in a List\u00b6","text":"<p>Accessing Elements in a List Lists are ordered collections, so you can access any element in a list by telling Python the position, or index, of the item desired. To access an element in a list, write the name of the list followed by the index of the item enclosed in square brackets. For example, let\u2019s pull out the first bicycle in the list bicycles:</p>"},{"location":"python/03_introducing_lists/#index-positions-start-at-0-not-1","title":"Index Positions Start at 0, Not 1\u00b6","text":"<p>Python considers the first item in a list to be at position 0, not position 1. This is true of most programming languages, and the reason has to do with how the list operations are implemented at a lower level. If you\u2019re receiving unexpected results, determine whether you are making a simple off-by-one error.</p> <p>The second item in a list has an index of 1. Using this counting sys tem, you can get any element you want from a list by subtracting one from its position in the list. For instance, to access the fourth item in a list, you request the item at index 3.</p> <p>The following asks for the bicycles at index 1 and index 3:</p>"},{"location":"python/03_introducing_lists/#using-individual-values-from-a-list","title":"Using Individual Values from a List\u00b6","text":"<p>You can use individual values from a list just as you would any other variable. For example, you can use f-strings to create a message based on a value from a list. Let\u2019s try pulling the first bicycle from the list and composing a message using that value.</p>"},{"location":"python/03_introducing_lists/#changing-adding-and-removing-elements","title":"Changing, Adding, and Removing Elements\u00b6","text":"<p>Most lists you create will be dynamic, meaning you\u2019ll build a list and then add and remove elements from it as your program runs its course. For example, you might create a game in which a player has to shoot aliens out of the sky. You could store the initial set of aliens in a list and then remove an alien from the list each time one is shot down. Each time a new alien appears on the screen, you add it to the list. Your list of aliens will increase and decrease in length throughout the course of the game.</p>"},{"location":"python/03_introducing_lists/#modifying-elements-in-a-list","title":"Modifying Elements in a List\u00b6","text":"<p>The syntax for modifying an element is similar to the syntax for accessing an element in a list. To change an element, use the name of the list followed by the index of the element you want to change, and then provide the new value you want that item to have. For example, let\u2019s say we have a list of motorcycles, and the first item in the list is 'honda'. How would we change the value of this first item?</p>"},{"location":"python/03_introducing_lists/#adding-elements-to-a-list","title":"Adding Elements to a List\u00b6","text":"<p>You might want to add a new element to a list for many reasons. For example, you might want to make new aliens appear in a game, add new data to a visualization, or add new registered users to a website you\u2019ve built. Python provides several ways to add new data to existing lists.</p>"},{"location":"python/03_introducing_lists/#appending-elements-to-the-end-of-a-list","title":"Appending Elements to the End of a List\u00b6","text":"<p>The simplest way to add a new element to a list is to append the item to the list. When you append an item to a list, the new element is added to the end of the list. Using the same list we had in the previous example, we\u2019ll add the new element 'ducati' to the end of the list:</p>"},{"location":"python/03_introducing_lists/#inserting-elements-into-a-list","title":"Inserting Elements into a List\u00b6","text":"<p>You can add a new element at any position in your list by using the insert() method. You do this by specifying the index of the new element and the value of the new item.</p>"},{"location":"python/03_introducing_lists/#removing-elements-from-a-list","title":"Removing Elements from a List\u00b6","text":"<p>Often, you\u2019ll want to remove an item or a set of items from a list. For example, when a player shoots down an alien from the sky, you\u2019ll most likely want to remove it from the list of active aliens. Or when a user decides to cancel their account on a web application you created, you\u2019ll want to remove that user from the list of active users. You can remove an item according to its position in the list or according to its value. Removing an Item Using the del Statement If you know the position of the item you want to remove from a list, you can use the del statement.</p>"},{"location":"python/03_introducing_lists/#removing-an-item-using-the-pop-method","title":"Removing an Item Using the pop() Method\u00b6","text":"<p>Sometimes you\u2019ll want to use the value of an item after you remove it from a list. For example, you might want to get the x and y position of an alien that was just shot down, so you can draw an explosion at that position. In a web application, you might want to remove a user from a list of active members and then add that user to a list of inactive members. The pop() method removes the last item in a list, but it lets you work with that item after removing it. The term pop comes from thinking of a list as a stack of items and popping one item off the top of the stack. In this analogy, the top of a stack corresponds to the end of a list.</p>"},{"location":"python/03_introducing_lists/#popping-items-from-any-position-in-a-list","title":"Popping Items from any Position in a List\u00b6","text":"<p>You can use pop() to remove an item from any position in a list by including the index of the item you want to remove in parentheses.</p>"},{"location":"python/03_introducing_lists/#removing-an-item-by-value","title":"Removing an Item by Value\u00b6","text":"<p>Sometimes you won\u2019t know the position of the value you want to remove from a list. If you only know the value of the item you want to remove, you can use the remove() method. For example, let\u2019s say we want to remove the value 'ducati' from the list of motorcycles.</p>"},{"location":"python/03_introducing_lists/#organizing-a-list","title":"Organizing a List\u00b6","text":"<p>Often, your lists will be created in an unpredictable order, because you can\u2019t always control the order in which your users provide their data. Although this is unavoidable in most circumstances, you\u2019ll frequently want to present your information in a particular order. Sometimes you\u2019ll want to preserve the original order of your list, and other times you\u2019ll want to change the original order. Python provides a number of different ways to organize your lists, depending on the situation.</p>"},{"location":"python/03_introducing_lists/#sorting-a-list-permanently-with-the-sort-method","title":"Sorting a List Permanently with the sort() Method\u00b6","text":"<p>Python\u2019s sort() method makes it relatively easy to sort a list. Imagine we have a list of cars and want to change the order of the list to store them alphabetically. To keep the task simple, let\u2019s assume that all the values in the list are lowercase.</p>"},{"location":"python/03_introducing_lists/#sorting-a-list-temporarily-with-the-sorted-function","title":"Sorting a List Temporarily with the sorted() Function\u00b6","text":"<p>To maintain the original order of a list but present it in a sorted order, you can use the sorted() function. The sorted() function lets you display your list in a particular order but doesn\u2019t affect the actual order of the list. Let\u2019s try this function on the list of cars.</p>"},{"location":"python/03_introducing_lists/#printing-a-list-in-reverse-order","title":"Printing a List in Reverse Order\u00b6","text":"<p>To reverse the original order of a list, you can use the reverse() method. If we originally stored the list of cars in chronological order according to when we owned them, we could easily rearrange the list into reverse chronological order:</p>"},{"location":"python/03_introducing_lists/#finding-the-length-of-a-list","title":"Finding the Length of a List\u00b6","text":"<p>You can quickly find the length of a list by using the len() function. The list in this example has four items, so its length is 4:</p>"},{"location":"python/03_introducing_lists/#avoiding-index-errors-when-working-with-lists","title":"Avoiding Index Errors When Working with Lists\u00b6","text":"<p>One type of error is common to see when you\u2019re working with lists for the first time. Let\u2019s say you have a list with three items, and you ask for the fourth item:</p>"},{"location":"python/04_working_with_lists/","title":"Working with Lists","text":"In\u00a0[1]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(magician)\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(magician) <pre>alice\ndavid\ncarolina\n</pre> <p>When you\u2019re using loops for the first time, keep in mind that the set of steps is repeated once for each item in the list, no matter how many items are in the list. If you have a million items in your list, Python repeats these steps a million times\u2014and usually very quickly. Also keep in mind when writing your own for loops that you can choose any name you want for the temporary variable that will be associated with each value in the list. However, it\u2019s helpful to choose a meaningful name that represents a single item from the list.</p> <p>These naming conventions can help you follow the action being done on each item within a for loop. Using singular and plural names can help you identify whether a section of code is working with a single element from the list or the entire list.</p> In\u00a0[2]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\") <pre>Alice, that was a great trick!\nDavid, that was a great trick!\nCarolina, that was a great trick!\n</pre> In\u00a0[3]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\n</pre> In\u00a0[4]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n\nprint(\"Thank you, everyone. That was a great magic show!\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")  print(\"Thank you, everyone. That was a great magic show!\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\nThank you, everyone. That was a great magic show!\n</pre> In\u00a0[5]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\n# for magician in magicians:\n# print(magician)\n</pre> magicians = ['alice', 'david', 'carolina'] # for magician in magicians: # print(magician) In\u00a0[6]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\nprint(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\") print(f\"I can't wait to see your next trick, {magician.title()}.\\n\") <pre>Alice, that was a great trick!\nDavid, that was a great trick!\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\n</pre> In\u00a0[7]: Copied! <pre># message = \"Hello Python world!\"\n#     print(message)\n</pre> # message = \"Hello Python world!\" #     print(message) In\u00a0[8]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n\n    print(\"Thank you everyone, that was a great magic show!\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")      print(\"Thank you everyone, that was a great magic show!\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nThank you everyone, that was a great magic show!\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nThank you everyone, that was a great magic show!\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\nThank you everyone, that was a great magic show!\n</pre> <p>How to print element index and content together?</p> In\u00a0[9]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor index, magician in enumerate(magicians):\n    print(f\"{index}: {magician}\")\n</pre> magicians = ['alice', 'david', 'carolina'] for index, magician in enumerate(magicians):     print(f\"{index}: {magician}\") <pre>0: alice\n1: david\n2: carolina\n</pre> In\u00a0[10]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\n# for magician in magicians\n#     print(magician)\n</pre> magicians = ['alice', 'david', 'carolina'] # for magician in magicians #     print(magician) In\u00a0[11]: Copied! <pre>for value in range(1, 5):\n    print(value)\n</pre> for value in range(1, 5):     print(value) <pre>1\n2\n3\n4\n</pre> <p>In this example, range() prints only the numbers 1 through 4. This is another result of the off-by-one behavior you\u2019ll see often in programming languages. The range() function causes Python to start counting at the first value you give it, and it stops when it reaches the second value you provide. Because it stops at that second value, the output never contains the end value, which would have been 5 in this case.</p> In\u00a0[12]: Copied! <pre>for value in range(1, 6):\n    print(value)\n</pre> for value in range(1, 6):     print(value) <pre>1\n2\n3\n4\n5\n</pre> In\u00a0[13]: Copied! <pre>numbers = list(range(1, 6))\nprint(numbers)\n</pre> numbers = list(range(1, 6)) print(numbers) <pre>[1, 2, 3, 4, 5]\n</pre> <p>We can also use the range() function to tell Python to skip numbers in a given range. If you pass a third argument to range(), Python uses that value as a step size when generating numbers. For example, here\u2019s how to list the even numbers between 1 and 10:</p> In\u00a0[14]: Copied! <pre>even_numbers = list(range(2, 11, 2))\nprint(even_numbers)\n</pre> even_numbers = list(range(2, 11, 2)) print(even_numbers) <pre>[2, 4, 6, 8, 10]\n</pre> <p>You can create almost any set of numbers you want to using the range() function. For example, consider how you might make a list of the first 10 square numbers (that is, the square of each integer from 1 through 10). In Python, two asterisks (**) represent exponents. Here\u2019s how you might put the first 10 square numbers into a list:</p> In\u00a0[15]: Copied! <pre>squares = []\nfor value in range(1, 11):\n    square = value ** 2\n    squares.append(square)\nprint(squares)\n</pre> squares = [] for value in range(1, 11):     square = value ** 2     squares.append(square) print(squares) <pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</pre> <p>To write this code more concisely, omit the temporary variable square and append each new value directly to the list:</p> In\u00a0[16]: Copied! <pre>squares = []\nfor value in range(1,11):\n    squares.append(value**2)\nprint(squares)\n</pre> squares = [] for value in range(1,11):     squares.append(value**2) print(squares) <pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</pre> In\u00a0[17]: Copied! <pre>digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nmin(digits)\n</pre> digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] min(digits) Out[17]: <pre>0</pre> In\u00a0[18]: Copied! <pre>max(digits)\n</pre> max(digits) Out[18]: <pre>9</pre> In\u00a0[19]: Copied! <pre>sum(digits)\n</pre> sum(digits) Out[19]: <pre>45</pre> In\u00a0[20]: Copied! <pre>squares = [value**2 for value in range(1, 11)]\nprint(squares)\n</pre> squares = [value**2 for value in range(1, 11)] print(squares) <pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</pre> <p>To use this syntax, begin with a descriptive name for the list, such as squares. Next, open a set of square brackets and define the expression for the values you want to store in the new list. In this example the expression is value ** 2, which raises the value to the second power. Then, write a for loop to generate the numbers you want to feed into the expression, and close the square brackets. The for loop in this example is for value in range(1, 11), which feeds the values 1 through 10 into the expression value ** 2. Notice that no colon is used at the end of the for statement.</p> In\u00a0[21]: Copied! <pre>players = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players[0:3])\n</pre> players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[0:3]) <pre>['charles', 'martina', 'michael']\n</pre> In\u00a0[22]: Copied! <pre>players = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players[1:4])\n</pre> players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[1:4]) <pre>['martina', 'michael', 'florence']\n</pre> <p>If you omit the first index in a slice, Python automatically starts your slice at the beginning of the list:</p> In\u00a0[23]: Copied! <pre>players = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players[:4])\n</pre> players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[:4]) <pre>['charles', 'martina', 'michael', 'florence']\n</pre> <p>A similar syntax works if you want a slice that includes the end of a list. For example, if you want all items from the third item through the last item, you can start with index 2 and omit the second index:</p> In\u00a0[24]: Copied! <pre>players = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players[2:])\n</pre> players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[2:]) <pre>['michael', 'florence', 'eli']\n</pre> <p>This syntax allows you to output all of the elements from any point in your list to the end regardless of the length of the list. Recall that a negative index returns an element a certain distance from the end of a list; therefore, you can output any slice from the end of a list. For example, if we want to output the last three players on the roster, we can use the slice players[-3:]:</p> In\u00a0[25]: Copied! <pre>players = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players[-3:])\n</pre> players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[-3:]) <pre>['michael', 'florence', 'eli']\n</pre> In\u00a0[26]: Copied! <pre>players = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(\"Here are the first three players on my team:\")\nfor player in players[:3]:\n    print(player.title())\n</pre> players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(\"Here are the first three players on my team:\") for player in players[:3]:     print(player.title()) <pre>Here are the first three players on my team:\nCharles\nMartina\nMichael\n</pre> In\u00a0[27]: Copied! <pre>my_foods = ['pizza', 'falafel', 'carrot cake']\nfriend_foods = my_foods[:]\nprint(\"My favorite foods are:\")\nprint(my_foods)\nprint(\"\\nMy friend's favorite foods are:\")\nprint(friend_foods)\n</pre> my_foods = ['pizza', 'falafel', 'carrot cake'] friend_foods = my_foods[:] print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods) <pre>My favorite foods are:\n['pizza', 'falafel', 'carrot cake']\n\nMy friend's favorite foods are:\n['pizza', 'falafel', 'carrot cake']\n</pre> <p>To prove that we actually have two separate lists, we\u2019ll add a new food to each list and show that each list keeps track of the appropriate person\u2019s favorite foods:</p> In\u00a0[28]: Copied! <pre>my_foods = ['pizza', 'falafel', 'carrot cake']\nfriend_foods = my_foods[:]\nmy_foods.append('cannoli')\nfriend_foods.append('ice cream')\nprint(\"My favorite foods are:\")\nprint(my_foods)\nprint(\"\\nMy friend's favorite foods are:\")\nprint(friend_foods)\n</pre> my_foods = ['pizza', 'falafel', 'carrot cake'] friend_foods = my_foods[:] my_foods.append('cannoli') friend_foods.append('ice cream') print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods) <pre>My favorite foods are:\n['pizza', 'falafel', 'carrot cake', 'cannoli']\n\nMy friend's favorite foods are:\n['pizza', 'falafel', 'carrot cake', 'ice cream']\n</pre> In\u00a0[29]: Copied! <pre>my_foods = ['pizza', 'falafel', 'carrot cake']\n# This doesn't work:\nfriend_foods = my_foods\nmy_foods.append('cannoli')\nfriend_foods.append('ice cream')\nprint(\"My favorite foods are:\")\nprint(my_foods)\nprint(\"\\nMy friend's favorite foods are:\")\nprint(friend_foods)\n</pre> my_foods = ['pizza', 'falafel', 'carrot cake'] # This doesn't work: friend_foods = my_foods my_foods.append('cannoli') friend_foods.append('ice cream') print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods) <pre>My favorite foods are:\n['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']\n\nMy friend's favorite foods are:\n['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']\n</pre> In\u00a0[30]: Copied! <pre>dimensions = (200, 50)\nprint(dimensions[0])\nprint(dimensions[1])\n</pre> dimensions = (200, 50) print(dimensions[0]) print(dimensions[1]) <pre>200\n50\n</pre> <p>Let\u2019s see what happens if we try to change one of the items in the tuple dimensions:</p> In\u00a0[31]: Copied! <pre>dimensions = (200, 50)\n# dimensions[0] = 250\n</pre> dimensions = (200, 50) # dimensions[0] = 250 <p>Tuples are technically defined by the presence of a comma; the parentheses make them look neater and more readable. If you want to define a tuple with one element, you need to include a trailing comma:</p> In\u00a0[32]: Copied! <pre>my_t = (3,)\n</pre> my_t = (3,) In\u00a0[33]: Copied! <pre>dimensions = (200, 50)\nfor dimension in dimensions:\n    print(dimension)\n</pre> dimensions = (200, 50) for dimension in dimensions:     print(dimension) <pre>200\n50\n</pre> In\u00a0[34]: Copied! <pre>dimensions = (200, 50)\nprint(\"Original dimensions:\")\nfor dimension in dimensions:\n    print(dimension)\n\ndimensions = (400, 100)\nprint(\"\\nModified dimensions:\")\nfor dimension in dimensions:\n    print(dimension)\n</pre> dimensions = (200, 50) print(\"Original dimensions:\") for dimension in dimensions:     print(dimension)  dimensions = (400, 100) print(\"\\nModified dimensions:\") for dimension in dimensions:     print(dimension) <pre>Original dimensions:\n200\n50\n\nModified dimensions:\n400\n100\n</pre>"},{"location":"python/04_working_with_lists/#working-with-lists","title":"Working with Lists\u00b6","text":"<p>In this lecture you\u2019ll learn how to loop through an entire list using just a few lines of code regardless of how long the list is. Looping allows you to take the same action, or set of actions, with every item in a list. As a result, you\u2019ll be able to work efficiently with lists of any length, including those with thousands or even millions of items.</p> <ul> <li>Looping Through an Entire List</li> <li>Avoiding Indentation Errors</li> <li>Making Numerical Lists</li> <li>Working with Part of a List</li> <li>Tuples</li> <li>Styling Your Code</li> </ul>"},{"location":"python/04_working_with_lists/#looping-through-an-entire-list","title":"Looping Through an Entire List\u00b6","text":"<p>You\u2019ll often want to run through all entries in a list, performing the same task with each item. For example, in a game you might want to move every element on the screen by the same amount, or in a list of numbers you might want to perform the same statistical operation on every element. Or perhaps you\u2019ll want to display each headline from a list of articles on a website. When you want to do the same action with every item in a list, you can use Python\u2019s for loop. Let\u2019s say we have a list of magicians\u2019 names, and we want to print out each name in the list. We could do this by retrieving each name from the list individually, but this approach could cause several problems. For one, it would be repetitive to do this with a long list of names. Also, we\u2019d have to change our code each time the list\u2019s length changed. A for loop avoids both of these issues by letting Python manage these issues internally. Let\u2019s use a for loop to print out each name in a list of magicians:</p>"},{"location":"python/04_working_with_lists/#doing-more-work-within-a-for-loop","title":"Doing More Work Within a for Loop\u00b6","text":"<p>You can do just about anything with each item in a for loop. Let\u2019s build on the previous example by printing a message to each magician, telling them that they performed a great trick:</p>"},{"location":"python/04_working_with_lists/#doing-something-after-a-for-loop","title":"Doing Something After a for Loop\u00b6","text":"<p>What happens once a for loop has finished executing? Usually, you\u2019ll want to summarize a block of output or move on to other work that your program must accomplish. Any lines of code after the for loop that are not indented are executed once without repetition. Let\u2019s write a thank you to the group of magicians as a whole, thanking them for putting on an excellent show. To display this group message after all of the individual messages have been printed, we place the thank you message after the for loop without indentation:</p>"},{"location":"python/04_working_with_lists/#avoiding-indentation-errors","title":"Avoiding Indentation Errors\u00b6","text":"<p>Python uses indentation to determine how a line, or group of lines, is related to the rest of the program. In the previous examples, the lines that printed messages to individual magicians were part of the for loop because they were indented. Python\u2019s use of indentation makes code very easy to read. Basically, it uses whitespace to force you to write neatly formatted code with a clear visual structure. In longer Python programs, you\u2019ll notice blocks of code indented at a few different levels. These indentation levels help you gain a general sense of the overall program\u2019s organization.</p> <p>As you begin to write code that relies on proper indentation, you\u2019ll need to watch for a few common indentation errors. For example, people sometimes indent lines of code that don\u2019t need to be indented or forget to indent lines that need to be indented. Seeing examples of these errors now will help you avoid them in the future and correct them when they do appear in your own programs.</p> <p>Let\u2019s examine some of the more common indentation errors.</p>"},{"location":"python/04_working_with_lists/#forgetting-to-indent","title":"Forgetting to Indent\u00b6","text":"<p>Always indent the line after the for statement in a loop. If you forget, Python will remind you:</p>"},{"location":"python/04_working_with_lists/#forgetting-to-indent-additional-lines","title":"Forgetting to Indent Additional Lines\u00b6","text":"<p>Sometimes your loop will run without any errors but won\u2019t produce the expected result. This can happen when you\u2019re trying to do several tasks in a loop and you forget to indent some of its lines. For example, this is what happens when we forget to indent the second line in the loop that tells each magician we\u2019re looking forward to their next trick:</p>"},{"location":"python/04_working_with_lists/#indenting-unnecessarily","title":"Indenting Unnecessarily\u00b6","text":"<p>If you accidentally indent a line that doesn\u2019t need to be indented, Python informs you about the unexpected indent:</p>"},{"location":"python/04_working_with_lists/#indenting-unnecessarily","title":"Indenting Unnecessarily\u00b6","text":"<p>After the Loop If you accidentally indent code that should run after a loop has finished, that code will be repeated once for each item in the list. Sometimes this prompts Python to report an error, but often this will result in a logical error. For example, let\u2019s see what happens when we accidentally indent the line that thanked the magicians as a group for putting on a good show:</p>"},{"location":"python/04_working_with_lists/#forgetting-the-colon","title":"Forgetting the Colon\u00b6","text":"<p>The colon at the end of a for statement tells Python to interpret the next line as the start of a loop.</p>"},{"location":"python/04_working_with_lists/#making-numerical-lists","title":"Making Numerical Lists\u00b6","text":"<p>Many reasons exist to store a set of numbers. For example, you\u2019ll need to keep track of the positions of each character in a game, and you might want to keep track of a player\u2019s high scores as well. In data visualizations, you\u2019ll almost always work with sets of numbers, such as temperatures, distances, population sizes, or latitude and longitude values, among other types of numerical sets.</p> <p>Lists are ideal for storing sets of numbers, and Python provides a variety of tools to help you work efficiently with lists of numbers. Once you understand how to use these tools effectively, your code will work well even when your lists contain millions of items.</p>"},{"location":"python/04_working_with_lists/#using-the-range-function","title":"Using the range() Function\u00b6","text":"<p>Python\u2019s range() function makes it easy to generate a series of numbers. For example, you can use the range() function to print a series of numbers like this:</p>"},{"location":"python/04_working_with_lists/#using-range-to-make-a-list-of-numbers","title":"Using range() to Make a List of Numbers\u00b6","text":"<p>If you want to make a list of numbers, you can convert the results of range() directly into a list using the list() function. When you wrap list() around a call to the range() function, the output will be a list of numbers. In the example in the previous section, we simply printed out a series of numbers. We can use list() to convert that same set of numbers into a list:</p>"},{"location":"python/04_working_with_lists/#simple-statistics-with-a-list-of-numbers","title":"Simple Statistics with a List of Numbers\u00b6","text":"<p>A few Python functions are helpful when working with lists of numbers. For example, you can easily find the minimum, maximum, and sum of a list of numbers:</p>"},{"location":"python/04_working_with_lists/#list-comprehensions","title":"List Comprehensions\u00b6","text":"<p>The approach described earlier for generating the list squares consisted of using three or four lines of code. A list comprehension allows you to generate this same list in just one line of code. A list comprehension combines the for loop and the creation of new elements into one line, and automatically appends each new element. List comprehensions are not always presented to beginners, but I have included them here because you\u2019ll most likely see them as soon as you start looking at other people\u2019s code.</p> <p>The following example builds the same list of square numbers you saw earlier but uses a list comprehension:</p>"},{"location":"python/04_working_with_lists/#working-with-part-of-a-list","title":"Working with Part of a List\u00b6","text":"<p>In Lecture 3 you learned how to access single elements in a list, and in this chapter you\u2019ve been learning how to work through all the elements in a list. You can also work with a specific group of items in a list, which Python calls a slice.</p>"},{"location":"python/04_working_with_lists/#slicing-a-list","title":"Slicing a List\u00b6","text":"<p>To make a slice, you specify the index of the first and last elements you want to work with. As with the range() function, Python stops one item before the second index you specify. To output the first three elements in a list, you would request indices 0 through 3, which would return elements 0, 1, and 2. The following example involves a list of players on a team:</p>"},{"location":"python/04_working_with_lists/#looping-through-a-slice","title":"Looping Through a Slice\u00b6","text":"<p>You can use a slice in a for loop if you want to loop through a subset of the elements in a list. In the next example we loop through the first three players and print their names as part of a simple roster:</p>"},{"location":"python/04_working_with_lists/#copying-a-list","title":"Copying a List\u00b6","text":"<p>Often, you\u2019ll want to start with an existing list and make an entirely new list based on the first one. Let\u2019s explore how copying a list works and examine one situation in which copying a list is useful.</p> <p>To copy a list, you can make a slice that includes the entire original list by omitting the first index and the second index ([:]). This tells Python to make a slice that starts at the first item and ends with the last item, producing a copy of the entire list.</p> <p>For example, imagine we have a list of our favorite foods and want to make a separate list of foods that a friend likes. This friend likes everything in our list so far, so we can create their list by copying ours:</p>"},{"location":"python/04_working_with_lists/#tuples","title":"Tuples\u00b6","text":"<p>Lists work well for storing collections of items that can change throughout the life of a program. The ability to modify lists is particularly important when you\u2019re working with a list of users on a website or a list of characters in a game. However, sometimes you\u2019ll want to create a list of items that cannot change. Tuples allow you to do just that. Python refers to values that cannot change as immutable, and an immutable list is called a tuple.</p>"},{"location":"python/04_working_with_lists/#defining-a-tuple","title":"Defining a Tuple\u00b6","text":"<p>A tuple looks just like a list except you use parentheses instead of square brackets. Once you define a tuple, you can access individual elements by using each item\u2019s index, just as you would for a list. For example, if we have a rectangle that should always be a certain size, we can ensure that its size doesn\u2019t change by putting the dimensions into a tuple:</p>"},{"location":"python/04_working_with_lists/#looping-through-all-values-in-a-tuple","title":"Looping Through All Values in a Tuple\u00b6","text":"<p>You can loop over all the values in a tuple using a for loop, just as you did with a list:</p>"},{"location":"python/04_working_with_lists/#writing-over-a-tuple","title":"Writing over a Tuple\u00b6","text":"<p>Although you can\u2019t modify a tuple, you can assign a new value to a variable that represents a tuple. So if we wanted to change our dimensions, we could redefine the entire tuple:</p>"},{"location":"python/05_if_statements/","title":"Conditional Statements","text":"In\u00a0[1]: Copied! <pre>cars = ['audi', 'bmw', 'subaru', 'toyota']\n\nfor car in cars:\n    if car == 'bmw':\n        print(car.upper())\n    else:\n        print(car.title())\n</pre> cars = ['audi', 'bmw', 'subaru', 'toyota']  for car in cars:     if car == 'bmw':         print(car.upper())     else:         print(car.title()) <pre>Audi\nBMW\nSubaru\nToyota\n</pre> In\u00a0[2]: Copied! <pre>car = 'bmw'\ncar == 'bmw'\n</pre> car = 'bmw' car == 'bmw' Out[2]: <pre>True</pre> <p>The line at \u278a sets the value of car to 'bmw' using a single equal sign, as you\u2019ve seen many times already. The line at \u278b checks whether the value of car is 'bmw' using a double equal sign (==). This equality operator returns True if the values on the left and right side of the operator match, and False if they don\u2019t match. The values in this example match, so Python returns True.</p> In\u00a0[3]: Copied! <pre>car = 'audi'\ncar == 'bmw'\n</pre> car = 'audi' car == 'bmw' Out[3]: <pre>False</pre> <p>A single equal sign is really a statement; you might read the code at \u278a as \u201cSet the value of car equal to 'audi'.\u201d On the other hand, a double equal sign, like the one at \u278b, asks a question: \u201cIs the value of car equal to 'bmw'?\u201d Most programming languages use equal signs in this way.</p> In\u00a0[4]: Copied! <pre>car = 'Audi'\ncar == 'audi'\n</pre> car = 'Audi' car == 'audi' Out[4]: <pre>False</pre> <p>If case matters, this behavior is advantageous. But if case doesn\u2019t matter and instead you just want to test the value of a variable, you can convert the variable\u2019s value to lowercase before doing the comparison:</p> In\u00a0[5]: Copied! <pre>car = 'Audi'\ncar.lower() == 'audi'\n</pre> car = 'Audi' car.lower() == 'audi' Out[5]: <pre>True</pre> <p>This test would return True no matter how the value 'Audi' is formatted because the test is now case insensitive. The lower() function doesn\u2019t change the value that was originally stored in car, so you can do this kind of comparison without affecting the original variable:</p> In\u00a0[6]: Copied! <pre>car = 'Audi'\ncar.lower() == 'audi'\n</pre> car = 'Audi' car.lower() == 'audi' Out[6]: <pre>True</pre> In\u00a0[7]: Copied! <pre>print(car)\n</pre> print(car) <pre>Audi\n</pre> <p>Websites enforce certain rules for the data that users enter in a manner similar to this. For example, a site might use a conditional test like this to ensure that every user has a truly unique username, not just a variation on the capitalization of another person\u2019s username. When someone submits a new username, that new username is converted to lowercase and compared to the lowercase versions of all existing usernames. During this check, a username like 'John' will be rejected if any variation of 'john' is already in use.</p> In\u00a0[8]: Copied! <pre>requested_topping = 'mushrooms'\nif requested_topping != 'anchovies':\n    print(\"Hold the anchovies!\")\n</pre> requested_topping = 'mushrooms' if requested_topping != 'anchovies':     print(\"Hold the anchovies!\") <pre>Hold the anchovies!\n</pre> In\u00a0[9]: Copied! <pre>age = 18\nage == 18\n</pre> age = 18 age == 18 Out[9]: <pre>True</pre> <p>You can also test to see if two numbers are not equal. For example, the following code prints a message if the given answer is not correct:</p> In\u00a0[10]: Copied! <pre>answer = 17\nif answer != 42:\n    print(\"That is not the correct answer. Please try again!\")\n</pre> answer = 17 if answer != 42:     print(\"That is not the correct answer. Please try again!\") <pre>That is not the correct answer. Please try again!\n</pre> <p>You can include various mathematical comparisons in your conditional statements as well, such as less than, less than or equal to, greater than, and greater than or equal to:</p> In\u00a0[11]: Copied! <pre>age = 19\nage &lt; 21\n</pre> age = 19 age &lt; 21 Out[11]: <pre>True</pre> In\u00a0[12]: Copied! <pre>age &lt;= 21\n</pre> age &lt;= 21 Out[12]: <pre>True</pre> In\u00a0[13]: Copied! <pre>age &gt; 21\n</pre> age &gt; 21 Out[13]: <pre>False</pre> In\u00a0[14]: Copied! <pre>age &gt;= 21\n</pre> age &gt;= 21 Out[14]: <pre>False</pre> In\u00a0[15]: Copied! <pre>age_0 = 22\nage_1 = 18\nage_0 &gt;= 21 and age_1 &gt;= 21\n</pre> age_0 = 22 age_1 = 18 age_0 &gt;= 21 and age_1 &gt;= 21 Out[15]: <pre>False</pre> In\u00a0[16]: Copied! <pre>age_1 = 22\nage_0 &gt;= 21 and age_1 &gt;= 21\n</pre> age_1 = 22 age_0 &gt;= 21 and age_1 &gt;= 21 Out[16]: <pre>True</pre> <p>To improve readability, you can use parentheses around the individual tests, but they are not required. If you use parentheses, your test would look like this:</p> In\u00a0[17]: Copied! <pre>(age_0 &gt;= 21) and (age_1 &gt;= 21)\n</pre> (age_0 &gt;= 21) and (age_1 &gt;= 21) Out[17]: <pre>True</pre> In\u00a0[18]: Copied! <pre>age_0 = 22\nage_1 = 18\nage_0 &gt;= 21 or age_1 &gt;= 21\n</pre> age_0 = 22 age_1 = 18 age_0 &gt;= 21 or age_1 &gt;= 21 Out[18]: <pre>True</pre> In\u00a0[19]: Copied! <pre>age_0 = 18\nage_0 &gt;= 21 or age_1 &gt;= 21\n</pre> age_0 = 18 age_0 &gt;= 21 or age_1 &gt;= 21 Out[19]: <pre>False</pre> In\u00a0[20]: Copied! <pre>requested_toppings = ['mushrooms', 'onions', 'pineapple']\n'mushrooms' in requested_toppings\n</pre> requested_toppings = ['mushrooms', 'onions', 'pineapple'] 'mushrooms' in requested_toppings Out[20]: <pre>True</pre> In\u00a0[21]: Copied! <pre>'pepperoni' in requested_toppings\n</pre> 'pepperoni' in requested_toppings Out[21]: <pre>False</pre> In\u00a0[22]: Copied! <pre>banned_users = ['andrew', 'carolina', 'david']\nuser = 'marie'\n\nif user not in banned_users:\n    print(f\"{user.title()}, you can post a response if you wish.\")\n</pre> banned_users = ['andrew', 'carolina', 'david'] user = 'marie'  if user not in banned_users:     print(f\"{user.title()}, you can post a response if you wish.\") <pre>Marie, you can post a response if you wish.\n</pre> In\u00a0[23]: Copied! <pre>game_active = True\ncan_edit = False\n</pre> game_active = True can_edit = False In\u00a0[24]: Copied! <pre>age = 19\nif age &gt;= 18:\n    print(\"You are old enough to vote!\")\n</pre> age = 19 if age &gt;= 18:     print(\"You are old enough to vote!\") <pre>You are old enough to vote!\n</pre> <p>Indentation plays the same role in if statements as it did in for loops. All indented lines after an if statement will be executed if the test passes, and the entire block of indented lines will be ignored if the test does not pass.</p> <p>You can have as many lines of code as you want in the block following the if statement. Let\u2019s add another line of output if the person is old enough to vote, asking if the individual has registered to vote yet:</p> In\u00a0[25]: Copied! <pre>age = 19\nif age &gt;= 18:\n    print(\"You are old enough to vote!\")\n    print(\"Have you registered to vote yet?\")\n</pre> age = 19 if age &gt;= 18:     print(\"You are old enough to vote!\")     print(\"Have you registered to vote yet?\") <pre>You are old enough to vote!\nHave you registered to vote yet?\n</pre> In\u00a0[26]: Copied! <pre>age = 17\nif age &gt;= 18:\n    print(\"You are old enough to vote!\")\n    print(\"Have you registered to vote yet?\")\nelse:\n    print(\"Sorry, you are too young to vote.\")\n    print(\"Please register to vote as soon as you turn 18!\")\n</pre> age = 17 if age &gt;= 18:     print(\"You are old enough to vote!\")     print(\"Have you registered to vote yet?\") else:     print(\"Sorry, you are too young to vote.\")     print(\"Please register to vote as soon as you turn 18!\") <pre>Sorry, you are too young to vote.\nPlease register to vote as soon as you turn 18!\n</pre> In\u00a0[27]: Copied! <pre>age = 12\n\nif age &lt; 4:\n    price = 0\nelif age &lt; 18:\n    price = 25\nelif age &lt; 65:\n    price = 40\nelif age &gt;= 65:\n    price = 20\n\nprint(f\"Your admission cost is ${price}.\")\n</pre> age = 12  if age &lt; 4:     price = 0 elif age &lt; 18:     price = 25 elif age &lt; 65:     price = 40 elif age &gt;= 65:     price = 20  print(f\"Your admission cost is ${price}.\") <pre>Your admission cost is $25.\n</pre> In\u00a0[28]: Copied! <pre>age = 12\n\nif age &lt; 4:\n    price = 0\nelif age &lt; 18:\n    price = 25\nelif age &lt; 65:\n    price = 40\nelse:\n    price = 20\n\nprint(f\"Your admission cost is ${price}.\")\n</pre> age = 12  if age &lt; 4:     price = 0 elif age &lt; 18:     price = 25 elif age &lt; 65:     price = 40 else:     price = 20  print(f\"Your admission cost is ${price}.\") <pre>Your admission cost is $25.\n</pre> <p>The else block is a catchall statement. It matches any condition that wasn\u2019t matched by a specific if or elif test, and that can sometimes include invalid or even malicious data. If you have a specific final condition you are testing for, consider using a final elif block and omit the else block. As a result, you\u2019ll gain extra confidence that your code will run only under the correct conditions.</p> In\u00a0[29]: Copied! <pre>requested_toppings = ['mushrooms', 'extra cheese']\n\nif 'mushrooms' in requested_toppings:\n    print(\"Adding mushrooms.\")\nif 'pepperoni' in requested_toppings:\n    print(\"Adding pepperoni.\")\nif 'extra cheese' in requested_toppings:\n    print(\"Adding extra cheese.\")\n\nprint(\"\\nFinished making your pizza!\")\n</pre> requested_toppings = ['mushrooms', 'extra cheese']  if 'mushrooms' in requested_toppings:     print(\"Adding mushrooms.\") if 'pepperoni' in requested_toppings:     print(\"Adding pepperoni.\") if 'extra cheese' in requested_toppings:     print(\"Adding extra cheese.\")  print(\"\\nFinished making your pizza!\") <pre>Adding mushrooms.\nAdding extra cheese.\n\nFinished making your pizza!\n</pre> <p>This code would not work properly if we used an if-elif-else block, because the code would stop running after only one test passes. Here\u2019s what that would look like:</p> In\u00a0[30]: Copied! <pre>requested_toppings = ['mushrooms', 'extra cheese']\n\nif 'mushrooms' in requested_toppings:\n    print(\"Adding mushrooms.\")\nelif 'pepperoni' in requested_toppings:\n    print(\"Adding pepperoni.\")\nelif 'extra cheese' in requested_toppings:\n    print(\"Adding extra cheese.\")\n\nprint(\"\\nFinished making your pizza!\")\n</pre> requested_toppings = ['mushrooms', 'extra cheese']  if 'mushrooms' in requested_toppings:     print(\"Adding mushrooms.\") elif 'pepperoni' in requested_toppings:     print(\"Adding pepperoni.\") elif 'extra cheese' in requested_toppings:     print(\"Adding extra cheese.\")  print(\"\\nFinished making your pizza!\") <pre>Adding mushrooms.\n\nFinished making your pizza!\n</pre> <p>In summary, if you want only one block of code to run, use an if-elif-else chain. If more than one block of code needs to run, use a series of independent if statements.</p> In\u00a0[31]: Copied! <pre>requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n\nfor requested_topping in requested_toppings:\n    print(f\"Adding {requested_topping}.\")\n\nprint(\"\\nFinished making your pizza!\")\n</pre> requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']  for requested_topping in requested_toppings:     print(f\"Adding {requested_topping}.\")  print(\"\\nFinished making your pizza!\") <pre>Adding mushrooms.\nAdding green peppers.\nAdding extra cheese.\n\nFinished making your pizza!\n</pre> <p>The output is straightforward because this code is just a simple for loop. But what if the pizzeria runs out of green peppers? An if statement inside the for loop can handle this situation appropriately:</p> In\u00a0[32]: Copied! <pre>requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n\nfor requested_topping in requested_toppings:\n    if requested_topping == 'green peppers':\n        print(\"Sorry, we are out of green peppers right now.\")\n    else:\n        print(f\"Adding {requested_topping}.\")\n\nprint(\"\\nFinished making your pizza!\")\n</pre> requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']  for requested_topping in requested_toppings:     if requested_topping == 'green peppers':         print(\"Sorry, we are out of green peppers right now.\")     else:         print(f\"Adding {requested_topping}.\")  print(\"\\nFinished making your pizza!\") <pre>Adding mushrooms.\nSorry, we are out of green peppers right now.\nAdding extra cheese.\n\nFinished making your pizza!\n</pre> In\u00a0[33]: Copied! <pre>requested_toppings = []\n\nif requested_toppings:\n    for requested_topping in requested_toppings:\n        print(f\"Adding {requested_topping}.\")\n    print(\"\\nFinished making your pizza!\")\nelse:\n    print(\"Are you sure you want a plain pizza?\")\n</pre> requested_toppings = []  if requested_toppings:     for requested_topping in requested_toppings:         print(f\"Adding {requested_topping}.\")     print(\"\\nFinished making your pizza!\") else:     print(\"Are you sure you want a plain pizza?\") <pre>Are you sure you want a plain pizza?\n</pre> In\u00a0[34]: Copied! <pre>available_toppings = ['mushrooms', 'olives', 'green peppers','pepperoni', 'pineapple', 'extra cheese']\n\nrequested_toppings = ['mushrooms', 'french fries', 'extra cheese']\n\nfor requested_topping in requested_toppings:\n    if requested_topping in available_toppings:\n        print(f\"Adding {requested_topping}.\")\n    else:\n        print(f\"Sorry, we don't have {requested_topping}.\")\n\nprint(\"\\nFinished making your pizza!\")\n</pre> available_toppings = ['mushrooms', 'olives', 'green peppers','pepperoni', 'pineapple', 'extra cheese']  requested_toppings = ['mushrooms', 'french fries', 'extra cheese']  for requested_topping in requested_toppings:     if requested_topping in available_toppings:         print(f\"Adding {requested_topping}.\")     else:         print(f\"Sorry, we don't have {requested_topping}.\")  print(\"\\nFinished making your pizza!\") <pre>Adding mushrooms.\nSorry, we don't have french fries.\nAdding extra cheese.\n\nFinished making your pizza!\n</pre>"},{"location":"python/05_if_statements/#conditional-statements","title":"Conditional Statements\u00b6","text":"<p>Programming often involves examining a set of conditions and deciding which action to take based on those conditions. Python\u2019s if statement allows you to examine the current state of a program and respond appropriately to that state.</p> <p>In this lecture you\u2019ll learn to write conditional tests, which allow you to check any condition of interest. You\u2019ll learn to write simple if statements, and you\u2019ll learn how to create a more complex series of if statements to identify when the exact conditions you want are present. You\u2019ll then apply this concept to lists, so you\u2019ll be able to write a for loop that handles most items in a list one way but handles certain items with specific values in a different way.</p> <ul> <li>A SIMPLE EXAMPLE</li> <li>CONDITIONAL TESTS</li> <li>IF STATEMENTS</li> <li>USING IF STATEMENTS WITH LISTS</li> <li>STYLING YOUR IF STATEMENTS</li> <li>SUMMARY</li> </ul>"},{"location":"python/05_if_statements/#a-simple-example","title":"A SIMPLE EXAMPLE\u00b6","text":"<p>The following short example shows how if tests let you respond to special situations correctly. Imagine you have a list of cars and you want to print out the name of each car. Car names are proper names, so the names of most cars should be printed in title case. However, the value 'bmw' should be printed in all uppercase. The following code loops through a list of car names and looks for the value 'bmw'. Whenever the value is 'bmw', it\u2019s printed in uppercase instead of title case:</p>"},{"location":"python/05_if_statements/#conditional-tests","title":"CONDITIONAL TESTS\u00b6","text":"<p>At the heart of every if statement is an expression that can be evaluated as True or False and is called a conditional test. Python uses the values True and False to decide whether the code in an if statement should be executed. If a conditional test evaluates to True, Python executes the code following the if statement. If the test evaluates to False, Python ignores the code following the if statement.</p>"},{"location":"python/05_if_statements/#checking-for-equality","title":"Checking for Equality\u00b6","text":"<p>Most conditional tests compare the current value of a variable to a specific value of interest. The simplest conditional test checks whether the value of a variable is equal to the value of interest:</p>"},{"location":"python/05_if_statements/#ignoring-case-when-checking-for-equality","title":"Ignoring Case When Checking for Equality\u00b6","text":"<p>Testing for equality is case sensitive in Python. For example, two values with different capitalization are not considered equal:</p>"},{"location":"python/05_if_statements/#checking-for-inequality","title":"Checking for Inequality\u00b6","text":"<p>When you want to determine whether two values are not equal, you can combine an exclamation point and an equal sign (!=). The exclamation point represents not, as it does in many programming languages.</p> <p>Let\u2019s use another if statement to examine how to use the inequality operator. We\u2019ll store a requested pizza topping in a variable and then print a message if the person did not order anchovies:</p>"},{"location":"python/05_if_statements/#numerical-comparisons","title":"Numerical Comparisons\u00b6","text":"<p>Testing numerical values is pretty straightforward. For example, the following code checks whether a person is 18 years old:</p>"},{"location":"python/05_if_statements/#checking-multiple-conditions","title":"Checking Multiple Conditions\u00b6","text":"<p>You may want to check multiple conditions at the same time. For example, sometimes you might need two conditions to be True to take an action. Other times you might be satisfied with just one condition being True. The keywords and and or can help you in these situations.</p>"},{"location":"python/05_if_statements/#using-and-to-check-multiple-conditions","title":"Using and to Check Multiple Conditions\u00b6","text":"<p>To check whether two conditions are both True simultaneously, use the keyword and to combine the two conditional tests; if each test passes, the overall expression evaluates to True. If either test fails or if both tests fail, the expression evaluates to False.</p> <p>For example, you can check whether two people are both over 21 using the following test:</p>"},{"location":"python/05_if_statements/#using-or-to-check-multiple-conditions","title":"Using or to Check Multiple Conditions\u00b6","text":"<p>The keyword or allows you to check multiple conditions as well, but it passes when either or both of the individual tests pass. An or expression fails only when both individual tests fail.</p> <p>Let\u2019s consider two ages again, but this time we\u2019ll look for only one person to be over 21:</p>"},{"location":"python/05_if_statements/#checking-whether-a-value-is-in-a-list","title":"Checking Whether a Value Is in a List\u00b6","text":"<p>Sometimes it\u2019s important to check whether a list contains a certain value before taking an action. For example, you might want to check whether a new username already exists in a list of current usernames before completing someone\u2019s registration on a website. In a mapping project, you might want to check whether a submitted location already exists in a list of known locations.</p> <p>To find out whether a particular value is already in a list, use the keyword in. Let\u2019s consider some code you might write for a pizzeria. We\u2019ll make a list of toppings a customer has requested for a pizza and then check whether certain toppings are in the list.</p>"},{"location":"python/05_if_statements/#checking-whether-a-value-is-not-in-a-list","title":"Checking Whether a Value Is Not in a List\u00b6","text":"<p>Other times, it\u2019s important to know if a value does not appear in a list. You can use the keyword not in this situation. For example, consider a list of users who are banned from commenting in a forum. You can check whether a user has been banned before allowing that person to submit a comment:</p>"},{"location":"python/05_if_statements/#boolean-expressions","title":"Boolean Expressions\u00b6","text":"<p>As you learn more about programming, you\u2019ll hear the term Boolean expression at some point. A Boolean expression is just another name for a conditional test. A Boolean value is either True or False, just like the value of a conditional expression after it has been evaluated.</p> <p>Boolean values are often used to keep track of certain conditions, such as whether a game is running or whether a user can edit certain content on a website:</p>"},{"location":"python/05_if_statements/#if-statements","title":"IF STATEMENTS\u00b6","text":"<p>When you understand conditional tests, you can start writing if statements. Several different kinds of if statements exist, and your choice of which to use depends on the number of conditions you need to test. You saw several examples of if statements in the discussion about conditional tests, but now let\u2019s dig deeper into the topic.</p>"},{"location":"python/05_if_statements/#simple-if-statements","title":"Simple if Statements\u00b6","text":"<p>The simplest kind of if statement has one test and one action:</p> <pre><code>if conditional_test:\n\u00a0\u00a0\u00a0\u00a0do something\n</code></pre> <p>You can put any conditional test in the first line and just about any action in the indented block following the test. If the conditional test evaluates to True, Python executes the code following the if statement. If the test evaluates to False, Python ignores the code following the if statement.</p> <p>Let\u2019s say we have a variable representing a person\u2019s age, and we want to know if that person is old enough to vote. The following code tests whether the person can vote:</p>"},{"location":"python/05_if_statements/#if-else-statements","title":"if-else Statements\u00b6","text":"<p>Often, you\u2019ll want to take one action when a conditional test passes and a different action in all other cases. Python\u2019s if-else syntax makes this possible. An if-else block is similar to a simple if statement, but the else statement allows you to define an action or set of actions that are executed when the conditional test fails.</p> <p>We\u2019ll display the same message we had previously if the person is old enough to vote, but this time we\u2019ll add a message for anyone who is not old enough to vote:</p>"},{"location":"python/05_if_statements/#the-if-elif-else-chain","title":"The if-elif-else Chain\u00b6","text":"<p>Often, you\u2019ll need to test more than two possible situations, and to evaluate these you can use Python\u2019s if-elif-else syntax. Python executes only one block in an if-elif-else chain. It runs each conditional test in order until one passes. When a test passes, the code following that test is executed and Python skips the rest of the tests.</p> <p>Many real-world situations involve more than two possible conditions. For example, consider an amusement park that charges different rates for different age groups:</p> <ul> <li>Admission for anyone under age 4 is free.</li> <li>Admission for anyone between the ages of 4 and 18 is $25.</li> <li>Admission for anyone age 18 or older is $40.</li> </ul> <p>How can we use an if statement to determine a person\u2019s admission rate? The following code tests for the age group of a person and then prints an admission price message:</p>"},{"location":"python/05_if_statements/#using-multiple-elif-blocks","title":"Using Multiple elif Blocks\u00b6","text":"<p>You can use as many elif blocks in your code as you like. For example, if the amusement park were to implement a discount for seniors, you could add one more conditional test to the code to determine whether someone qualified for the senior discount. Let\u2019s say that anyone 65 or older pays half the regular admission, or $20:</p>"},{"location":"python/05_if_statements/#testing-multiple-conditions","title":"Testing Multiple Conditions\u00b6","text":"<p>The if-elif-else chain is powerful, but it\u2019s only appropriate to use when you just need one test to pass. As soon as Python finds one test that passes, it skips the rest of the tests. This behavior is beneficial, because it\u2019s efficient and allows you to test for one specific condition.</p> <p>However, sometimes it\u2019s important to check all of the conditions of interest. In this case, you should use a series of simple if statements with no elif or else blocks. This technique makes sense when more than one condition could be True, and you want to act on every condition that is True.</p> <p>Let\u2019s reconsider the pizzeria example. If someone requests a two-topping pizza, you\u2019ll need to be sure to include both toppings on their pizza:</p>"},{"location":"python/05_if_statements/#using-if-statements-with-lists","title":"USING IF STATEMENTS WITH LISTS\u00b6","text":"<p>You can do some interesting work when you combine lists and if statements. You can watch for special values that need to be treated differently than other values in the list. You can manage changing conditions efficiently, such as the availability of certain items in a restaurant throughout a shift. You can also begin to prove that your code works as you expect it to in all possible situations.</p>"},{"location":"python/05_if_statements/#checking-for-special-items","title":"Checking for Special Items\u00b6","text":"<p>This lecture began with a simple example that showed how to handle a special value like 'bmw', which needed to be printed in a different format than other values in the list. Now that you have a basic understanding of conditional tests and if statements, let\u2019s take a closer look at how you can watch for special values in a list and handle those values appropriately.</p> <p>Let\u2019s continue with the pizzeria example. The pizzeria displays a message whenever a topping is added to your pizza, as it\u2019s being made. The code for this action can be written very efficiently by making a list of toppings the customer has requested and using a loop to announce each topping as it\u2019s added to the pizza:</p>"},{"location":"python/05_if_statements/#checking-that-a-list-is-not-empty","title":"Checking That a List Is Not Empty\u00b6","text":"<p>We\u2019ve made a simple assumption about every list we\u2019ve worked with so far; we\u2019ve assumed that each list has at least one item in it. Soon we\u2019ll let users provide the information that\u2019s stored in a list, so we won\u2019t be able to assume that a list has any items in it each time a loop is run. In this situation, it\u2019s useful to check whether a list is empty before running a for loop.</p> <p>As an example, let\u2019s check whether the list of requested toppings is empty before building the pizza. If the list is empty, we\u2019ll prompt the user and make sure they want a plain pizza. If the list is not empty, we\u2019ll build the pizza just as we did in the previous examples:</p>"},{"location":"python/05_if_statements/#using-multiple-lists","title":"Using Multiple Lists\u00b6","text":"<p>People will ask for just about anything, especially when it comes to pizza toppings. What if a customer actually wants french fries on their pizza? You can use lists and if statements to make sure your input makes sense before you act on it.</p> <p>Let\u2019s watch out for unusual topping requests before we build a pizza. The following example defines two lists. The first is a list of available toppings at the pizzeria, and the second is the list of toppings that the user has requested. This time, each item in requested_toppings is checked against the list of available toppings before it\u2019s added to the pizza:</p>"},{"location":"python/05_if_statements/#styling-your-if-statements","title":"STYLING YOUR IF STATEMENTS\u00b6","text":"<p>In every example in this chapter, you\u2019ve seen good styling habits. The only recommendation PEP 8 provides for styling conditional tests is to use a single space around comparison operators, such as ==, &gt;=, &lt;=. For example:</p> <pre><code>if age &lt; 4:\n</code></pre> <p>is better than:</p> <pre><code>if age&lt;4:\n</code></pre> <p>Such spacing does not affect the way Python interprets your code; it just makes your code easier for you and others to read.</p>"},{"location":"python/05_if_statements/#summary","title":"SUMMARY\u00b6","text":"<p>In this chapter you learned how to write conditional tests, which always evaluate to True or False. You learned to write simple if statements, if-else chains, and if-elif-else chains. You began using these structures to identify particular conditions you needed to test and to know when those conditions have been met in your programs. You learned to handle certain items in a list differently than all other items while continuing to utilize the efficiency of a for loop. You also revisited Python\u2019s style recommendations to ensure that your increasingly complex programs are still relatively easy to read and understand.</p>"},{"location":"python/06_dictionaries/","title":"Dictionaries","text":"In\u00a0[1]: Copied! <pre>alien_0 = {'color': 'green', 'points': 5}\n\nprint(alien_0['color'])\nprint(alien_0['points'])\n</pre> alien_0 = {'color': 'green', 'points': 5}  print(alien_0['color']) print(alien_0['points']) <pre>green\n5\n</pre> In\u00a0[2]: Copied! <pre>alien_0 = {'color': 'green', 'points': 5}\n</pre> alien_0 = {'color': 'green', 'points': 5} <p>A key-value pair is a set of values associated with each other. When you provide a key, Python returns the value associated with that key. Every key is connected to its value by a colon, and individual key-value pairs are separated by commas. You can store as many key-value pairs as you want in a dictionary. The simplest dictionary has exactly one key-value pair, as shown in this modified version of the alien_0 dictionary:</p> In\u00a0[3]: Copied! <pre>alien_0 = {'color': 'green'}\n</pre> alien_0 = {'color': 'green'} In\u00a0[4]: Copied! <pre>alien_0 = {'color': 'green'}\nprint(alien_0['color'])\n</pre> alien_0 = {'color': 'green'} print(alien_0['color']) <pre>green\n</pre> In\u00a0[5]: Copied! <pre>alien_0 = {'color': 'green', 'points': 5}\nprint(alien_0)\nalien_0['x_position'] = 0\nalien_0['y_position'] = 25\nprint(alien_0)\n</pre> alien_0 = {'color': 'green', 'points': 5} print(alien_0) alien_0['x_position'] = 0 alien_0['y_position'] = 25 print(alien_0) <pre>{'color': 'green', 'points': 5}\n{'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25}\n</pre> In\u00a0[6]: Copied! <pre>alien_0 = {}\nalien_0['color'] = 'green'\nalien_0['points'] = 5\n\nprint(alien_0)\n</pre> alien_0 = {} alien_0['color'] = 'green' alien_0['points'] = 5  print(alien_0) <pre>{'color': 'green', 'points': 5}\n</pre> In\u00a0[7]: Copied! <pre>alien_0 = {'color': 'green'}\nprint(f\"The alien is {alien_0['color']}.\")\n\nalien_0['color'] = 'yellow'\nprint(f\"The alien is now {alien_0['color']}.\")\n</pre> alien_0 = {'color': 'green'} print(f\"The alien is {alien_0['color']}.\")  alien_0['color'] = 'yellow' print(f\"The alien is now {alien_0['color']}.\") <pre>The alien is green.\nThe alien is now yellow.\n</pre> <p>For a more interesting example, let\u2019s track the position of an alien that can move at different speeds. We\u2019ll store a value representing the alien\u2019s current speed and then use it to determine how far to the right the alien should move:</p> In\u00a0[8]: Copied! <pre>alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'}\nprint(f\"Original position: {alien_0['x_position']}\")\n\n# Move the alien to the right.\n# Determine how far to move the alien based on its current speed.\nif alien_0['speed'] == 'slow':\n    x_increment = 1\nelif alien_0['speed'] == 'medium':\n    x_increment = 2\nelse:\n    # This must be a fast alien.\n    x_increment = 3\n\n# The new position is the old position plus the increment.\nalien_0['x_position'] = alien_0['x_position'] + x_increment\n\nprint(f\"New position: {alien_0['x_position']}\")\n</pre> alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'} print(f\"Original position: {alien_0['x_position']}\")  # Move the alien to the right. # Determine how far to move the alien based on its current speed. if alien_0['speed'] == 'slow':     x_increment = 1 elif alien_0['speed'] == 'medium':     x_increment = 2 else:     # This must be a fast alien.     x_increment = 3  # The new position is the old position plus the increment. alien_0['x_position'] = alien_0['x_position'] + x_increment  print(f\"New position: {alien_0['x_position']}\") <pre>Original position: 0\nNew position: 2\n</pre> In\u00a0[9]: Copied! <pre>alien_0 = {'color': 'green', 'points': 5}\nprint(alien_0)\n\ndel alien_0['points']\nprint(alien_0)\n</pre> alien_0 = {'color': 'green', 'points': 5} print(alien_0)  del alien_0['points'] print(alien_0) <pre>{'color': 'green', 'points': 5}\n{'color': 'green'}\n</pre> In\u00a0[10]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     } <p>To use this dictionary, given the name of a person who took the poll, you can easily look up their favorite language:</p> In\u00a0[11]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nlanguage = favorite_languages['sarah'].title()\nprint(f\"Sarah's favorite language is {language}.\")\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  language = favorite_languages['sarah'].title() print(f\"Sarah's favorite language is {language}.\") <pre>Sarah's favorite language is C.\n</pre> In\u00a0[12]: Copied! <pre>alien_0 = {'color': 'green', 'speed': 'slow'}\n# print(alien_0['points'])\n</pre> alien_0 = {'color': 'green', 'speed': 'slow'} # print(alien_0['points']) <p>This results in a traceback, showing a KeyError:</p> <pre><code>---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n&lt;ipython-input-16-3914d637e9f3&gt; in &lt;module&gt;\n      1 alien_0 = {'color': 'green', 'speed': 'slow'}\n----&gt; 2 print(alien_0['points'])\n\nKeyError: 'points'\n</code></pre> <p>You\u2019ll learn more about how to handle errors like this in general in this course. For dictionaries, specifically, you can use the get() method to set a default value that will be returned if the requested key doesn\u2019t exist.</p> <p>The get() method requires a key as a first argument. As a second optional argument, you can pass the value to be returned if the key doesn\u2019t exist:</p> In\u00a0[13]: Copied! <pre>point_value = alien_0.get('points', 'No point value assigned.')\nprint(point_value)\n</pre> point_value = alien_0.get('points', 'No point value assigned.') print(point_value) <pre>No point value assigned.\n</pre> In\u00a0[14]: Copied! <pre>user_0 = {\n    'username': 'efermi',\n    'first': 'enrico',\n    'last': 'fermi',\n    }\n</pre> user_0 = {     'username': 'efermi',     'first': 'enrico',     'last': 'fermi',     } <p>You can access any single piece of information about user_0 based on what you\u2019ve already learned in this chapter. But what if you wanted to see everything stored in this user\u2019s dictionary? To do so, you could loop through the dictionary using a for loop:</p> In\u00a0[15]: Copied! <pre>user_0 = {\n    'username': 'efermi',\n    'first': 'enrico',\n    'last': 'fermi',\n    }\n\nfor key, value in user_0.items():\n    print(f\"\\nKey: {key}\")\n    print(f\"Value: {value}\")\n</pre> user_0 = {     'username': 'efermi',     'first': 'enrico',     'last': 'fermi',     }  for key, value in user_0.items():     print(f\"\\nKey: {key}\")     print(f\"Value: {value}\") <pre>\nKey: username\nValue: efermi\n\nKey: first\nValue: enrico\n\nKey: last\nValue: fermi\n</pre> <p>As shown above, to write a for loop for a dictionary, you create names for the two variables that will hold the key and value in each key-value pair. You can choose any names you want for these two variables. This code would work just as well if you had used abbreviations for the variable names, like this:</p> <p><code>for k, v in user_0.items()</code></p> In\u00a0[16]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nfor name in favorite_languages.keys():\n    print(name.title())\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  for name in favorite_languages.keys():     print(name.title()) <pre>Jen\nSarah\nEdward\nPhil\n</pre> <p>Looping through the keys is actually the default behavior when looping through a dictionary, so this code would have exactly the same output if you wrote:</p> <pre><code>for name in favorite_languages:\n</code></pre> <p>You can choose to use the keys() method explicitly if it makes your code easier to read, or you can omit it if you wish.</p> <p>You can access the value associated with any key you care about inside the loop by using the current key. Let\u2019s print a message to a couple of friends about the languages they chose. We\u2019ll loop through the names in the dictionary as we did previously, but when the name matches one of our friends, we\u2019ll display a message about their favorite language:</p> In\u00a0[17]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nfriends = ['phil', 'sarah']\nfor name in favorite_languages.keys():\n    print(name.title())\n\n    if name in friends:\n        language = favorite_languages[name].title()\n        print(f\"\\t{name.title()}, I see you love {language}!\")\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  friends = ['phil', 'sarah'] for name in favorite_languages.keys():     print(name.title())      if name in friends:         language = favorite_languages[name].title()         print(f\"\\t{name.title()}, I see you love {language}!\")  <pre>Jen\nSarah\n\tSarah, I see you love C!\nEdward\nPhil\n\tPhil, I see you love Python!\n</pre> <p>You can also use the keys() method to find out if a particular person was polled. This time, let\u2019s find out if Erin took the poll:</p> In\u00a0[18]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nif 'erin' not in favorite_languages.keys():\n    print(\"Erin, please take our poll!\")\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  if 'erin' not in favorite_languages.keys():     print(\"Erin, please take our poll!\") <pre>Erin, please take our poll!\n</pre> In\u00a0[19]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nfor name in sorted(favorite_languages.keys()):\n    print(f\"{name.title()}, thank you for taking the poll.\")\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  for name in sorted(favorite_languages.keys()):     print(f\"{name.title()}, thank you for taking the poll.\") <pre>Edward, thank you for taking the poll.\nJen, thank you for taking the poll.\nPhil, thank you for taking the poll.\nSarah, thank you for taking the poll.\n</pre> In\u00a0[20]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nprint(\"The following languages have been mentioned:\")\nfor language in favorite_languages.values():\n    print(language.title())\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  print(\"The following languages have been mentioned:\") for language in favorite_languages.values():     print(language.title()) <pre>The following languages have been mentioned:\nPython\nC\nRuby\nPython\n</pre> <p>This approach pulls all the values from the dictionary without checking for repeats. That might work fine with a small number of values, but in a poll with a large number of respondents, this would result in a very repetitive list. To see each language chosen without repetition, we can use a set. A set is a collection in which each item must be unique:</p> In\u00a0[21]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nprint(\"The following languages have been mentioned:\")\nfor language in set(favorite_languages.values()):\n    print(language.title())\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  print(\"The following languages have been mentioned:\") for language in set(favorite_languages.values()):     print(language.title()) <pre>The following languages have been mentioned:\nRuby\nC\nPython\n</pre> <p>When you wrap set() around a list that contains duplicate items, Python identifies the unique items in the list and builds a set from those items. We use set() to pull out the unique languages in favorite_languages.values().</p> In\u00a0[22]: Copied! <pre>alien_0 = {'color': 'green', 'points': 5}\nalien_1 = {'color': 'yellow', 'points': 10}\nalien_2 = {'color': 'red', 'points': 15}\n\naliens = [alien_0, alien_1, alien_2]\n\nfor alien in aliens:\n    print(alien)\n</pre> alien_0 = {'color': 'green', 'points': 5} alien_1 = {'color': 'yellow', 'points': 10} alien_2 = {'color': 'red', 'points': 15}  aliens = [alien_0, alien_1, alien_2]  for alien in aliens:     print(alien) <pre>{'color': 'green', 'points': 5}\n{'color': 'yellow', 'points': 10}\n{'color': 'red', 'points': 15}\n</pre> <p>A more realistic example would involve more than three aliens with code that automatically generates each alien. In the following example we use range() to create a fleet of 30 aliens:</p> In\u00a0[23]: Copied! <pre># Make an empty list for storing aliens.\naliens = []\n\n# Make 30 green aliens.\nfor alien_number in range(30):\n    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}\n    aliens.append(new_alien)\n# Show the first 5 aliens.\nfor alien in aliens[:5]:\n    print(alien)\n    print(\"...\")\n\n# Show how many aliens have been created.\nprint(f\"Total number of aliens: {len(aliens)}\")\n</pre> # Make an empty list for storing aliens. aliens = []  # Make 30 green aliens. for alien_number in range(30):     new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}     aliens.append(new_alien) # Show the first 5 aliens. for alien in aliens[:5]:     print(alien)     print(\"...\")  # Show how many aliens have been created. print(f\"Total number of aliens: {len(aliens)}\") <pre>{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\nTotal number of aliens: 30\n</pre> <p>It\u2019s common to store a number of dictionaries in a list when each dictionary contains many kinds of information about one object. For example, you might create a dictionary for each user on a website. All of the dictionaries in the list should have an identical structure so you can loop through the list and work with each dictionary object in the same way.</p> In\u00a0[24]: Copied! <pre># Store information about a pizza being ordered.\npizza = {\n    'crust': 'thick',\n    'toppings': ['mushrooms', 'extra cheese'],\n    }\n\n# Summarize the order.\nprint(f\"You ordered a {pizza['crust']}-crust pizza \"\n    \"with the following toppings:\")\n\nfor topping in pizza['toppings']:\n    print(\"\\t\" + topping)\n</pre>  # Store information about a pizza being ordered. pizza = {     'crust': 'thick',     'toppings': ['mushrooms', 'extra cheese'],     }  # Summarize the order. print(f\"You ordered a {pizza['crust']}-crust pizza \"     \"with the following toppings:\")  for topping in pizza['toppings']:     print(\"\\t\" + topping) <pre>You ordered a thick-crust pizza with the following toppings:\n\tmushrooms\n\textra cheese\n</pre> <p>You can nest a list inside a dictionary any time you want more than one value to be associated with a single key in a dictionary. In the earlier example of favorite programming languages, if we were to store each person\u2019s responses in a list, people could choose more than one favorite language. When we loop through the dictionary, the value associated with each person would be a list of languages rather than a single language. Inside the dictionary\u2019s for loop, we use another for loop to run through the list of languages associated with each person:</p> In\u00a0[25]: Copied! <pre>favorite_languages = {\n    'jen': ['python', 'ruby'],\n    'sarah': ['c'],\n    'edward': ['ruby', 'go'],\n    'phil': ['python', 'haskell'],\n    }\n\nfor name, languages in favorite_languages.items():\n    print(f\"\\n{name.title()}'s favorite languages are:\")\n    for language in languages:\n        print(f\"\\t{language.title()}\")\n</pre> favorite_languages = {     'jen': ['python', 'ruby'],     'sarah': ['c'],     'edward': ['ruby', 'go'],     'phil': ['python', 'haskell'],     }  for name, languages in favorite_languages.items():     print(f\"\\n{name.title()}'s favorite languages are:\")     for language in languages:         print(f\"\\t{language.title()}\") <pre>\nJen's favorite languages are:\n\tPython\n\tRuby\n\nSarah's favorite languages are:\n\tC\n\nEdward's favorite languages are:\n\tRuby\n\tGo\n\nPhil's favorite languages are:\n\tPython\n\tHaskell\n</pre> In\u00a0[26]: Copied! <pre>users = {\n    'aeinstein': {\n        'first': 'albert',\n        'last': 'einstein',\n        'location': 'princeton',\n        },\n\n    'mcurie': {\n        'first': 'marie',\n        'last': 'curie',\n        'location': 'paris',\n        },\n\n    }\n\nfor username, user_info in users.items():\n    print(f\"\\nUsername: {username}\")\n    full_name = f\"{user_info['first']} {user_info['last']}\"\n    location = user_info['location']\n\n    print(f\"\\tFull name: {full_name.title()}\")\n    print(f\"\\tLocation: {location.title()}\")\n</pre> users = {     'aeinstein': {         'first': 'albert',         'last': 'einstein',         'location': 'princeton',         },      'mcurie': {         'first': 'marie',         'last': 'curie',         'location': 'paris',         },      }  for username, user_info in users.items():     print(f\"\\nUsername: {username}\")     full_name = f\"{user_info['first']} {user_info['last']}\"     location = user_info['location']      print(f\"\\tFull name: {full_name.title()}\")     print(f\"\\tLocation: {location.title()}\")  <pre>\nUsername: aeinstein\n\tFull name: Albert Einstein\n\tLocation: Princeton\n\nUsername: mcurie\n\tFull name: Marie Curie\n\tLocation: Paris\n</pre>"},{"location":"python/06_dictionaries/#dictionaries","title":"Dictionaries\u00b6","text":"<p>In this lecture you\u2019ll learn how to use Python\u2019s dictionaries, which allow you to connect pieces of related information. You\u2019ll learn how to access the information once it\u2019s in a dictionary and how to modify that information. Because dictionaries can store an almost limitless amount of information, I\u2019ll show you how to loop through the data in a dictionary. Additionally, you\u2019ll learn to nest dictionaries inside lists, lists inside dictionaries, and even dictionaries inside other dictionaries.</p> <p>Understanding dictionaries allows you to model a variety of real-world objects more accurately. You\u2019ll be able to create a dictionary representing a person and then store as much information as you want about that person. You can store their name, age, location, profession, and any other aspect of a person you can describe. You\u2019ll be able to store any two kinds of information that can be matched up, such as a list of words and their meanings, a list of people\u2019s names and their favorite numbers, a list of mountains and their elevations, and so forth.</p> <ul> <li>A SIMPLE DICTIONARY</li> <li>WORKING WITH DICTIONARIES</li> <li>LOOPING THROUGH A DICTIONARY</li> <li>NESTING</li> <li>SUMMARY</li> </ul>"},{"location":"python/06_dictionaries/#a-simple-dictionary","title":"A SIMPLE DICTIONARY\u00b6","text":"<p>Consider a game featuring aliens that can have different colors and point values. This simple dictionary stores information about a particular alien:</p>"},{"location":"python/06_dictionaries/#working-with-dictionaries","title":"WORKING WITH DICTIONARIES\u00b6","text":"<p>A dictionary in Python is a collection of key-value pairs. Each key is connected to a value, and you can use a key to access the value associated with that key. A key\u2019s value can be a number, a string, a list, or even another dictionary. In fact, you can use any object that you can create in Python as a value in a dictionary.</p> <p>In Python, a dictionary is wrapped in braces, {}, with a series of key-value pairs inside the braces, as shown in the earlier example:</p>"},{"location":"python/06_dictionaries/#accessing-values-in-a-dictionary","title":"Accessing Values in a Dictionary\u00b6","text":"<p>To get the value associated with a key, give the name of the dictionary and then place the key inside a set of square brackets, as shown here:</p>"},{"location":"python/06_dictionaries/#adding-new-key-value-pairs","title":"Adding New Key-Value Pairs\u00b6","text":"<p>Dictionaries are dynamic structures, and you can add new key-value pairs to a dictionary at any time. For example, to add a new key-value pair, you would give the name of the dictionary followed by the new key in square brackets along with the new value.</p> <p>Let\u2019s add two new pieces of information to the alien_0 dictionary: the alien\u2019s x- and y-coordinates, which will help us display the alien in a particular position on the screen. Let\u2019s place the alien on the left edge of the screen, 25 pixels down from the top. Because screen coordinates usually start at the upper-left corner of the screen, we\u2019ll place the alien on the left edge of the screen by setting the x-coordinate to 0 and 25 pixels from the top by setting its y-coordinate to positive 25, as shown here:</p>"},{"location":"python/06_dictionaries/#starting-with-an-empty-dictionary","title":"Starting with an Empty Dictionary\u00b6","text":"<p>It\u2019s sometimes convenient, or even necessary, to start with an empty dictionary and then add each new item to it. To start filling an empty dictionary, define a dictionary with an empty set of braces and then add each key-value pair on its own line. For example, here\u2019s how to build the alien_0 dictionary using this approach:</p>"},{"location":"python/06_dictionaries/#modifying-values-in-a-dictionary","title":"Modifying Values in a Dictionary\u00b6","text":"<p>To modify a value in a dictionary, give the name of the dictionary with the key in square brackets and then the new value you want associated with that key. For example, consider an alien that changes from green to yellow as a game progresses:</p>"},{"location":"python/06_dictionaries/#removing-key-value-pairs","title":"Removing Key-Value Pairs\u00b6","text":"<p>When you no longer need a piece of information that\u2019s stored in a dictionary, you can use the del statement to completely remove a key-value pair. All del needs is the name of the dictionary and the key that you want to remove.</p> <p>For example, let\u2019s remove the key 'points' from the alien_0 dictionary along with its value:</p>"},{"location":"python/06_dictionaries/#a-dictionary-of-similar-objects","title":"A Dictionary of Similar Objects\u00b6","text":"<p>The previous example involved storing different kinds of information about one object, an alien in a game. You can also use a dictionary to store one kind of information about many objects. For example, say you want to poll a number of people and ask them what their favorite programming language is. A dictionary is useful for storing the results of a simple poll, like this:</p>"},{"location":"python/06_dictionaries/#using-get-to-access-values","title":"Using get() to Access Values\u00b6","text":"<p>Using keys in square brackets to retrieve the value you\u2019re interested in from a dictionary might cause one potential problem: if the key you ask for doesn\u2019t exist, you\u2019ll get an error.</p> <p>Let\u2019s see what happens when you ask for the point value of an alien that doesn\u2019t have a point value set:</p>"},{"location":"python/06_dictionaries/#looping-through-a-dictionary","title":"LOOPING THROUGH A DICTIONARY\u00b6","text":"<p>A single Python dictionary can contain just a few key-value pairs or millions of pairs. Because a dictionary can contain large amounts of data, Python lets you loop through a dictionary. Dictionaries can be used to store information in a variety of ways; therefore, several different ways exist to loop through them. You can loop through all of a dictionary\u2019s key-value pairs, through its keys, or through its values.</p>"},{"location":"python/06_dictionaries/#looping-through-all-key-value-pairs","title":"Looping Through All Key-Value Pairs\u00b6","text":"<p>Before we explore the different approaches to looping, let\u2019s consider a new dictionary designed to store information about a user on a website. The following dictionary would store one person\u2019s username, first name, and last name:</p>"},{"location":"python/06_dictionaries/#looping-through-all-the-keys-in-a-dictionary","title":"Looping Through All the Keys in a Dictionary\u00b6","text":"<p>The keys() method is useful when you don\u2019t need to work with all of the values in a dictionary. Let\u2019s loop through the favorite_languages dictionary and print the names of everyone who took the poll:</p>"},{"location":"python/06_dictionaries/#looping-through-a-dictionarys-keys-in-a-particular-order","title":"Looping Through a Dictionary\u2019s Keys in a Particular Order\u00b6","text":"<p>Starting in Python 3.7, looping through a dictionary returns the items in the same order they were inserted. Sometimes, though, you\u2019ll want to loop through a dictionary in a different order.</p> <p>One way to do this is to sort the keys as they\u2019re returned in the for loop. You can use the sorted() function to get a copy of the keys in order:</p>"},{"location":"python/06_dictionaries/#looping-through-all-values-in-a-dictionary","title":"Looping Through All Values in a Dictionary\u00b6","text":"<p>If you are primarily interested in the values that a dictionary contains, you can use the values() method to return a list of values without any keys. For example, say we simply want a list of all languages chosen in our programming language poll without the name of the person who chose each language:</p>"},{"location":"python/06_dictionaries/#nesting","title":"NESTING\u00b6","text":"<p>Sometimes you\u2019ll want to store multiple dictionaries in a list, or a list of items as a value in a dictionary. This is called nesting. You can nest dictionaries inside a list, a list of items inside a dictionary, or even a dictionary inside another dictionary. Nesting is a powerful feature, as the following examples will demonstrate.</p>"},{"location":"python/06_dictionaries/#a-list-of-dictionaries","title":"A List of Dictionaries\u00b6","text":"<p>The alien_0 dictionary contains a variety of information about one alien, but it has no room to store information about a second alien, much less a screen full of aliens. How can you manage a fleet of aliens? One way is to make a list of aliens in which each alien is a dictionary of information about that alien. For example, the following code builds a list of three aliens:</p>"},{"location":"python/06_dictionaries/#a-list-in-a-dictionary","title":"A List in a Dictionary\u00b6","text":"<p>Rather than putting a dictionary inside a list, it\u2019s sometimes useful to put a list inside a dictionary. For example, consider how you might describe a pizza that someone is ordering. If you were to use only a list, all you could really store is a list of the pizza\u2019s toppings. With a dictionary, a list of toppings can be just one aspect of the pizza you\u2019re describing.</p> <p>In the following example, two kinds of information are stored for each pizza: a type of crust and a list of toppings. The list of toppings is a value associated with the key 'toppings'. To use the items in the list, we give the name of the dictionary and the key 'toppings', as we would any value in the dictionary. Instead of returning a single value, we get a list of toppings:</p>"},{"location":"python/06_dictionaries/#a-dictionary-in-a-dictionary","title":"A Dictionary in a Dictionary\u00b6","text":"<p>You can nest a dictionary inside another dictionary, but your code can get complicated quickly when you do. For example, if you have several users for a website, each with a unique username, you can use the usernames as the keys in a dictionary. You can then store information about each user by using a dictionary as the value associated with their username. In the following listing, we store three pieces of information about each user: their first name, last name, and location. We\u2019ll access this information by looping through the usernames and the dictionary of information associated with each username:</p>"},{"location":"python/06_dictionaries/#summary","title":"SUMMARY\u00b6","text":"<p>In this chapter you learned how to define a dictionary and how to work with the information stored in a dictionary. You learned how to access and modify individual elements in a dictionary, and how to loop through all of the information in a dictionary. You learned to loop through a dictionary\u2019s key-value pairs, its keys, and its values. You also learned how to nest multiple dictionaries in a list, nest lists in a dictionary, and nest a dictionary inside a dictionary.</p>"},{"location":"python/07_user_input_while_loops/","title":"Looping","text":"In\u00a0[1]: Copied! <pre># message = input(\"Tell me something, and I will repeat it back to you: \")\n# print(message)\n</pre> # message = input(\"Tell me something, and I will repeat it back to you: \") # print(message) <p>The input() function takes one argument: the prompt, or instructions, that we want to display to the user so they know what to do. In this example, when Python runs the first line, the user sees the prompt Tell me something, and I will repeat it back to you: . The program waits while the user enters their response and continues after the user presses ENTER. The response is assigned to the variable message, then print(message) displays the input back to the user:</p> In\u00a0[2]: Copied! <pre># name = input(\"Please enter your name: \")\n# print(f\"\\nHello, {name}!\")\n</pre> # name = input(\"Please enter your name: \") # print(f\"\\nHello, {name}!\") <p>Sometimes you\u2019ll want to write a prompt that\u2019s longer than one line. For example, you might want to tell the user why you\u2019re asking for certain input. You can assign your prompt to a variable and pass that variable to the input() function. This allows you to build your prompt over several lines, then write a clean input() statement.</p> In\u00a0[3]: Copied! <pre>prompt = \"If you tell us who you are, we can personalize the messages you see.\"\nprompt += \"\\nWhat is your first name? \"\n\n# name = input(prompt)\n# print(f\"\\nHello, {name}!\")\n</pre> prompt = \"If you tell us who you are, we can personalize the messages you see.\" prompt += \"\\nWhat is your first name? \"  # name = input(prompt) # print(f\"\\nHello, {name}!\") <p>This example shows one way to build a multi-line string. The first line assigns the first part of the message to the variable prompt. In the second line, the operator += takes the string that was assigned to prompt and adds the new string onto the end.</p> <p>The prompt now spans two lines, again with space after the question mark for clarity:</p> In\u00a0[4]: Copied! <pre># age = input(\"How old are you? \")\n# age\n</pre> # age = input(\"How old are you? \") # age <p>The user enters the number 21, but when we ask Python for the value of age, it returns '21', the string representation of the numerical value entered. We know Python interpreted the input as a string because the number is now enclosed in quotes. If all you want to do is print the input, this works well. But if you try to use the input as a number, you\u2019ll get an error. We can resolve this issue by using the int() function, which tells Python to treat the input as a numerical value. The int() function converts a string representation of a number to a numerical representation, as shown here:</p> In\u00a0[5]: Copied! <pre># age = input(\"How old are you? \")\n# age = int(age)\n# age\n</pre> # age = input(\"How old are you? \") # age = int(age) # age <p>How do you use the int() function in an actual program? Consider a program that determines whether people are tall enough to ride a roller coaster:</p> In\u00a0[6]: Copied! <pre># height = input(\"How tall are you, in inches? \")\n# height = int(height)\n\n# if height &gt;= 48:\n#     print(\"\\nYou're tall enough to ride!\")\n# else:\n#     print(\"\\nYou'll be able to ride when you're a little older.\")\n</pre> # height = input(\"How tall are you, in inches? \") # height = int(height)  # if height &gt;= 48: #     print(\"\\nYou're tall enough to ride!\") # else: #     print(\"\\nYou'll be able to ride when you're a little older.\") In\u00a0[7]: Copied! <pre>4 % 3\n</pre> 4 % 3 Out[7]: <pre>1</pre> In\u00a0[8]: Copied! <pre>5 % 3\n</pre> 5 % 3 Out[8]: <pre>2</pre> In\u00a0[9]: Copied! <pre>6 % 3\n</pre> 6 % 3 Out[9]: <pre>0</pre> In\u00a0[10]: Copied! <pre>7 % 3\n</pre> 7 % 3 Out[10]: <pre>1</pre> <p>The modulo operator doesn\u2019t tell you how many times one number fits into another; it just tells you what the remainder is.</p> <p>When one number is divisible by another number, the remainder is 0, so the modulo operator always returns 0. You can use this fact to determine if a number is even or odd:</p> In\u00a0[11]: Copied! <pre># number = input(\"Enter a number, and I'll tell you if it's even or odd: \")\n# number = int(number)\n\n# if number % 2 == 0:\n#     print(f\"\\nThe number {number} is even.\")\n# else:\n#     print(f\"\\nThe number {number} is odd.\")\n</pre> # number = input(\"Enter a number, and I'll tell you if it's even or odd: \") # number = int(number)  # if number % 2 == 0: #     print(f\"\\nThe number {number} is even.\") # else: #     print(f\"\\nThe number {number} is odd.\") In\u00a0[12]: Copied! <pre>current_number = 1\nwhile current_number &lt;= 5:\n    print(current_number)\n    current_number += 1\n</pre> current_number = 1 while current_number &lt;= 5:     print(current_number)     current_number += 1 <pre>1\n2\n3\n4\n5\n</pre> <p>In the first line, we start counting from 1 by assigning current_number the value 1. The while loop is then set to keep running as long as the value of current_number is less than or equal to 5. The code inside the loop prints the value of current_number and then adds 1 to that value with current_number += 1. (The += operator is shorthand for current_number = current_number + 1.)</p> <p>Python repeats the loop as long as the condition current_number &lt;= 5 is true. Because 1 is less than 5, Python prints 1 and then adds 1, making the current number 2. Because 2 is less than 5, Python prints 2 and adds 1 again, making the current number 3, and so on. Once the value of current_number is greater than 5, the loop stops running and the program end.</p> <p>The programs you use every day most likely contain while loops. For example, a game needs a while loop to keep running as long as you want to keep playing, and so it can stop running as soon as you ask it to quit. Programs wouldn\u2019t be fun to use if they stopped running before we told them to or kept running even after we wanted to quit, so while loops are quite useful.</p> In\u00a0[13]: Copied! <pre>prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"\n\nmessage = \"\"\n# while message != 'quit':\n#     message = input(prompt)\n\n#     if message != 'quit':\n#         print(message)\n</pre> prompt = \"\\nTell me something, and I will repeat it back to you:\" prompt += \"\\nEnter 'quit' to end the program. \"  message = \"\" # while message != 'quit': #     message = input(prompt)  #     if message != 'quit': #         print(message) <p>The first time through the loop, message is just an empty string, so Python enters the loop. At message = input(prompt), Python displays the prompt and waits for the user to enter their input. Whatever they enter is assigned to message and printed; then, Python reevaluates the condition in the while statement. As long as the user has not entered the word 'quit', the prompt is displayed again and Python waits for more input. When the user finally enters 'quit', Python stops executing the while loop and the program end.</p> In\u00a0[14]: Copied! <pre>prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"\n\nactive = True\n# while active:\n#     message = input(prompt)\n\n#     if message == 'quit':\n#         active = False\n#     else:\n#         print(message)\n</pre> prompt = \"\\nTell me something, and I will repeat it back to you:\" prompt += \"\\nEnter 'quit' to end the program. \"  active = True # while active: #     message = input(prompt)  #     if message == 'quit': #         active = False #     else: #         print(message) In\u00a0[15]: Copied! <pre>prompt = \"\\nPlease enter the name of a city you have visited:\"\nprompt += \"\\n(Enter 'quit' when you are finished.) \"\n\n# while True:\n#     city = input(prompt)\n\n#     if city == 'quit':\n#         break\n#     else:\n#         print(f\"I'd love to go to {city.title()}!\")\n</pre> prompt = \"\\nPlease enter the name of a city you have visited:\" prompt += \"\\n(Enter 'quit' when you are finished.) \"  # while True: #     city = input(prompt)  #     if city == 'quit': #         break #     else: #         print(f\"I'd love to go to {city.title()}!\") <p>A loop that starts with while True will run forever unless it reaches a break statement. The loop in this program continues asking the user to enter the names of cities they\u2019ve been to until they enter 'quit'. When they enter 'quit', the break statement runs, causing Python to exit the loop.</p> In\u00a0[16]: Copied! <pre>current_number = 0\nwhile current_number &lt; 10:\n    current_number += 1\n    if current_number % 2 == 0:\n        continue\n\n    print(current_number)\n</pre> current_number = 0 while current_number &lt; 10:     current_number += 1     if current_number % 2 == 0:         continue      print(current_number) <pre>1\n3\n5\n7\n9\n</pre> In\u00a0[17]: Copied! <pre>x = 1\nwhile x &lt;= 5:\n    print(x)\n    x += 1\n</pre> x = 1 while x &lt;= 5:     print(x)     x += 1 <pre>1\n2\n3\n4\n5\n</pre> <p>But if you accidentally omit the line x += 1 (as shown next), the loop will run forever:</p> In\u00a0[18]: Copied! <pre># # This loop runs forever!\n# x = 1\n# while x &lt;= 5:\n#     print(x)\n</pre> # # This loop runs forever! # x = 1 # while x &lt;= 5: #     print(x) <p>Every programmer accidentally writes an infinite while loop from time to time, especially when a program\u2019s loops have subtle exit conditions. If your program gets stuck in an infinite loop, press CTRL-C or just close the terminal window displaying your program\u2019s output.</p> <p>To avoid writing infinite loops, test every while loop and make sure the loop stops when you expect it to. If you want your program to end when the user enters a certain input value, run the program and enter that value. If the program doesn\u2019t end, scrutinize the way your program handles the value that should cause the loop to exit. Make sure at least one part of the program can make the loop\u2019s condition False or cause it to reach a break statement.</p> In\u00a0[19]: Copied! <pre># Start with users that need to be verified,\n#  and an empty list to hold confirmed users.\nunconfirmed_users = ['alice', 'brian', 'candace']\nconfirmed_users = []\n\n# Verify each user until there are no more unconfirmed users.\n#  Move each verified user into the list of confirmed users.\nwhile unconfirmed_users:\n    current_user = unconfirmed_users.pop()\n\n    print(f\"Verifying user: {current_user.title()}\")\n    confirmed_users.append(current_user)\n\n# Display all confirmed users.\nprint(\"\\nThe following users have been confirmed:\")\nfor confirmed_user in confirmed_users:\n    print(confirmed_user.title())\n</pre> # Start with users that need to be verified, #  and an empty list to hold confirmed users. unconfirmed_users = ['alice', 'brian', 'candace'] confirmed_users = []  # Verify each user until there are no more unconfirmed users. #  Move each verified user into the list of confirmed users. while unconfirmed_users:     current_user = unconfirmed_users.pop()      print(f\"Verifying user: {current_user.title()}\")     confirmed_users.append(current_user)  # Display all confirmed users. print(\"\\nThe following users have been confirmed:\") for confirmed_user in confirmed_users:     print(confirmed_user.title()) <pre>Verifying user: Candace\nVerifying user: Brian\nVerifying user: Alice\n\nThe following users have been confirmed:\nCandace\nBrian\nAlice\n</pre> In\u00a0[20]: Copied! <pre>pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\nprint(pets)\n\nwhile 'cat' in pets:\n    pets.remove('cat')\n\nprint(pets)\n</pre> pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat'] print(pets)  while 'cat' in pets:     pets.remove('cat')  print(pets) <pre>['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\n['dog', 'dog', 'goldfish', 'rabbit']\n</pre> In\u00a0[21]: Copied! <pre>responses = {}\n\n# Set a flag to indicate that polling is active.\npolling_active = True\n\n# while polling_active:\n#     # Prompt for the person's name and response.\n#     name = input(\"\\nWhat is your name? \")\n#     response = input(\"Which mountain would you like to climb someday? \")\n\n#     # Store the response in the dictionary.\n#     responses[name] = response\n\n#     # Find out if anyone else is going to take the poll.\n#     repeat = input(\"Would you like to let another person respond? (yes/ no) \")\n#     if repeat == 'no':\n#         polling_active = False\n\n# # Polling is complete. Show the results.\n# print(\"\\n--- Poll Results ---\")\n# for name, response in responses.items():\n#     print(f\"{name} would like to climb {response}.\")\n</pre> responses = {}  # Set a flag to indicate that polling is active. polling_active = True  # while polling_active: #     # Prompt for the person's name and response. #     name = input(\"\\nWhat is your name? \") #     response = input(\"Which mountain would you like to climb someday? \")  #     # Store the response in the dictionary. #     responses[name] = response  #     # Find out if anyone else is going to take the poll. #     repeat = input(\"Would you like to let another person respond? (yes/ no) \") #     if repeat == 'no': #         polling_active = False  # # Polling is complete. Show the results. # print(\"\\n--- Poll Results ---\") # for name, response in responses.items(): #     print(f\"{name} would like to climb {response}.\")"},{"location":"python/07_user_input_while_loops/#looping","title":"Looping\u00b6","text":"<p>Most programs are written to solve an end user\u2019s problem. To do so, you usually need to get some information from the user. For a simple example, let\u2019s say someone wants to find out whether they\u2019re old enough to vote. If you write a program to answer this question, you need to know the user\u2019s age before you can provide an answer. The program will need to ask the user to enter, or input, their age; once the program has this input, it can compare it to the voting age to determine if the user is old enough and then report the result.</p> <p>In this chapter you\u2019ll learn how to accept user input so your program can then work with it. When your program needs a name, you\u2019ll be able to prompt the user for a name. When your program needs a list of names, you\u2019ll be able to prompt the user for a series of names. To do this, you\u2019ll use the input() function.</p> <p>You\u2019ll also learn how to keep programs running as long as users want them to, so they can enter as much information as they need to; then, your program can work with that information. You\u2019ll use Python\u2019s while loop to keep programs running as long as certain conditions remain true.</p> <p>With the ability to work with user input and the ability to control how long your programs run, you\u2019ll be able to write fully interactive programs.</p> <ul> <li>HOW THE INPUT() FUNCTION WORKS</li> <li>INTRODUCING WHILE LOOPS</li> <li>USING A WHILE LOOP WITH LISTS AND DICTIONARIES</li> <li>SUMMARY</li> </ul>"},{"location":"python/07_user_input_while_loops/#how-the-input-function-works","title":"HOW THE INPUT() FUNCTION WORKS\u00b6","text":"<p>The input() function pauses your program and waits for the user to enter some text. Once Python receives the user\u2019s input, it assigns that input to a variable to make it convenient for you to work with.</p> <p>For example, the following program asks the user to enter some text, then displays that message back to the user:</p>"},{"location":"python/07_user_input_while_loops/#writing-clear-prompts","title":"Writing Clear Prompts\u00b6","text":"<p>Each time you use the input() function, you should include a clear, easy-to-follow prompt that tells the user exactly what kind of information you\u2019re looking for. Any statement that tells the user what to enter should work. For example:</p>"},{"location":"python/07_user_input_while_loops/#using-int-to-accept-numerical-input","title":"Using int() to Accept Numerical Input\u00b6","text":"<p>When you use the input() function, Python interprets everything the user enters as a string. Consider the following interpreter session, which asks for the user\u2019s age:</p>"},{"location":"python/07_user_input_while_loops/#the-modulo-operator","title":"The Modulo Operator\u00b6","text":"<p>A useful tool for working with numerical information is the modulo operator (%), which divides one number by another number and returns the remainder:</p>"},{"location":"python/07_user_input_while_loops/#introducing-while-loops","title":"INTRODUCING WHILE LOOPS\u00b6","text":"<p>The for loop takes a collection of items and executes a block of code once for each item in the collection. In contrast, the while loop runs as long as, or while, a certain condition is true.</p>"},{"location":"python/07_user_input_while_loops/#the-while-loop-in-action","title":"The while Loop in Action\u00b6","text":"<p>You can use a while loop to count up through a series of numbers. For example, the following while loop counts from 1 to 5:</p>"},{"location":"python/07_user_input_while_loops/#letting-the-user-choose-when-to-quit","title":"Letting the User Choose When to Quit\u00b6","text":"<p>We can make the parrot.py program run as long as the user wants by putting most of the program inside a while loop. We\u2019ll define a quit value and then keep the program running as long as the user has not entered the quit value:</p>"},{"location":"python/07_user_input_while_loops/#using-a-flag","title":"Using a Flag\u00b6","text":"<p>In the previous example, we had the program perform certain tasks while a given condition was true. But what about more complicated programs in which many different events could cause the program to stop running?</p> <p>For example, in a game, several different events can end the game. When the player runs out of ships, their time runs out, or the cities they were supposed to protect are all destroyed, the game should end. It needs to end if any one of these events happens. If many possible events might occur to stop the program, trying to test all these conditions in one while statement becomes complicated and difficult.</p> <p>For a program that should run only as long as many conditions are true, you can define one variable that determines whether or not the entire program is active. This variable, called a flag, acts as a signal to the program. We can write our programs so they run while the flag is set to True and stop running when any of several events sets the value of the flag to False. As a result, our overall while statement needs to check only one condition: whether or not the flag is currently True. Then, all our other tests (to see if an event has occurred that should set the flag to False) can be neatly organized in the rest of the program.</p>"},{"location":"python/07_user_input_while_loops/#using-break-to-exit-a-loop","title":"Using break to Exit a Loop\u00b6","text":"<p>To exit a while loop immediately without running any remaining code in the loop, regardless of the results of any conditional test, use the break statement. The break statement directs the flow of your program; you can use it to control which lines of code are executed and which aren\u2019t, so the program only executes code that you want it to, when you want it to.</p> <p>For example, consider a program that asks the user about places they\u2019ve visited. We can stop the while loop in this program by calling break as soon as the user enters the 'quit' value:</p>"},{"location":"python/07_user_input_while_loops/#using-continue-in-a-loop","title":"Using continue in a Loop\u00b6","text":"<p>Rather than breaking out of a loop entirely without executing the rest of its code, you can use the continue statement to return to the beginning of the loop based on the result of a conditional test. For example, consider a loop that counts from 1 to 10 but prints only the odd numbers in that range:</p>"},{"location":"python/07_user_input_while_loops/#avoiding-infinite-loops","title":"Avoiding Infinite Loops\u00b6","text":"<p>Every while loop needs a way to stop running so it won\u2019t continue to run forever. For example, this counting loop should count from 1 to 5:</p>"},{"location":"python/07_user_input_while_loops/#using-a-while-loop-with-lists-and-dictionaries","title":"USING A WHILE LOOP WITH LISTS AND DICTIONARIES  \u00b6","text":"<p>So far, we\u2019ve worked with only one piece of user information at a time. We received the user\u2019s input and then printed the input or a response to it. The next time through the while loop, we\u2019d receive another input value and respond to that. But to keep track of many users and pieces of information, we\u2019ll need to use lists and dictionaries with our while loops.</p> <p>A for loop is effective for looping through a list, but you shouldn\u2019t modify a list inside a for loop because Python will have trouble keeping track of the items in the list. To modify a list as you work through it, use a while loop. Using while loops with lists and dictionaries allows you to collect, store, and organize lots of input to examine and report on later.</p>"},{"location":"python/07_user_input_while_loops/#moving-items-from-one-list-to-another","title":"Moving Items from One List to Another\u00b6","text":"<p>Consider a list of newly registered but unverified users of a website. After we verify these users, how can we move them to a separate list of confirmed users? One way would be to use a while loop to pull users from the list of unconfirmed users as we verify them and then add them to a separate list of confirmed users. Here\u2019s what that code might look like:</p>"},{"location":"python/07_user_input_while_loops/#removing-all-instances-of-specific-values-from-a-list","title":"Removing All Instances of Specific Values from a List\u00b6","text":"<p>In Chapter 3 we used remove() to remove a specific value from a list. The remove() function worked because the value we were interested in appeared only once in the list. But what if you want to remove all instances of a value from a list?</p> <p>Say you have a list of pets with the value 'cat' repeated several times. To remove all instances of that value, you can run a while loop until 'cat' is no longer in the list, as shown here:</p>"},{"location":"python/07_user_input_while_loops/#filling-a-dictionary-with-user-input","title":"Filling a Dictionary with User Input\u00b6","text":"<p>You can prompt for as much input as you need in each pass through a while loop. Let\u2019s make a polling program in which each pass through the loop prompts for the participant\u2019s name and response. We\u2019ll store the data we gather in a dictionary, because we want to connect each response with a particular user:</p>"},{"location":"python/07_user_input_while_loops/#summary","title":"SUMMARY\u00b6","text":"<p>In this chapter you learned how to use input() to allow users to provide their own information in your programs. You learned to work with both text and numerical input and how to use while loops to make your programs run as long as your users want them to. You saw several ways to control the flow of a while loop by setting an active flag, using the break statement, and using the continue statement. You learned how to use a while loop to move items from one list to another and how to remove all instances of a value from a list. You also learned how while loops can be used with dictionaries.</p>"},{"location":"python/08_functions/","title":"Functions","text":"In\u00a0[1]: Copied! <pre>def greet_user():\n\"\"\"Display a simple greeting.\"\"\"\n    print(\"Hello!\")\n\ngreet_user()\n</pre> def greet_user():     \"\"\"Display a simple greeting.\"\"\"     print(\"Hello!\")  greet_user() <pre>Hello!\n</pre> In\u00a0[2]: Copied! <pre>def greet_user(username):\n\"\"\"Display a simple greeting.\"\"\"\n    print(f\"Hello, {username.title()}!\")\n\ngreet_user('jesse')\n</pre> def greet_user(username):     \"\"\"Display a simple greeting.\"\"\"     print(f\"Hello, {username.title()}!\")  greet_user('jesse') <pre>Hello, Jesse!\n</pre> In\u00a0[3]: Copied! <pre>def describe_pet(animal_type, pet_name):\n\"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet('hamster', 'harry')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet('hamster', 'harry') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n</pre> In\u00a0[4]: Copied! <pre>def describe_pet(animal_type, pet_name):\n\"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet('hamster', 'harry')\ndescribe_pet('dog', 'willie')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet('hamster', 'harry') describe_pet('dog', 'willie') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a dog.\nMy dog's name is Willie.\n</pre> <p>Calling a function multiple times is a very efficient way to work. The code describing a pet is written once in the function. Then, anytime you want to describe a new pet, you call the function with the new pet\u2019s information. Even if the code for describing a pet were to expand to ten lines, you could still describe a new pet in just one line by calling the function again.</p> <p>You can use as many positional arguments as you need in your functions. Python works through the arguments you provide when calling the function and matches each one with the corresponding parameter in the function\u2019s definition.</p> In\u00a0[5]: Copied! <pre>def describe_pet(animal_type, pet_name):\n\"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet('harry', 'hamster')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet('harry', 'hamster') <pre>\nI have a harry.\nMy harry's name is Hamster.\n</pre> <p>In this function call we list the name first and the type of animal second. Because the argument 'harry' is listed first this time, that value is assigned to the parameter animal_type. Likewise, 'hamster' is assigned to pet_name. Now we have a \u201charry\u201d named \u201cHamster\u201d.</p> <p>If you get funny results like this, check to make sure the order of the arguments in your function call matches the order of the parameters in the function\u2019s definition.</p> In\u00a0[6]: Copied! <pre>def describe_pet(animal_type, pet_name):\n\"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet(animal_type='hamster', pet_name='harry')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet(animal_type='hamster', pet_name='harry') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n</pre> <p>The function describe_pet() hasn\u2019t changed. But when we call the function, we explicitly tell Python which parameter each argument should be matched with. When Python reads the function call, it knows to assign the argument 'hamster' to the parameter animal_type and the argument 'harry' to pet_name. The output correctly shows that we have a hamster named Harry.</p> <p>The order of keyword arguments doesn\u2019t matter because Python knows where each value should go. The following two function calls are equivalent:</p> In\u00a0[7]: Copied! <pre>describe_pet(animal_type='hamster', pet_name='harry')\ndescribe_pet(pet_name='harry', animal_type='hamster')\n</pre> describe_pet(animal_type='hamster', pet_name='harry') describe_pet(pet_name='harry', animal_type='hamster') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a hamster.\nMy hamster's name is Harry.\n</pre> In\u00a0[8]: Copied! <pre>def describe_pet(pet_name, animal_type='dog'):\n\"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet(pet_name='willie')\n</pre> def describe_pet(pet_name, animal_type='dog'):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet(pet_name='willie') <pre>\nI have a dog.\nMy dog's name is Willie.\n</pre> <p>We changed the definition of describe_pet() to include a default value, 'dog', for animal_type. Now when the function is called with no animal_type specified, Python knows to use the value 'dog' for this parameter.</p> <p>Note that the order of the parameters in the function definition had to be changed. Because the default value makes it unnecessary to specify a type of animal as an argument, the only argument left in the function call is the pet\u2019s name. Python still interprets this as a positional argument, so if the function is called with just a pet\u2019s name, that argument will match up with the first parameter listed in the function\u2019s definition. This is the reason the first parameter needs to be pet_name.</p> <p>To describe an animal other than a dog, you could use a function call like this:</p> In\u00a0[9]: Copied! <pre>describe_pet(pet_name='harry', animal_type='hamster')\n</pre> describe_pet(pet_name='harry', animal_type='hamster') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n</pre> <p>Because an explicit argument for animal_type is provided, Python will ignore the parameter\u2019s default value.</p> In\u00a0[10]: Copied! <pre># A dog named Willie.\ndescribe_pet('willie')\ndescribe_pet(pet_name='willie')\n\n# A hamster named Harry.\ndescribe_pet('harry', 'hamster')\ndescribe_pet(pet_name='harry', animal_type='hamster')\ndescribe_pet(animal_type='hamster', pet_name='harry')\n</pre> # A dog named Willie. describe_pet('willie') describe_pet(pet_name='willie')  # A hamster named Harry. describe_pet('harry', 'hamster') describe_pet(pet_name='harry', animal_type='hamster') describe_pet(animal_type='hamster', pet_name='harry') <pre>\nI have a dog.\nMy dog's name is Willie.\n\nI have a dog.\nMy dog's name is Willie.\n\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a hamster.\nMy hamster's name is Harry.\n</pre> In\u00a0[11]: Copied! <pre>def describe_pet(animal_type, pet_name):\n\"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\n# describe_pet()\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  # describe_pet() In\u00a0[12]: Copied! <pre>def get_formatted_name(first_name, last_name):\n\"\"\"Return a full name, neatly formatted.\"\"\"\n    full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\n</pre> def get_formatted_name(first_name, last_name):     \"\"\"Return a full name, neatly formatted.\"\"\"     full_name = f\"{first_name} {last_name}\"     return full_name.title()  musician = get_formatted_name('jimi', 'hendrix') print(musician) <pre>Jimi Hendrix\n</pre> In\u00a0[13]: Copied! <pre>def get_formatted_name(first_name, middle_name, last_name):\n\"\"\"Return a full name, neatly formatted.\"\"\"\n    full_name = f\"{first_name} {middle_name} {last_name}\"\n    return full_name.title()\n\nmusician = get_formatted_name('john', 'lee', 'hooker')\nprint(musician)\n</pre> def get_formatted_name(first_name, middle_name, last_name):     \"\"\"Return a full name, neatly formatted.\"\"\"     full_name = f\"{first_name} {middle_name} {last_name}\"     return full_name.title()  musician = get_formatted_name('john', 'lee', 'hooker') print(musician) <pre>John Lee Hooker\n</pre> <p>This function works when given a first, middle, and last name. The function takes in all three parts of a name and then builds a string out of them. The function adds spaces where appropriate and converts the full name to title case.</p> <p>But middle names aren\u2019t always needed, and this function as written would not work if you tried to call it with only a first name and a last name. To make the middle name optional, we can give the middle_name argument an empty default value and ignore the argument unless the user provides a value. To make get_formatted_name() work without a middle name, we set the default value of middle_name to an empty string and move it to the end of the list of parameters:</p> In\u00a0[14]: Copied! <pre>def get_formatted_name(first_name, last_name, middle_name=''):\n\"\"\"Return a full name, neatly formatted.\"\"\"\n    if middle_name:\n        full_name = f\"{first_name} {middle_name} {last_name}\"\n    else:\n        full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\n\nmusician = get_formatted_name('john', 'hooker', 'lee')\nprint(musician)\n</pre> def get_formatted_name(first_name, last_name, middle_name=''):     \"\"\"Return a full name, neatly formatted.\"\"\"     if middle_name:         full_name = f\"{first_name} {middle_name} {last_name}\"     else:         full_name = f\"{first_name} {last_name}\"     return full_name.title()  musician = get_formatted_name('jimi', 'hendrix') print(musician)  musician = get_formatted_name('john', 'hooker', 'lee') print(musician) <pre>Jimi Hendrix\nJohn Lee Hooker\n</pre> In\u00a0[15]: Copied! <pre>def build_person(first_name, last_name):\n\"\"\"Return a dictionary of information about a person.\"\"\"\n    person = {'first': first_name, 'last': last_name}\n    return person\n\nmusician = build_person('jimi', 'hendrix')\nprint(musician)\n</pre> def build_person(first_name, last_name):     \"\"\"Return a dictionary of information about a person.\"\"\"     person = {'first': first_name, 'last': last_name}     return person  musician = build_person('jimi', 'hendrix') print(musician) <pre>{'first': 'jimi', 'last': 'hendrix'}\n</pre> <p>This function takes in simple textual information and puts it into a more meaningful data structure that lets you work with the information beyond just printing it. The strings 'jimi' and 'hendrix' are now labeled as a first name and last name. You can easily extend this function to accept optional values like a middle name, an age, an occupation, or any other information you want to store about a person. For example, the following change allows you to store a person\u2019s age as well:</p> In\u00a0[16]: Copied! <pre>def build_person(first_name, last_name, age=None):\n\"\"\"Return a dictionary of information about a person.\"\"\"\n    person = {'first': first_name, 'last': last_name}\n    if age:\n        person['age'] = age\n    return person\n\nmusician = build_person('jimi', 'hendrix', age=27)\nprint(musician)\n</pre> def build_person(first_name, last_name, age=None):     \"\"\"Return a dictionary of information about a person.\"\"\"     person = {'first': first_name, 'last': last_name}     if age:         person['age'] = age     return person  musician = build_person('jimi', 'hendrix', age=27) print(musician) <pre>{'first': 'jimi', 'last': 'hendrix', 'age': 27}\n</pre> <p>We add a new optional parameter age to the function definition and assign the parameter the special value None, which is used when a variable has no specific value assigned to it. You can think of None as a placeholder value. In conditional tests, None evaluates to False. If the function call includes a value for age, that value is stored in the dictionary. This function always stores a person\u2019s name, but it can also be modified to store any other information you want about a person.</p> In\u00a0[17]: Copied! <pre>def get_formatted_name(first_name, last_name):\n\"\"\"Return a full name, neatly formatted.\"\"\"\n    full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n\n# # This is an infinite loop!\n# while True:\n#     print(\"\\nPlease tell me your name:\")\n#     print(\"(enter 'q' at any time to quit)\")\n\n#     f_name = input(\"First name: \")\n#     if f_name == 'q':\n#         break\n\n#     l_name = input(\"Last name: \")\n#     if l_name == 'q':\n#         break\n\n#     formatted_name = get_formatted_name(f_name, l_name)\n#     print(f\"\\nHello, {formatted_name}!\")\n</pre> def get_formatted_name(first_name, last_name):     \"\"\"Return a full name, neatly formatted.\"\"\"     full_name = f\"{first_name} {last_name}\"     return full_name.title()  # # This is an infinite loop! # while True: #     print(\"\\nPlease tell me your name:\") #     print(\"(enter 'q' at any time to quit)\")  #     f_name = input(\"First name: \") #     if f_name == 'q': #         break  #     l_name = input(\"Last name: \") #     if l_name == 'q': #         break  #     formatted_name = get_formatted_name(f_name, l_name) #     print(f\"\\nHello, {formatted_name}!\") In\u00a0[18]: Copied! <pre>def greet_users(names):\n\"\"\"Print a simple greeting to each user in the list.\"\"\"\n    for name in names:\n        msg = f\"Hello, {name.title()}!\"\n        print(msg)\n\nusernames = ['hannah', 'ty', 'margot']\ngreet_users(usernames)\n</pre> def greet_users(names):     \"\"\"Print a simple greeting to each user in the list.\"\"\"     for name in names:         msg = f\"Hello, {name.title()}!\"         print(msg)  usernames = ['hannah', 'ty', 'margot'] greet_users(usernames) <pre>Hello, Hannah!\nHello, Ty!\nHello, Margot!\n</pre> In\u00a0[19]: Copied! <pre># Start with some designs that need to be printed.\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = []\n\n# Simulate printing each design, until none are left.\n#\u00a0\u00a0Move each design to completed_models after printing.\nwhile unprinted_designs:\n    current_design = unprinted_designs.pop()\n    print(f\"Printing model: {current_design}\")\n    completed_models.append(current_design)\n\n# Display all completed models.\nprint(\"\\nThe following models have been printed:\")\nfor completed_model in completed_models:\n    print(completed_model)\n</pre> # Start with some designs that need to be printed. unprinted_designs = ['phone case', 'robot pendant', 'dodecahedron'] completed_models = []  # Simulate printing each design, until none are left. #\u00a0\u00a0Move each design to completed_models after printing. while unprinted_designs:     current_design = unprinted_designs.pop()     print(f\"Printing model: {current_design}\")     completed_models.append(current_design)  # Display all completed models. print(\"\\nThe following models have been printed:\") for completed_model in completed_models:     print(completed_model) <pre>Printing model: dodecahedron\nPrinting model: robot pendant\nPrinting model: phone case\n\nThe following models have been printed:\ndodecahedron\nrobot pendant\nphone case\n</pre> <p>This program starts with a list of designs that need to be printed and an empty list called completed_models that each design will be moved to after it has been printed. As long as designs remain in unprinted_designs, the while loop simulates printing each design by removing a design from the end of the list, storing it in current_design, and displaying a message that the current design is being printed. It then adds the design to the list of completed models. When the loop is finished running, a list of the designs that have been printed is displayed.</p> <p>We can reorganize this code by writing two functions, each of which does one specific job. Most of the code won\u2019t change; we\u2019re just making it more carefully structured. The first function will handle printing the designs, and the second will summarize the prints that have been made:</p> In\u00a0[20]: Copied! <pre>def print_models(unprinted_designs, completed_models):\n\"\"\"\n    Simulate printing each design, until none are left.\n    Move each design to completed_models after printing.\n    \"\"\"\n    while unprinted_designs:\n        current_design = unprinted_designs.pop()\n        print(f\"Printing model: {current_design}\")\n        completed_models.append(current_design)\n\ndef show_completed_models(completed_models):\n\"\"\"Show all the models that were printed.\"\"\"\n    print(\"\\nThe following models have been printed:\")\n    for completed_model in completed_models:\n        print(completed_model)\n\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = []\n\nprint_models(unprinted_designs, completed_models)\nshow_completed_models(completed_models)\n</pre> def print_models(unprinted_designs, completed_models):     \"\"\"     Simulate printing each design, until none are left.     Move each design to completed_models after printing.     \"\"\"     while unprinted_designs:         current_design = unprinted_designs.pop()         print(f\"Printing model: {current_design}\")         completed_models.append(current_design)  def show_completed_models(completed_models):     \"\"\"Show all the models that were printed.\"\"\"     print(\"\\nThe following models have been printed:\")     for completed_model in completed_models:         print(completed_model)  unprinted_designs = ['phone case', 'robot pendant', 'dodecahedron'] completed_models = []  print_models(unprinted_designs, completed_models) show_completed_models(completed_models) <pre>Printing model: dodecahedron\nPrinting model: robot pendant\nPrinting model: phone case\n\nThe following models have been printed:\ndodecahedron\nrobot pendant\nphone case\n</pre> <p>We set up a list of unprinted designs and an empty list that will hold the completed models. Then, because we\u2019ve already defined our two functions, all we have to do is call them and pass them the right arguments. We call print_models() and pass it the two lists it needs; as expected, print_models() simulates printing the designs. Then we call show_completed_models() and pass it the list of completed models so it can report the models that have been printed. The descriptive function names allow others to read this code and understand it, even without comments.</p> <p>This program is easier to extend and maintain than the version without functions. If we need to print more designs later on, we can simply call print_models() again. If we realize the printing code needs to be modified, we can change the code once, and our changes will take place everywhere the function is called. This technique is more efficient than having to update code separately in several places in the program.</p> <p>This example also demonstrates the idea that every function should have one specific job. The first function prints each design, and the second displays the completed models. This is more beneficial than using one function to do both jobs. If you\u2019re writing a function and notice the function is doing too many different tasks, try to split the code into two functions. Remember that you can always call a function from another function, which can be helpful when splitting a complex task into a series of steps.</p> In\u00a0[21]: Copied! <pre>def print_models(unprinted_designs, completed_models):\n\"\"\"\n    Simulate printing each design, until none are left.\n    Move each design to completed_models after printing.\n    \"\"\"\n    while unprinted_designs:\n        current_design = unprinted_designs.pop()\n        print(f\"Printing model: {current_design}\")\n        completed_models.append(current_design)\n\ndef show_completed_models(completed_models):\n\"\"\"Show all the models that were printed.\"\"\"\n    print(\"\\nThe following models have been printed:\")\n    for completed_model in completed_models:\n        print(completed_model)\n\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = []\n\nprint_models(unprinted_designs[:], completed_models)\n</pre> def print_models(unprinted_designs, completed_models):     \"\"\"     Simulate printing each design, until none are left.     Move each design to completed_models after printing.     \"\"\"     while unprinted_designs:         current_design = unprinted_designs.pop()         print(f\"Printing model: {current_design}\")         completed_models.append(current_design)  def show_completed_models(completed_models):     \"\"\"Show all the models that were printed.\"\"\"     print(\"\\nThe following models have been printed:\")     for completed_model in completed_models:         print(completed_model)  unprinted_designs = ['phone case', 'robot pendant', 'dodecahedron'] completed_models = []  print_models(unprinted_designs[:], completed_models) <pre>Printing model: dodecahedron\nPrinting model: robot pendant\nPrinting model: phone case\n</pre> <p>The function print_models() can do its work because it still receives the names of all unprinted designs. But this time it uses a copy of the original unprinted designs list, not the actual unprinted_designs list. The list completed_models will fill up with the names of printed models like it did before, but the original list of unprinted designs will be unaffected by the function.</p> <p>Even though you can preserve the contents of a list by passing a copy of it to your functions, you should pass the original list to functions unless you have a specific reason to pass a copy. It\u2019s more efficient for a function to work with an existing list to avoid using the time and memory needed to make a separate copy, especially when you\u2019re working with large lists.</p> In\u00a0[22]: Copied! <pre>def make_pizza(*toppings):\n\"\"\"Print the list of toppings that have been requested.\"\"\"\n    print(toppings)\n\nmake_pizza('pepperoni')\nmake_pizza('mushrooms', 'green peppers', 'extra cheese')\n</pre> def make_pizza(*toppings):     \"\"\"Print the list of toppings that have been requested.\"\"\"     print(toppings)  make_pizza('pepperoni') make_pizza('mushrooms', 'green peppers', 'extra cheese') <pre>('pepperoni',)\n('mushrooms', 'green peppers', 'extra cheese')\n</pre> <p>The asterisk in the parameter name <code>*toppings</code> tells Python to make an empty tuple called toppings and pack whatever values it receives into this tuple. The print() call in the function body produces output showing that Python can handle a function call with one value and a call with three values. It treats the different calls similarly. Note that Python packs the arguments into a tuple, even if the function receives only one value.</p> <p>Now we can replace the print() call with a loop that runs through the list of toppings and describes the pizza being ordered:</p> In\u00a0[23]: Copied! <pre>def make_pizza(*toppings):\n\"\"\"Summarize the pizza we are about to make.\"\"\"\n    print(\"\\nMaking a pizza with the following toppings:\")\n    for topping in toppings:\n        print(f\"- {topping}\")\n\nmake_pizza('pepperoni')\nmake_pizza('mushrooms', 'green peppers', 'extra cheese')\n</pre> def make_pizza(*toppings):     \"\"\"Summarize the pizza we are about to make.\"\"\"     print(\"\\nMaking a pizza with the following toppings:\")     for topping in toppings:         print(f\"- {topping}\")  make_pizza('pepperoni') make_pizza('mushrooms', 'green peppers', 'extra cheese') <pre>\nMaking a pizza with the following toppings:\n- pepperoni\n\nMaking a pizza with the following toppings:\n- mushrooms\n- green peppers\n- extra cheese\n</pre> In\u00a0[24]: Copied! <pre>def make_pizza(size, *toppings):\n\"\"\"Summarize the pizza we are about to make.\"\"\"\n    print(f\"\\nMaking a {size}-inch pizza with the following toppings:\")\n    for topping in toppings:\n        print(f\"- {topping}\")\n\nmake_pizza(16, 'pepperoni')\nmake_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')\n</pre> def make_pizza(size, *toppings):     \"\"\"Summarize the pizza we are about to make.\"\"\"     print(f\"\\nMaking a {size}-inch pizza with the following toppings:\")     for topping in toppings:         print(f\"- {topping}\")  make_pizza(16, 'pepperoni') make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese') <pre>\nMaking a 16-inch pizza with the following toppings:\n- pepperoni\n\nMaking a 12-inch pizza with the following toppings:\n- mushrooms\n- green peppers\n- extra cheese\n</pre> In\u00a0[25]: Copied! <pre>def build_profile(first, last, **user_info):\n\"\"\"Build a dictionary containing everything we know about a user.\"\"\"\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile('albert', 'einstein',\n                             location='princeton',\n                             field='physics')\nprint(user_profile)\n</pre> def build_profile(first, last, **user_info):     \"\"\"Build a dictionary containing everything we know about a user.\"\"\"     user_info['first_name'] = first     user_info['last_name'] = last     return user_info  user_profile = build_profile('albert', 'einstein',                              location='princeton',                              field='physics') print(user_profile) <pre>{'location': 'princeton', 'field': 'physics', 'first_name': 'albert', 'last_name': 'einstein'}\n</pre> <p>The definition of build_profile() expects a first and last name, and then it allows the user to pass in as many name-value pairs as they want. The double asterisks before the parameter <code>**user_info</code> cause Python to create an empty dictionary called user_info and pack whatever name-value pairs it receives into this dictionary. Within the function, you can access the key-value pairs in user_info just as you would for any dictionary.</p> <p>You can mix positional, keyword, and arbitrary values in many different ways when writing your own functions. It\u2019s useful to know that all these argument types exist because you\u2019ll see them often when you start reading other people\u2019s code. It takes practice to learn to use the different types correctly and to know when to use each type. For now, remember to use the simplest approach that gets the job done. As you progress you\u2019ll learn to use the most efficient approach each time.</p>"},{"location":"python/08_functions/#functions","title":"Functions\u00b6","text":"<p>In this lecture you\u2019ll learn to write functions, which are named blocks of code that are designed to do one specific job. When you want to perform a particular task that you\u2019ve defined in a function, you call the function responsible for it. If you need to perform that task multiple times throughout your program, you don\u2019t need to type all the code for the same task again and again; you just call the function dedicated to handling that task, and the call tells Python to run the code inside the function. You\u2019ll find that using functions makes your programs easier to write, read, test, and fix.</p> <p>In this lecture you\u2019ll also learn ways to pass information to functions. You\u2019ll learn how to write certain functions whose primary job is to display information and other functions designed to process data and return a value or set of values. Finally, you\u2019ll learn to store functions in separate files called modules to help organize your main program files.</p> <ul> <li>DEFINING A FUNCTION</li> <li>PASSING ARGUMENTS</li> <li>RETURN VALUES</li> <li>PASSING A LIST</li> <li>PASSING AN ARBITRARY NUMBER OF ARGUMENTS</li> <li>SUMMARY</li> </ul>"},{"location":"python/08_functions/#defining-a-function","title":"DEFINING A FUNCTION \u00b6","text":"<p>Here\u2019s a simple function named greet_user() that prints a greeting:</p> <pre><code>\u278a def greet_user():\n\u278b\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"Display a simple greeting.\"\"\"\n\u278c\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Hello!\")\n\n\u278d greet_user()\n</code></pre> <p>This example shows the simplest structure of a function. The line at \u278a uses the keyword def to inform Python that you\u2019re defining a function. This is the function definition, which tells Python the name of the function and, if applicable, what kind of information the function needs to do its job. The parentheses hold that information. In this case, the name of the function is greet_user(), and it needs no information to do its job, so its parentheses are empty. (Even so, the parentheses are required.) Finally, the definition ends in a colon.</p> <p>Any indented lines that follow def greet_user(): make up the body of the function. The text at \u278b is a comment called a docstring, which describes what the function does. Docstrings are enclosed in triple quotes, which Python looks for when it generates documentation for the functions in your programs.</p> <p>The line print(\"Hello!\") \u278c is the only line of actual code in the body of this function, so greet_user() has just one job: print(\"Hello!\").</p> <p>When you want to use this function, you call it. A function call tells Python to execute the code in the function. To call a function, you write the name of the function, followed by any necessary information in parentheses, as shown at \u278d. Because no information is needed here, calling our function is as simple as entering greet_user(). As expected, it prints Hello!:</p>"},{"location":"python/08_functions/#passing-information-to-a-function","title":"Passing Information to a Function\u00b6","text":"<p>Modified slightly, the function greet_user() can not only tell the user Hello! but also greet them by name. For the function to do this, you enter username in the parentheses of the function\u2019s definition at def greet_user(). By adding username here you allow the function to accept any value of username you specify. The function now expects you to provide a value for username each time you call it. When you call greet_user(), you can pass it a name, such as 'jesse', inside the parentheses:</p>"},{"location":"python/08_functions/#arguments-and-parameters","title":"Arguments and Parameters\u00b6","text":"<p>In the preceding greet_user() function, we defined greet_user() to require a value for the variable username. Once we called the function and gave it the information (a person\u2019s name), it printed the right greeting.</p> <p>The variable username in the definition of greet_user() is an example of a parameter, a piece of information the function needs to do its job. The value 'jesse' in greet_user('jesse') is an example of an argument. An argument is a piece of information that\u2019s passed from a function call to a function. When we call the function, we place the value we want the function to work with in parentheses. In this case the argument 'jesse' was passed to the function greet_user(), and the value was assigned to the parameter username.</p>"},{"location":"python/08_functions/#passing-arguments","title":"PASSING ARGUMENTS \u00b6","text":"<p>Because a function definition can have multiple parameters, a function call may need multiple arguments. You can pass arguments to your functions in a number of ways. You can use positional arguments, which need to be in the same order the parameters were written; keyword arguments, where each argument consists of a variable name and a value; and lists and dictionaries of values. Let\u2019s look at each of these in turn.</p>"},{"location":"python/08_functions/#positional-arguments","title":"Positional Arguments\u00b6","text":"<p>When you call a function, Python must match each argument in the function call with a parameter in the function definition. The simplest way to do this is based on the order of the arguments provided. Values matched up this way are called positional arguments.</p> <p>To see how this works, consider a function that displays information about pets. The function tells us what kind of animal each pet is and the pet\u2019s name, as shown here:</p>"},{"location":"python/08_functions/#multiple-function-calls","title":"Multiple Function Calls\u00b6","text":"<p>You can call a function as many times as needed. Describing a second, different pet requires just one more call to describe_pet():</p>"},{"location":"python/08_functions/#order-matters-in-positional-arguments","title":"Order Matters in Positional Arguments\u00b6","text":"<p>You can get unexpected results if you mix up the order of the arguments in a function call when using positional arguments:</p>"},{"location":"python/08_functions/#keyword-arguments","title":"Keyword Arguments\u00b6","text":"<p>A keyword argument is a name-value pair that you pass to a function. You directly associate the name and the value within the argument, so when you pass the argument to the function, there\u2019s no confusion (you won\u2019t end up with a harry named Hamster). Keyword arguments free you from having to worry about correctly ordering your arguments in the function call, and they clarify the role of each value in the function call.</p> <p>Let\u2019s rewrite pets.py using keyword arguments to call describe_pet():</p>"},{"location":"python/08_functions/#default-values","title":"Default Values\u00b6","text":"<p>When writing a function, you can define a default value for each parameter. If an argument for a parameter is provided in the function call, Python uses the argument value. If not, it uses the parameter\u2019s default value. So when you define a default value for a parameter, you can exclude the corresponding argument you\u2019d usually write in the function call. Using default values can simplify your function calls and clarify the ways in which your functions are typically used.</p> <p>For example, if you notice that most of the calls to describe_pet() are being used to describe dogs, you can set the default value of animal_type to 'dog'. Now anyone calling describe_pet() for a dog can omit that information:</p>"},{"location":"python/08_functions/#equivalent-function-calls","title":"Equivalent Function Calls\u00b6","text":"<p>Because positional arguments, keyword arguments, and default values can all be used together, often you\u2019ll have several equivalent ways to call a function. Consider the following definition for describe_pet() with one default value provided:</p> <pre><code>def describe_pet(pet_name, animal_type='dog'):\n</code></pre> <p>With this definition, an argument always needs to be provided for pet_name, and this value can be provided using the positional or keyword format. If the animal being described is not a dog, an argument for animal_type must be included in the call, and this argument can also be specified using the positional or keyword format.</p> <p>All of the following calls would work for this function:</p>"},{"location":"python/08_functions/#avoiding-argument-errors","title":"Avoiding Argument Errors\u00b6","text":"<p>When you start to use functions, don\u2019t be surprised if you encounter errors about unmatched arguments. Unmatched arguments occur when you provide fewer or more arguments than a function needs to do its work. For example, here\u2019s what happens if we try to call describe_pet() with no arguments:</p>"},{"location":"python/08_functions/#return-values","title":"RETURN VALUES \u00b6","text":"<p>A function doesn\u2019t always have to display its output directly. Instead, it can process some data and then return a value or set of values. The value the function returns is called a return value. The return statement takes a value from inside a function and sends it back to the line that called the function. Return values allow you to move much of your program\u2019s grunt work into functions, which can simplify the body of your program.</p>"},{"location":"python/08_functions/#returning-a-simple-value","title":"Returning a Simple Value\u00b6","text":"<p>Let\u2019s look at a function that takes a first and last name, and returns a neatly formatted full name:</p>"},{"location":"python/08_functions/#making-an-argument-optional","title":"Making an Argument Optional\u00b6","text":"<p>Sometimes it makes sense to make an argument optional so that people using the function can choose to provide extra information only if they want to. You can use default values to make an argument optional.</p> <p>For example, say we want to expand get_formatted_name() to handle middle names as well. A first attempt to include middle names might look like this:</p>"},{"location":"python/08_functions/#returning-a-dictionary","title":"Returning a Dictionary\u00b6","text":"<p>A function can return any kind of value you need it to, including more complicated data structures like lists and dictionaries. For example, the following function takes in parts of a name and returns a dictionary representing a person:</p>"},{"location":"python/08_functions/#using-a-function-with-a-while-loop","title":"Using a Function with a while Loop\u00b6","text":"<p>You can use functions with all the Python structures you\u2019ve learned about so far. For example, let\u2019s use the get_formatted_name() function with a while loop to greet users more formally. Here\u2019s a first attempt at greeting people using their first and last names:</p>"},{"location":"python/08_functions/#passing-a-list","title":"PASSING A LIST \u00b6","text":"<p>You\u2019ll often find it useful to pass a list to a function, whether it\u2019s a list of names, numbers, or more complex objects, such as dictionaries. When you pass a list to a function, the function gets direct access to the contents of the list. Let\u2019s use functions to make working with lists more efficient.</p> <p>Say we have a list of users and want to print a greeting to each. The following example sends a list of names to a function called greet_users(), which greets each person in the list individually:</p>"},{"location":"python/08_functions/#modifying-a-list-in-a-function","title":"Modifying a List in a Function\u00b6","text":"<p>When you pass a list to a function, the function can modify the list. Any changes made to the list inside the function\u2019s body are permanent, allowing you to work efficiently even when you\u2019re dealing with large amounts of data.</p> <p>Consider a company that creates 3D printed models of designs that users submit. Designs that need to be printed are stored in a list, and after being printed they\u2019re moved to a separate list. The following code does this without using functions:</p>"},{"location":"python/08_functions/#preventing-a-function-from-modifying-a-list","title":"Preventing a Function from Modifying a List\u00b6","text":"<p>Sometimes you\u2019ll want to prevent a function from modifying a list. For example, say that you start with a list of unprinted designs and write a function to move them to a list of completed models, as in the previous example. You may decide that even though you\u2019ve printed all the designs, you want to keep the original list of unprinted designs for your records. But because you moved all the design names out of unprinted_designs, the list is now empty, and the empty list is the only version you have; the original is gone. In this case, you can address this issue by passing the function a copy of the list, not the original. Any changes the function makes to the list will affect only the copy, leaving the original list intact.</p> <p>You can send a copy of a list to a function like this:</p> <pre><code>function_name(list_name[:])\n</code></pre> <p>The slice notation [:] makes a copy of the list to send to the function.</p>"},{"location":"python/08_functions/#passing-an-arbitrary-number-of-arguments","title":"PASSING AN ARBITRARY NUMBER OF ARGUMENTS \u00b6","text":"<p>Sometimes you won\u2019t know ahead of time how many arguments a function needs to accept. Fortunately, Python allows a function to collect an arbitrary number of arguments from the calling statement.</p> <p>For example, consider a function that builds a pizza. It needs to accept a number of toppings, but you can\u2019t know ahead of time how many toppings a person will want. The function in the following example has one parameter, *toppings, but this parameter collects as many arguments as the calling line provides:</p>"},{"location":"python/08_functions/#mixing-positional-and-arbitrary-arguments","title":"Mixing Positional and Arbitrary Arguments\u00b6","text":"<p>If you want a function to accept several different kinds of arguments, the parameter that accepts an arbitrary number of arguments must be placed last in the function definition. Python matches positional and keyword arguments first and then collects any remaining arguments in the final parameter.</p> <p>For example, if the function needs to take in a size for the pizza, that parameter must come before the parameter <code>*toppings</code>:</p>"},{"location":"python/08_functions/#using-arbitrary-keyword-arguments","title":"Using Arbitrary Keyword Arguments\u00b6","text":"<p>Sometimes you\u2019ll want to accept an arbitrary number of arguments, but you won\u2019t know ahead of time what kind of information will be passed to the function. In this case, you can write functions that accept as many key-value pairs as the calling statement provides. One example involves building user profiles: you know you\u2019ll get information about a user, but you\u2019re not sure what kind of information you\u2019ll receive. The function build_profile() in the following example always takes in a first and last name, but it accepts an arbitrary number of keyword arguments as well:</p>"},{"location":"python/08_functions/#summary","title":"SUMMARY \u00b6","text":"<p>In this chapter you learned how to write functions and to pass arguments so that your functions have access to the information they need to do their work. You learned how to use positional and keyword arguments, and how to accept an arbitrary number of arguments. You saw functions that display output and functions that return values. You learned how to use functions with lists, dictionaries, if statements, and while loops.</p> <p>One of your goals as a programmer should be to write simple code that does what you want it to, and functions help you do this. They allow you to write blocks of code and leave them alone once you know they work. When you know a function does its job correctly, you can trust that it will continue to work and move on to your next coding task.</p> <p>Functions allow you to write code once and then reuse that code as many times as you want. When you need to run the code in a function, all you need to do is write a one-line call and the function does its job. When you need to modify a function\u2019s behavior, you only have to modify one block of code, and your change takes effect everywhere you\u2019ve made a call to that function.</p> <p>Using functions makes your programs easier to read, and good function names summarize what each part of a program does. Reading a series of function calls gives you a much quicker sense of what a program does than reading a long series of code blocks.</p> <p>Functions also make your code easier to test and debug. When the bulk of your program\u2019s work is done by a set of functions, each of which has a specific job, it\u2019s much easier to test and maintain the code you\u2019ve written. You can write a separate program that calls each function and tests whether each function works in all the situations it may encounter. When you do this, you can be confident that your functions will work properly each time you call them.</p>"},{"location":"python/09_classes/","title":"Classes","text":"In\u00a0[1]: Copied! <pre>class Dog:\n\"\"\"A simple attempt to model a dog.\"\"\"\n\n    def __init__(self, name, age):\n\"\"\"Initialize name and age attributes.\"\"\"\n        self.name = name\n        self.age = age\n\n    def sit(self):\n\"\"\"Simulate a dog sitting in response to a command.\"\"\"\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n\"\"\"Simulate rolling over in response to a command.\"\"\"\n        print(f\"{self.name} rolled over!\")\n</pre> class Dog:     \"\"\"A simple attempt to model a dog.\"\"\"      def __init__(self, name, age):         \"\"\"Initialize name and age attributes.\"\"\"         self.name = name         self.age = age      def sit(self):         \"\"\"Simulate a dog sitting in response to a command.\"\"\"         print(f\"{self.name} is now sitting.\")      def roll_over(self):         \"\"\"Simulate rolling over in response to a command.\"\"\"         print(f\"{self.name} rolled over!\") <p>There\u2019s a lot to notice here, but don\u2019t worry. You\u2019ll see this structure throughout this chapter and have lots of time to get used to it. At \u278a we define a class called Dog. By convention, capitalized names refer to classes in Python. There are no parentheses in the class definition because we\u2019re creating this class from scratch. At \u278b we write a docstring describing what this class does.</p> In\u00a0[2]: Copied! <pre>my_dog = Dog('Willie', 6)\nprint(f\"My dog's name is {my_dog.name}.\")\nprint(f\"My dog is {my_dog.age} years old.\")\n</pre> my_dog = Dog('Willie', 6) print(f\"My dog's name is {my_dog.name}.\") print(f\"My dog is {my_dog.age} years old.\") <pre>My dog's name is Willie.\nMy dog is 6 years old.\n</pre> <p>The Dog class we\u2019re using here is the one we just wrote in the previous example. At \u278a we tell Python to create a dog whose name is 'Willie' and whose age is 6. When Python reads this line, it calls the <code>__init__()</code> method in Dog with the arguments 'Willie' and 6. The <code>__init__()</code> method creates an instance representing this particular dog and sets the name and age attributes using the values we provided. Python then returns an instance representing this dog. We assign that instance to the variable my_dog. The naming convention is helpful here: we can usually assume that a capitalized name like Dog refers to a class, and a lowercase name like my_dog refers to a single instance created from a class.</p> In\u00a0[3]: Copied! <pre>my_dog = Dog('Willie', 6)\nmy_dog.sit()\nmy_dog.roll_over()\n</pre> my_dog = Dog('Willie', 6) my_dog.sit() my_dog.roll_over() <pre>Willie is now sitting.\nWillie rolled over!\n</pre> <p>To call a method, give the name of the instance (in this case, my_dog) and the method you want to call, separated by a dot. When Python reads my_dog.sit(), it looks for the method sit() in the class Dog and runs that code. Python interprets the line my_dog.roll_over() in the same way.</p> <p>This syntax is quite useful. When attributes and methods have been given appropriately descriptive names like name, age, sit(), and roll_over(), we can easily infer what a block of code, even one we\u2019ve never seen before, is supposed to do.</p> In\u00a0[4]: Copied! <pre>my_dog = Dog('Willie', 6)\nyour_dog = Dog('Lucy', 3)\n\nprint(f\"My dog's name is {my_dog.name}.\")\nprint(f\"My dog is {my_dog.age} years old.\")\nmy_dog.sit()\n\nprint(f\"\\nYour dog's name is {your_dog.name}.\")\nprint(f\"Your dog is {your_dog.age} years old.\")\nyour_dog.sit()\n</pre> my_dog = Dog('Willie', 6) your_dog = Dog('Lucy', 3)  print(f\"My dog's name is {my_dog.name}.\") print(f\"My dog is {my_dog.age} years old.\") my_dog.sit()  print(f\"\\nYour dog's name is {your_dog.name}.\") print(f\"Your dog is {your_dog.age} years old.\") your_dog.sit() <pre>My dog's name is Willie.\nMy dog is 6 years old.\nWillie is now sitting.\n\nYour dog's name is Lucy.\nYour dog is 3 years old.\nLucy is now sitting.\n</pre> <p>In this example we create a dog named Willie and a dog named Lucy. Each dog is a separate instance with its own set of attributes, capable of the same set of actions.</p> <p>Even if we used the same name and age for the second dog, Python would still create a separate instance from the Dog class. You can make as many instances from one class as you need, as long as you give each instance a unique variable name or it occupies a unique spot in a list or dictionary.</p> In\u00a0[5]: Copied! <pre>class Car:\n\"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n\"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_descriptive_name(self):\n\"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name()) <pre>2019 Audi A4\n</pre> In\u00a0[6]: Copied! <pre>class Car:\n\"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n\"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n\"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n\"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\nmy_new_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name()) my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 0 miles on it.\n</pre> In\u00a0[7]: Copied! <pre>my_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\nmy_new_car.odometer_reading = 23\nmy_new_car.read_odometer()\n</pre> my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name()) my_new_car.odometer_reading = 23 my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 23 miles on it.\n</pre> In\u00a0[8]: Copied! <pre>class Car:\n\"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n\"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n\"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n\"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\n    def update_odometer(self, mileage):\n\"\"\"\n        Set the odometer reading to the given value.\n        Reject the change if it attempts to roll the odometer back.\n        \"\"\"\n        self.odometer_reading = mileage\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.update_odometer(23)\nmy_new_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")      def update_odometer(self, mileage):         \"\"\"         Set the odometer reading to the given value.         Reject the change if it attempts to roll the odometer back.         \"\"\"         self.odometer_reading = mileage  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name())  my_new_car.update_odometer(23) my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 23 miles on it.\n</pre> <p>We can extend the method update_odometer() to do additional work every time the odometer reading is modified. Let\u2019s add a little logic to make sure no one tries to roll back the odometer reading:</p> In\u00a0[9]: Copied! <pre>class Car:\n\"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n\"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n\"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n\"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\n    def update_odometer(self, mileage):\n\"\"\"\n        Set the odometer reading to the given value.\n        Reject the change if it attempts to roll the odometer back.\n        \"\"\"\n        if mileage &gt;= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"You can't roll back an odometer!\")\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.update_odometer(23)\nmy_new_car.read_odometer()\n\nmy_new_car.update_odometer(10)\nmy_new_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")      def update_odometer(self, mileage):         \"\"\"         Set the odometer reading to the given value.         Reject the change if it attempts to roll the odometer back.         \"\"\"         if mileage &gt;= self.odometer_reading:             self.odometer_reading = mileage         else:             print(\"You can't roll back an odometer!\")  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name())  my_new_car.update_odometer(23) my_new_car.read_odometer()  my_new_car.update_odometer(10) my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 23 miles on it.\nYou can't roll back an odometer!\nThis car has 23 miles on it.\n</pre> In\u00a0[10]: Copied! <pre>class Car:\n\"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n\"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n\"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n\"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\n    def update_odometer(self, mileage):\n\"\"\"\n        Set the odometer reading to the given value.\n        Reject the change if it attempts to roll the odometer back.\n        \"\"\"\n        if mileage &gt;= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"You can't roll back an odometer!\")\n\n    def increment_odometer(self, miles):\n\"\"\"Add the given amount to the odometer reading.\"\"\"\n        self.odometer_reading += miles\n\nmy_used_car = Car('subaru', 'outback', 2015)\nprint(my_used_car.get_descriptive_name())\n\nmy_used_car.update_odometer(23_500)\nmy_used_car.read_odometer()\n\nmy_used_car.increment_odometer(100)\nmy_used_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")      def update_odometer(self, mileage):         \"\"\"         Set the odometer reading to the given value.         Reject the change if it attempts to roll the odometer back.         \"\"\"         if mileage &gt;= self.odometer_reading:             self.odometer_reading = mileage         else:             print(\"You can't roll back an odometer!\")      def increment_odometer(self, miles):         \"\"\"Add the given amount to the odometer reading.\"\"\"         self.odometer_reading += miles  my_used_car = Car('subaru', 'outback', 2015) print(my_used_car.get_descriptive_name())  my_used_car.update_odometer(23_500) my_used_car.read_odometer()  my_used_car.increment_odometer(100) my_used_car.read_odometer() <pre>2015 Subaru Outback\nThis car has 23500 miles on it.\nThis car has 23600 miles on it.\n</pre> In\u00a0[11]: Copied! <pre>from random import randint\nrandint(1, 6)\n</pre> from random import randint randint(1, 6) Out[11]: <pre>2</pre> <p>Another useful function is choice(). This function takes in a list or tuple and returns a randomly chosen element:</p> In\u00a0[12]: Copied! <pre>from random import choice\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\nfirst_up = choice(players)\nfirst_up\n</pre> from random import choice players = ['charles', 'martina', 'michael', 'florence', 'eli'] first_up = choice(players) first_up Out[12]: <pre>'florence'</pre>"},{"location":"python/09_classes/#classes","title":"Classes\u00b6","text":"<p>Object-oriented programming is one of the most effective approaches to writing software. In object-oriented programming you write classes that represent real-world things and situations, and you create objects based on these classes. When you write a class, you define the general behavior that a whole category of objects can have. When you create individual objects from the class, each object is automatically equipped with the general behavior; you can then give each object whatever unique traits you desire. You\u2019ll be amazed how well real-world situations can be modeled with object-oriented programming.</p> <p>Making an object from a class is called instantiation, and you work with instances of a class. In this chapter you\u2019ll write classes and create instances of those classes. You\u2019ll specify the kind of information that can be stored in instances, and you\u2019ll define actions that can be taken with these instances. You\u2019ll also write classes that extend the functionality of existing classes, so similar classes can share code efficiently. You\u2019ll store your classes in modules and import classes written by other programmers into your own program files.</p> <p>Understanding object-oriented programming will help you see the world as a programmer does. It\u2019ll help you really know your code, not just what\u2019s happening line by line, but also the bigger concepts behind it. Knowing the logic behind classes will train you to think logically so you can write programs that effectively address almost any problem you encounter.</p> <p>Classes also make life easier for you and the other programmers you\u2019ll work with as you take on increasingly complex challenges. When you and other programmers write code based on the same kind of logic, you\u2019ll be able to understand each other\u2019s work. Your programs will make sense to many collaborators, allowing everyone to accomplish more.</p> <ul> <li>CREATING AND USING A CLASS</li> <li>WORKING WITH CLASSES AND INSTANCES</li> <li>THE PYTHON STANDARD LIBRARY</li> <li>STYLING CLASSES</li> <li>SUMMARY</li> </ul>"},{"location":"python/09_classes/#creating-and-using-a-class","title":"CREATING AND USING A CLASS \u00b6","text":"<p>You can model almost anything using classes. Let\u2019s start by writing a simple class, Dog, that represents a dog\u2014not one dog in particular, but any dog. What do we know about most pet dogs? Well, they all have a name and age. We also know that most dogs sit and roll over. Those two pieces of information (name and age) and those two behaviors (sit and roll over) will go in our Dog class because they\u2019re common to most dogs. This class will tell Python how to make an object representing a dog. After our class is written, we\u2019ll use it to make individual instances, each of which represents one specific dog.</p>"},{"location":"python/09_classes/#creating-the-dog-class","title":"Creating the Dog Class\u00b6","text":"<p>Each instance created from the Dog class will store a name and an age, and we\u2019ll give each dog the ability to sit() and roll_over():</p>"},{"location":"python/09_classes/#the-__init__-method","title":"The <code>__init__()</code> Method\u00b6","text":"<p>A function that\u2019s part of a class is a method. Everything you learned about functions applies to methods as well; the only practical difference for now is the way we\u2019ll call methods. The <code>__init__()</code> method at \u278c is a special method that Python runs automatically whenever we create a new instance based on the Dog class. This method has two leading underscores and two trailing underscores, a convention that helps prevent Python\u2019s default method names from conflicting with your method names. Make sure to use two underscores on each side of <code>__init__()</code>. If you use just one on each side, the method won\u2019t be called automatically when you use your class, which can result in errors that are difficult to identify.</p> <p>We define the <code>__init__()</code> method to have three parameters: self, name, and age. The self parameter is required in the method definition, and it must come first before the other parameters. It must be included in the definition because when Python calls this method later (to create an instance of Dog), the method call will automatically pass the self argument. Every method call associated with an instance automatically passes self, which is a reference to the instance itself; it gives the individual instance access to the attributes and methods in the class. When we make an instance of Dog, Python will call the <code>__init__()</code> method from the Dog class. We\u2019ll pass Dog() a name and an age as arguments; self is passed automatically, so we don\u2019t need to pass it. Whenever we want to make an instance from the Dog class, we\u2019ll provide values for only the last two parameters, name and age.</p> <p>The two variables defined at \u278d each have the prefix self. Any variable prefixed with self is available to every method in the class, and we\u2019ll also be able to access these variables through any instance created from the class. The line self.name = name takes the value associated with the parameter name and assigns it to the variable name, which is then attached to the instance being created. The same process happens with self.age = age. Variables that are accessible through instances like this are called attributes.</p> <p>The Dog class has two other methods defined: sit() and roll_over() \u278e. Because these methods don\u2019t need additional information to run, we just define them to have one parameter, self. The instances we create later will have access to these methods. In other words, they\u2019ll be able to sit and roll over. For now, sit() and roll_over() don\u2019t do much. They simply print a message saying the dog is sitting or rolling over. But the concept can be extended to realistic situations: if this class were part of an actual computer game, these methods would contain code to make an animated dog sit and roll over. If this class was written to control a robot, these methods would direct movements that cause a robotic dog to sit and roll over.</p>"},{"location":"python/09_classes/#making-an-instance-from-a-class","title":"Making an Instance from a Class\u00b6","text":"<p>Think of a class as a set of instructions for how to make an instance. The class Dog is a set of instructions that tells Python how to make individual instances representing specific dogs.</p> <p>Let\u2019s make an instance representing a specific dog:</p>"},{"location":"python/09_classes/#accessing-attributes","title":"Accessing Attributes\u00b6","text":"<p>To access the attributes of an instance, you use dot notation. At \u278b we access the value of my_dog\u2019s attribute name by writing:</p> <pre><code>my_dog.name\n</code></pre> <p>Dot notation is used often in Python. This syntax demonstrates how Python finds an attribute\u2019s value. Here Python looks at the instance my_dog and then finds the attribute name associated with my_dog. This is the same attribute referred to as self.name in the class Dog. At \u278c we use the same approach to work with the attribute age.</p>"},{"location":"python/09_classes/#calling-methods","title":"Calling Methods\u00b6","text":"<p>After we create an instance from the class Dog, we can use dot notation to call any method defined in Dog. Let\u2019s make our dog sit and roll over:</p>"},{"location":"python/09_classes/#creating-multiple-instances","title":"Creating Multiple Instances\u00b6","text":"<p>You can create as many instances from a class as you need. Let\u2019s create a second dog called your_dog:</p>"},{"location":"python/09_classes/#working-with-classes-and-instances","title":"WORKING WITH CLASSES AND INSTANCES \u00b6","text":"<p>You can use classes to represent many real-world situations. Once you write a class, you\u2019ll spend most of your time working with instances created from that class. One of the first tasks you\u2019ll want to do is modify the attributes associated with a particular instance. You can modify the attributes of an instance directly or write methods that update attributes in specific ways.</p>"},{"location":"python/09_classes/#the-car-class","title":"The Car Class\u00b6","text":"<p>Let\u2019s write a new class representing a car. Our class will store information about the kind of car we\u2019re working with, and it will have a method that summarizes this information:</p>"},{"location":"python/09_classes/#setting-a-default-value-for-an-attribute","title":"Setting a Default Value for an Attribute\u00b6","text":"<p>When an instance is created, attributes can be defined without being passed in as parameters. These attributes can be defined in the <code>__init__()</code> method, where they are assigned a default value.</p> <p>Let\u2019s add an attribute called odometer_reading that always starts with a value of 0. We\u2019ll also add a method read_odometer() that helps us read each car\u2019s odometer:</p>"},{"location":"python/09_classes/#modifying-attribute-values","title":"Modifying Attribute Values\u00b6","text":"<p>You can change an attribute\u2019s value in three ways: you can change the value directly through an instance, set the value through a method, or increment the value (add a certain amount to it) through a method. Let\u2019s look at each of these approaches.</p>"},{"location":"python/09_classes/#modifying-an-attributes-value-directly","title":"Modifying an Attribute\u2019s Value Directly\u00b6","text":"<p>The simplest way to modify the value of an attribute is to access the attribute directly through an instance. Here we set the odometer reading to 23 directly:</p>"},{"location":"python/09_classes/#modifying-an-attributes-value-through-a-method","title":"Modifying an Attribute\u2019s Value Through a Method\u00b6","text":"<p>It can be helpful to have methods that update certain attributes for you. Instead of accessing the attribute directly, you pass the new value to a method that handles the updating internally. Here\u2019s an example showing a method called update_odometer():</p>"},{"location":"python/09_classes/#incrementing-an-attributes-value-through-a-method","title":"Incrementing an Attribute\u2019s Value Through a Method\u00b6","text":"<p>Sometimes you\u2019ll want to increment an attribute\u2019s value by a certain amount rather than set an entirely new value. Say we buy a used car and put 100 miles on it between the time we buy it and the time we register it. Here\u2019s a method that allows us to pass this incremental amount and add that value to the odometer reading:</p>"},{"location":"python/09_classes/#the-python-standard-library","title":"THE PYTHON STANDARD LIBRARY \u00b6","text":"<p>The Python standard library is a set of modules included with every Python installation. Now that you have a basic understanding of how functions and classes work, you can start to use modules like these that other programmers have written. You can use any function or class in the standard library by including a simple import statement at the top of your file. Let\u2019s look at one module, random, which can be useful in modeling many real-world situations.</p> <p>One interesting function from the random module is randint(). This function takes two integer arguments and returns a randomly selected integer between (and including) those numbers.</p> <p>Here\u2019s how to generate a random number between 1 and 6:</p>"},{"location":"python/09_classes/#styling-classes","title":"STYLING CLASSES \u00b6","text":"<p>A few styling issues related to classes are worth clarifying, especially as your programs become more complicated.</p> <p>Class names should be written in CamelCase. To do this, capitalize the first letter of each word in the name, and don\u2019t use underscores. Instance and module names should be written in lowercase with underscores between words.</p> <p>Every class should have a docstring immediately following the class definition. The docstring should be a brief description of what the class does, and you should follow the same formatting conventions you used for writing docstrings in functions. Each module should also have a docstring describing what the classes in a module can be used for.</p> <p>You can use blank lines to organize code, but don\u2019t use them excessively. Within a class you can use one blank line between methods, and within a module you can use two blank lines to separate classes.</p> <p>If you need to import a module from the standard library and a module that you wrote, place the import statement for the standard library module first. Then add a blank line and the import statement for the module you wrote. In programs with multiple import statements, this convention makes it easier to see where the different modules used in the program come from.</p>"},{"location":"python/09_classes/#summary","title":"SUMMARY \u00b6","text":"<p>In this chapter you learned how to write your own classes. You learned how to store information in a class using attributes and how to write methods that give your classes the behavior they need. You learned to write <code>__init__()</code> methods that create instances from your classes with exactly the attributes you want. You saw how to modify the attributes of an instance directly and through methods. Y</p> <p>You saw how storing classes in modules and importing classes you need into the files where they\u2019ll be used can keep your projects organized. You started learning about the Python standard library, and you saw an example based on the random module. Finally, you learned to style your classes using Python conventions.</p>"},{"location":"python/10_files_and_exceptions/","title":"Files and Exceptions","text":"In\u00a0[1]: Copied! <pre>with open('data/pi_digits.txt') as file_object:\n    contents = file_object.read()\nprint(contents)\n</pre> with open('data/pi_digits.txt') as file_object:     contents = file_object.read() print(contents) <pre>3.1415926535 \n  8979323846 \n  2643383279\n\n</pre> <p>The first line of this program has a lot going on. Let\u2019s start by looking at the open() function. To do any work with a file, even just printing its contents, you first need to open the file to access it. The open() function needs one argument: the name of the file you want to open. Python looks for this file in the directory where the program that\u2019s currently being executed is stored. In this example, file_reader.py is currently running, so Python looks for pi_digits.txt in the directory where file_reader.py is stored. The open() function returns an object representing the file. Here, open('pi_digits.txt') returns an object representing pi_digits.txt. Python assigns this object to file_object, which we\u2019ll work with later in the program.</p> <p>The keyword with closes the file once access to it is no longer needed. Notice how we call open() in this program but not close(). You could open and close the file by calling open() and close(), but if a bug in your program prevents the close() method from being executed, the file may never close. This may seem trivial, but improperly closed files can cause data to be lost or corrupted. And if you call close() too early in your program, you\u2019ll find yourself trying to work with a closed file (a file you can\u2019t access), which leads to more errors. It\u2019s not always easy to know exactly when you should close a file, but with the structure shown here, Python will figure that out for you. All you have to do is open the file and work with it as desired, trusting that Python will close it automatically when the with block finishes execution.</p> <p>Once we have a file object representing pi_digits.txt, we use the read() method in the second line of our program to read the entire contents of the file and store it as one long string in contents. When we print the value of contents, we get the entire text file back.</p> <p>The only difference between this output and the original file is the extra blank line at the end of the output. The blank line appears because read() returns an empty string when it reaches the end of the file; this empty string shows up as a blank line. If you want to remove the extra blank line, you can use rstrip() in the call to print():</p> In\u00a0[2]: Copied! <pre>with open('data/pi_digits.txt') as file_object:\n    contents = file_object.read()\n    print(contents.rstrip())\n</pre> with open('data/pi_digits.txt') as file_object:     contents = file_object.read()     print(contents.rstrip()) <pre>3.1415926535 \n  8979323846 \n  2643383279\n</pre> In\u00a0[3]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line)\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     for line in file_object:         print(line) <pre>3.1415926535 \n\n  8979323846 \n\n  2643383279\n\n</pre> <pre><code>\u278a filename = 'pi_digits.txt'\n\n\u278b with open(filename) as file_object:\n\u278c\u00a0\u00a0\u00a0\u00a0\u00a0for line in file_object:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(line)\n</code></pre> <p>At \u278a we assign the name of the file we\u2019re reading from to the variable filename. This is a common convention when working with files. Because the variable filename doesn\u2019t represent the actual file\u2014it\u2019s just a string telling Python where to find the file\u2014you can easily swap out 'pi_digits.txt' for the name of another file you want to work with. After we call open(), an object representing the file and its contents is assigned to the variable file_object \u278b. We again use the with syntax to let Python open and close the file properly. To examine the file\u2019s contents, we work through each line in the file by looping over the file object \u278c.</p> <p>When we print each line, we find even more blank lines. These blank lines appear because an invisible newline character is at the end of each line in the text file. The print function adds its own newline each time we call it, so we end up with two newline characters at the end of each line: one from the file and one from print(). Using rstrip() on each line in the print() call eliminates these extra blank lines:</p> In\u00a0[4]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line.rstrip())\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     for line in file_object:         print(line.rstrip()) <pre>3.1415926535\n  8979323846\n  2643383279\n</pre> In\u00a0[5]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  for line in lines:     print(line.rstrip()) <pre>3.1415926535\n  8979323846\n  2643383279\n</pre> <pre><code>filename = 'data/pi_digits.txt'\n\n\u00a0\u00a0\u00a0with open(filename) as file_object:\n\u278a\u00a0\u00a0\u00a0\u00a0\u00a0lines = file_object.readlines()\n\n\u278b for line in lines:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(line.rstrip())\n</code></pre> <p>At \u278a the readlines() method takes each line from the file and stores it in a list. This list is then assigned to lines, which we can continue to work with after the with block ends. At \u278b we use a simple for loop to print each line from lines. Because each item in lines corresponds to each line in the file, the output matches the contents of the file exactly.</p> In\u00a0[6]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.rstrip()\n\nprint(pi_string)\nprint(len(pi_string))\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  pi_string = '' for line in lines:     pi_string += line.rstrip()  print(pi_string) print(len(pi_string)) <pre>3.1415926535  8979323846  2643383279\n36\n</pre> <p>The variable pi_string contains the whitespace that was on the left side of the digits in each line, but we can get rid of that by using strip() instead of rstrip():</p> In\u00a0[7]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\n\nprint(pi_string)\nprint(len(pi_string))\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  pi_string = '' for line in lines:     pi_string += line.strip()  print(pi_string) print(len(pi_string)) <pre>3.141592653589793238462643383279\n32\n</pre> <p>Note: When Python reads from a text file, it interprets all text in the file as a string. If you read in a number and want to work with that value in a numerical context, you\u2019ll have to convert it to an integer using the int() function or convert it to a float using the float() function.</p> In\u00a0[8]: Copied! <pre>filename = 'data/pi_million_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\n\nprint(f\"{pi_string[:52]}...\")\nprint(len(pi_string))\n</pre> filename = 'data/pi_million_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  pi_string = '' for line in lines:     pi_string += line.strip()  print(f\"{pi_string[:52]}...\") print(len(pi_string)) <pre>3.14159265358979323846264338327950288419716939937510...\n1000002\n</pre> <p>Python has no inherent limit to how much data you can work with; you can work with as much data as your system\u2019s memory can handle.</p> In\u00a0[9]: Copied! <pre>filename = 'data/pi_million_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\n\n# birthday = input(\"Enter your birthday, in the form mmddyy: \")\n# if birthday in pi_string:\n#     print(\"Your birthday appears in the first million digits of pi!\")\n# else:\n#     print(\"Your birthday does not appear in the first million digits of pi.\")\n</pre> filename = 'data/pi_million_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  pi_string = '' for line in lines:     pi_string += line.strip()  # birthday = input(\"Enter your birthday, in the form mmddyy: \") # if birthday in pi_string: #     print(\"Your birthday appears in the first million digits of pi!\") # else: #     print(\"Your birthday does not appear in the first million digits of pi.\") In\u00a0[10]: Copied! <pre>filename = 'data/programming.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\")\n</pre> filename = 'data/programming.txt'  with open(filename, 'w') as file_object:     file_object.write(\"I love programming.\") <pre><code>\u278a with open(filename, 'w') as file_object:\n\u278b\u00a0\u00a0\u00a0\u00a0\u00a0file_object.write(\"I love programming.\")\n</code></pre> <p>The call to open() in this example has two arguments \u278a. The first argument is still the name of the file we want to open. The second argument, 'w', tells Python that we want to open the file in write mode. You can open a file in read mode ('r'), write mode ('w'), append mode ('a'), or a mode that allows you to read and write to the file ('r+'). If you omit the mode argument, Python opens the file in read-only mode by default.</p> <p>The open() function automatically creates the file you\u2019re writing to if it doesn\u2019t already exist. However, be careful opening a file in write mode ('w') because if the file does exist, Python will erase the contents of the file before returning the file object.</p> <p>At \u278b we use the write() method on the file object to write a string to the file. This program has no terminal output, but if you open the file programming.txt, you\u2019ll see one line:</p> <p>NOTE: Python can only write strings to a text file. If you want to store numerical data in a text file, you\u2019ll have to convert the data to string format first using the str() function.</p> In\u00a0[11]: Copied! <pre>filename = 'data/programming.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\")\n    file_object.write(\"I love creating new games.\")\n</pre> filename = 'data/programming.txt'  with open(filename, 'w') as file_object:     file_object.write(\"I love programming.\")     file_object.write(\"I love creating new games.\") <p>If you open programming.txt, you\u2019ll see the two lines squished together:</p> <pre><code>I love programming.I love creating new games.\n</code></pre> <p>Including newlines in your calls to write() makes each string appear on its own line:</p> In\u00a0[12]: Copied! <pre>filename = 'data/programming.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\\n\")\n    file_object.write(\"I love creating new games.\\n\")\n</pre> filename = 'data/programming.txt'  with open(filename, 'w') as file_object:     file_object.write(\"I love programming.\\n\")     file_object.write(\"I love creating new games.\\n\") <p>The output now appears on separate lines:</p> <pre><code>I love programming.\nI love creating new games.\n</code></pre> <p>You can also use spaces, tab characters, and blank lines to format your output, just as you\u2019ve been doing with terminal-based output.</p> In\u00a0[13]: Copied! <pre>filename = 'data/programming.txt'\n\nwith open(filename, 'a') as file_object:\n    file_object.write(\"I also love finding meaning in large datasets.\\n\")\n    file_object.write(\"I love creating apps that can run in a browser.\\n\")\n</pre> filename = 'data/programming.txt'  with open(filename, 'a') as file_object:     file_object.write(\"I also love finding meaning in large datasets.\\n\")     file_object.write(\"I love creating apps that can run in a browser.\\n\") In\u00a0[14]: Copied! <pre>#print(5/0)\n</pre> #print(5/0) <p>The error reported at \u278a in the traceback, ZeroDivisionError, is an exception object. Python creates this kind of object in response to a situation where it can\u2019t do what we ask it to. When this happens, Python stops the program and tells us the kind of exception that was raised. We can use this information to modify our program. We\u2019ll tell Python what to do when this kind of exception occurs; that way, if it happens again, we\u2019re prepared.</p> In\u00a0[15]: Copied! <pre>try:\n    print(5/0)\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero!\")\n</pre> try:     print(5/0) except ZeroDivisionError:     print(\"You can't divide by zero!\") <pre>You can't divide by zero!\n</pre> <p>We put print(5/0), the line that caused the error, inside a try block. If the code in a try block works, Python skips over the except block. If the code in the try block causes an error, Python looks for an except block whose error matches the one that was raised and runs the code in that block.</p> <p>In this example, the code in the try block produces a ZeroDivisionError, so Python looks for an except block telling it how to respond. Python then runs the code in that block, and the user sees a friendly error message instead of a traceback:</p> <pre><code>You can't divide by zero!\n</code></pre> <p>If more code followed the try-except block, the program would continue running because we told Python how to handle the error. Let\u2019s look at an example where catching an error can allow a program to continue running.</p> In\u00a0[16]: Copied! <pre>print(\"Give me two numbers, and I'll divide them.\")\nprint(\"Enter 'q' to quit.\")\n\n# while True:\n#     first_number = input(\"\\nFirst number: \")\n#     if first_number == 'q':\n#         break\n#     second_number = input(\"Second number: \")\n#     if second_number == 'q':\n#         break\n#     try:\n#         answer = int(first_number) / int(second_number)\n#     except ZeroDivisionError:\n#         print(\"You can't divide by 0!\")\n#     else:\n#         print(answer)\n</pre> print(\"Give me two numbers, and I'll divide them.\") print(\"Enter 'q' to quit.\")  # while True: #     first_number = input(\"\\nFirst number: \") #     if first_number == 'q': #         break #     second_number = input(\"Second number: \") #     if second_number == 'q': #         break #     try: #         answer = int(first_number) / int(second_number) #     except ZeroDivisionError: #         print(\"You can't divide by 0!\") #     else: #         print(answer) <pre>Give me two numbers, and I'll divide them.\nEnter 'q' to quit.\n</pre> <p>The try-except-else block works like this: Python attempts to run the code in the try block. The only code that should go in a try block is code that might cause an exception to be raised. Sometimes you\u2019ll have additional code that should run only if the try block was successful; this code goes in the else block. The except block tells Python what to do in case a certain exception arises when it tries to run the code in the try block. By anticipating likely sources of errors, you can write robust programs that continue to run even when they encounter invalid data and missing resources. Your code will be resistant to innocent user mistakes and malicious attacks.</p> In\u00a0[17]: Copied! <pre># filename = 'alice.txt'\n\n# with open(filename, encoding='utf-8') as f:\n#     contents = f.read()\n</pre> # filename = 'alice.txt'  # with open(filename, encoding='utf-8') as f: #     contents = f.read() <p>There are two changes here. One is the use of the variable f to represent the file object, which is a common convention. The second is the use of the encoding argument. This argument is needed when your system\u2019s default encoding doesn\u2019t match the encoding of the file that\u2019s being read.</p> <p>Python can\u2019t read from a missing file, so it raises an exception.</p> <p>The last line of the traceback reports a FileNotFoundError: this is the exception Python creates when it can\u2019t find the file it\u2019s trying to open. In this example, the open() function produces the error, so to handle it, the try block will begin with the line that contains open():</p> In\u00a0[18]: Copied! <pre>filename = 'alice.txt'\n\ntry:\n    with open(filename, encoding='utf-8') as f:\n        contents = f.read()\nexcept FileNotFoundError:\n    print(f\"Sorry, the file {filename} does not exist.\")\n</pre> filename = 'alice.txt'  try:     with open(filename, encoding='utf-8') as f:         contents = f.read() except FileNotFoundError:     print(f\"Sorry, the file {filename} does not exist.\") <pre>Sorry, the file alice.txt does not exist.\n</pre> In\u00a0[19]: Copied! <pre>title = \"Alice in Wonderland\"\ntitle.split()\n</pre> title = \"Alice in Wonderland\" title.split() Out[19]: <pre>['Alice', 'in', 'Wonderland']</pre> <p>The split() method separates a string into parts wherever it finds a space and stores all the parts of the string in a list. The result is a list of words from the string, although some punctuation may also appear with some of the words. To count the number of words in Alice in Wonderland, we\u2019ll use split() on the entire text. Then we\u2019ll count the items in the list to get a rough idea of the number of words in the text:</p> In\u00a0[20]: Copied! <pre>filename = 'data/alice.txt'\n\ntry:\n    with open(filename, encoding='utf-8') as f:\n        contents = f.read()\nexcept FileNotFoundError:\n    print(f\"Sorry, the file {filename} does not exist.\")\nelse:\n    # Count the approximate number of words in the file.\n    words = contents.split()\n    num_words = len(words)\n    print(f\"The file {filename} has about {num_words} words.\")\n</pre> filename = 'data/alice.txt'  try:     with open(filename, encoding='utf-8') as f:         contents = f.read() except FileNotFoundError:     print(f\"Sorry, the file {filename} does not exist.\") else:     # Count the approximate number of words in the file.     words = contents.split()     num_words = len(words)     print(f\"The file {filename} has about {num_words} words.\") <pre>The file data/alice.txt has about 29465 words.\n</pre> In\u00a0[21]: Copied! <pre>def count_words(filename):\n\"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding='utf-8') as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {filename} has about {num_words} words.\")\n\nfilename = 'data/alice.txt'\ncount_words(filename)\n</pre> def count_words(filename):     \"\"\"Count the approximate number of words in a file.\"\"\"     try:         with open(filename, encoding='utf-8') as f:             contents = f.read()     except FileNotFoundError:         pass     else:         words = contents.split()         num_words = len(words)         print(f\"The file {filename} has about {num_words} words.\")  filename = 'data/alice.txt' count_words(filename) <pre>The file data/alice.txt has about 29465 words.\n</pre> <p>Now we can write a simple loop to count the words in any text we want to analyze. We do this by storing the names of the files we want to analyze in a list, and then we call count_words() for each file in the list. We\u2019ll try to count the words for Alice in Wonderland, Siddhartha, Moby Dick, and Little Women, which are all available in the public domain. I\u2019ve intentionally left siddhartha.txt out of the directory containing word_count.py, so we can see how well our program handles a missing file:</p> In\u00a0[22]: Copied! <pre>def count_words(filename):\n\"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding='utf-8') as f:\n            contents = f.read()\n    except FileNotFoundError:\n        print(f\"Sorry, the file {filename} does not exist.\")\n    else:\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {filename} has about {num_words} words.\")\n\nfilenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt', 'hello_world.txt']\nfilenames = [\"data/\"+filename for filename in filenames]\nfor filename in filenames:\n    count_words(filename)\n</pre> def count_words(filename):     \"\"\"Count the approximate number of words in a file.\"\"\"     try:         with open(filename, encoding='utf-8') as f:             contents = f.read()     except FileNotFoundError:         print(f\"Sorry, the file {filename} does not exist.\")     else:         words = contents.split()         num_words = len(words)         print(f\"The file {filename} has about {num_words} words.\")  filenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt', 'hello_world.txt'] filenames = [\"data/\"+filename for filename in filenames] for filename in filenames:     count_words(filename) <pre>The file data/alice.txt has about 29465 words.\nThe file data/siddhartha.txt has about 42172 words.\nThe file data/moby_dick.txt has about 215830 words.\nThe file data/little_women.txt has about 189079 words.\nSorry, the file data/hello_world.txt does not exist.\n</pre> <p>Using the try-except block in this example provides two significant advantages. We prevent our users from seeing a traceback, and we let the program continue analyzing the texts it\u2019s able to find. If we don\u2019t catch the FileNotFoundError that siddhartha.txt raised, the user would see a full traceback, and the program would stop running after trying to analyze Siddhartha. It would never analyze Moby Dick or Little Women.</p> In\u00a0[23]: Copied! <pre>def count_words(filename):\n\"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding='utf-8') as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {filename} has about {num_words} words.\")\n\nfilenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt', 'hello_world.txt']\nfilenames = [\"data/\"+filename for filename in filenames]\nfor filename in filenames:\n    count_words(filename)\n</pre> def count_words(filename):     \"\"\"Count the approximate number of words in a file.\"\"\"     try:         with open(filename, encoding='utf-8') as f:             contents = f.read()     except FileNotFoundError:         pass     else:         words = contents.split()         num_words = len(words)         print(f\"The file {filename} has about {num_words} words.\")  filenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt', 'hello_world.txt'] filenames = [\"data/\"+filename for filename in filenames] for filename in filenames:     count_words(filename) <pre>The file data/alice.txt has about 29465 words.\nThe file data/siddhartha.txt has about 42172 words.\nThe file data/moby_dick.txt has about 215830 words.\nThe file data/little_women.txt has about 189079 words.\n</pre> <p>The pass statement also acts as a placeholder. It\u2019s a reminder that you\u2019re choosing to do nothing at a specific point in your program\u2019s execution and that you might want to do something there later. For example, in this program we might decide to write any missing filenames to a file called missing_files.txt. Our users wouldn\u2019t see this file, but we\u2019d be able to read the file and deal with any missing texts.</p> In\u00a0[24]: Copied! <pre>import json\n\nnumbers = [2, 3, 5, 7, 11, 13]\n\nfilename = 'data/numbers.json'\nwith open(filename, 'w') as f:\n    json.dump(numbers, f)\n</pre> import json  numbers = [2, 3, 5, 7, 11, 13]  filename = 'data/numbers.json' with open(filename, 'w') as f:     json.dump(numbers, f) <pre><code>import json\n\n\u00a0\u00a0\u00a0numbers = [2, 3, 5, 7, 11, 13]\n\n\u278a filename = 'numbers.json'\n\u278b with open(filename, 'w') as f:\n\u278c\u00a0\u00a0\u00a0\u00a0\u00a0json.dump(numbers, f)\n</code></pre> <p>We first import the json module and then create a list of numbers to work with. At \u278a we choose a filename in which to store the list of numbers. It\u2019s customary to use the file extension .json to indicate that the data in the file is stored in the JSON format. Then we open the file in write mode, which allows json to write the data to the file \u278b. At \u278c we use the json.dump() function to store the list numbers in the file numbers.json.</p> <p>This program has no output, but let\u2019s open the file numbers.json and look at it. The data is stored in a format that looks just like Python.</p> <pre><code>[2, 3, 5, 7, 11, 13]\n</code></pre> <p>Now we\u2019ll write a program that uses json.load() to read the list back into memory:</p> In\u00a0[25]: Copied! <pre>import json\n\nfilename = 'data/numbers.json'\nwith open(filename) as f:\n    numbers = json.load(f)\n\nprint(numbers)\n</pre> import json  filename = 'data/numbers.json' with open(filename) as f:     numbers = json.load(f)  print(numbers) <pre>[2, 3, 5, 7, 11, 13]\n</pre> In\u00a0[26]: Copied! <pre>import json\n\ndef get_stored_username():\n\"\"\"Get stored username if available.\"\"\"\n    filename = 'data/username.json'\n    try:\n        with open(filename) as f:\n            username = json.load(f)\n    except FileNotFoundError:\n        return None\n    else:\n        return username\n\ndef get_new_username():\n\"\"\"Prompt for a new username.\"\"\"\n    username = input(\"What is your name? \")\n    filename = 'data/username.json'\n    with open(filename, 'w') as f:\n        json.dump(username, f)\n    return username\n\ndef greet_user():\n\"\"\"Greet the user by name.\"\"\"\n    username = get_stored_username()\n    if username:\n        print(f\"Welcome back, {username}!\")\n    else:\n        username = get_new_username()\n        print(f\"We'll remember you when you come back, {username}!\")\n\ngreet_user()\n</pre> import json  def get_stored_username():     \"\"\"Get stored username if available.\"\"\"     filename = 'data/username.json'     try:         with open(filename) as f:             username = json.load(f)     except FileNotFoundError:         return None     else:         return username  def get_new_username():     \"\"\"Prompt for a new username.\"\"\"     username = input(\"What is your name? \")     filename = 'data/username.json'     with open(filename, 'w') as f:         json.dump(username, f)     return username  def greet_user():     \"\"\"Greet the user by name.\"\"\"     username = get_stored_username()     if username:         print(f\"Welcome back, {username}!\")     else:         username = get_new_username()         print(f\"We'll remember you when you come back, {username}!\")  greet_user() <pre>Welcome back, Chuck!\n</pre> In\u00a0[27]: Copied! <pre>greet_user()\n</pre> greet_user() <pre>Welcome back, Chuck!\n</pre> <p>Each function in this final version of remember_me.py has a single, clear purpose. We call greet_user(), and that function prints an appropriate message: it either welcomes back an existing user or greets a new user. It does this by calling get_stored_username(), which is responsible only for retrieving a stored username if one exists. Finally, greet_user() calls get_new_username() if necessary, which is responsible only for getting a new username and storing it. This compartmentalization of work is an essential part of writing clear code that will be easy to maintain and extend.</p>"},{"location":"python/10_files_and_exceptions/#files-and-exceptions","title":"Files and Exceptions\u00b6","text":"<p>Now that you\u2019ve mastered the basic skills you need to write organized programs that are easy to use, it\u2019s time to think about making your programs even more relevant and usable. In this chapter you\u2019ll learn to work with files so your programs can quickly analyze lots of data. You\u2019ll learn to handle errors so your programs don\u2019t crash when they encounter unexpected situations. You\u2019ll learn about exceptions, which are special objects Python creates to manage errors that arise while a program is running. You\u2019ll also learn about the json module, which allows you to save user data so it isn\u2019t lost when your program stops running.</p> <p>Learning to work with files and save data will make your programs easier for people to use. Users will be able to choose what data to enter and when to enter it. People can run your program, do some work, and then close the program and pick up where they left off later. Learning to handle exceptions will help you deal with situations in which files don\u2019t exist and deal with other problems that can cause your programs to crash. This will make your programs more robust when they encounter bad data, whether it comes from innocent mistakes or from malicious attempts to break your programs. With the skills you\u2019ll learn in this chapter, you\u2019ll make your programs more applicable, usable, and stable.</p> <ul> <li>READING FROM A FILE</li> <li>WRITING TO A FILE</li> <li>EXCEPTIONS</li> <li>STORING DATA</li> <li>SUMMARY</li> </ul>"},{"location":"python/10_files_and_exceptions/#reading-from-a-file","title":"READING FROM A FILE \u00b6","text":"<p>An incredible amount of data is available in text files. Text files can contain weather data, traffic data, socioeconomic data, literary works, and more. Reading from a file is particularly useful in data analysis applications, but it\u2019s also applicable to any situation in which you want to analyze or modify information stored in a file. For example, you can write a program that reads in the contents of a text file and rewrites the file with formatting that allows a browser to display it.</p> <p>When you want to work with the information in a text file, the first step is to read the file into memory. You can read the entire contents of a file, or you can work through the file one line at a time.</p>"},{"location":"python/10_files_and_exceptions/#reading-an-entire-file","title":"Reading an Entire File\u00b6","text":"<p>To begin, we need a file with a few lines of text in it. Let\u2019s start with a file that contains pi to 30 decimal places, with 10 decimal places per line:</p> <pre><code>pi_digits.txt\n\n3.1415926535\n\u00a0\u00a08979323846\n\u00a0\u00a02643383279\n</code></pre> <p>All the files used in this lecture can be found under the data folder.</p> <p>Here\u2019s a program that opens this file, reads it, and prints the contents of the file to the screen:</p>"},{"location":"python/10_files_and_exceptions/#file-paths","title":"File Paths\u00b6","text":"<p>When you pass a simple filename like pi_digits.txt to the open() function, Python looks in the directory where the file that\u2019s currently being executed (that is, your .py program file) is stored.</p> <p>Sometimes, depending on how you organize your work, the file you want to open won\u2019t be in the same directory as your program file. For example, you might store your program files in a folder called python_work; inside python_work, you might have another folder called text_files to distinguish your program files from the text files they\u2019re manipulating. Even though text_files is in python_work, just passing open() the name of a file in text_files won\u2019t work, because Python will only look in python_work and stop there; it won\u2019t go on and look in text_files. To get Python to open files from a directory other than the one where your program file is stored, you need to provide a file path, which tells Python to look in a specific location on your system.</p> <p>Because text_files is inside python_work, you could use a relative file path to open a file from text_files. A relative file path tells Python to look for a given location relative to the directory where the currently running program file is stored. For example, you\u2019d write:</p> <pre><code>with open('text_files/filename.txt') as file_object:\n</code></pre> <p>This line tells Python to look for the desired .txt file in the folder text_files and assumes that text_files is located inside python_work (which it is).</p> <p>Windows systems use a backslash () instead of a forward slash (/) when displaying file paths, but you can still use forward slashes in your code.*</p> <p>You can also tell Python exactly where the file is on your computer regardless of where the program that\u2019s being executed is stored. This is called an absolute file path. You use an absolute path if a relative path doesn\u2019t work. For instance, if you\u2019ve put text_files in some folder other than python_work\u2014say, a folder called other_files\u2014then just passing open() the path 'text_files/filename.txt' won\u2019t work because Python will only look for that location inside python_work. You\u2019ll need to write out a full path to clarify where you want Python to look.</p> <p>Absolute paths are usually longer than relative paths, so it\u2019s helpful to assign them to a variable and then pass that variable to open():</p> <pre><code>file_path = '/home/ehmatthes/other_files/text_files/filename.txt'\nwith open(file_path) as file_object:\n</code></pre> <p>Using absolute paths, you can read files from any location on your system. For now it\u2019s easiest to store files in the same directory as your program files or in a folder such as text_files within the directory that stores your program files.</p> <p>If you try to use backslashes in a file path, you\u2019ll get an error because the backslash is used to escape characters in strings. For example, in the path \"C:\\path\\to\\file.txt\", the sequence \\t is interpreted as a tab. If you need to use backslashes, you can escape each one in the path, like this: \"C:\\\\path\\\\to\\\\file.txt\".</p>"},{"location":"python/10_files_and_exceptions/#reading-line-by-line","title":"Reading Line by Line\u00b6","text":"<p>When you\u2019re reading a file, you\u2019ll often want to examine each line of the file. You might be looking for certain information in the file, or you might want to modify the text in the file in some way. For example, you might want to read through a file of weather data and work with any line that includes the word sunny in the description of that day\u2019s weather. In a news report, you might look for any line with the tag <code>&lt;headline&gt;</code> and rewrite that line with a specific kind of formatting.</p> <p>You can use a for loop on the file object to examine each line from a file one at a time:</p>"},{"location":"python/10_files_and_exceptions/#making-a-list-of-lines-from-a-file","title":"Making a List of Lines from a File\u00b6","text":"<p>When you use with, the file object returned by open() is only available inside the with block that contains it. If you want to retain access to a file\u2019s contents outside the with block, you can store the file\u2019s lines in a list inside the block and then work with that list. You can process parts of the file immediately and postpone some processing for later in the program.</p> <p>The following example stores the lines of pi_digits.txt in a list inside the with block and then prints the lines outside the with block:</p>"},{"location":"python/10_files_and_exceptions/#working-with-a-files-contents","title":"Working with a File\u2019s Contents\u00b6","text":"<p>After you\u2019ve read a file into memory, you can do whatever you want with that data, so let\u2019s briefly explore the digits of pi. First, we\u2019ll attempt to build a single string containing all the digits in the file with no whitespace in it:</p>"},{"location":"python/10_files_and_exceptions/#large-files-one-million-digits","title":"Large Files: One Million Digits\u00b6","text":"<p>So far we\u2019ve focused on analyzing a text file that contains only three lines, but the code in these examples would work just as well on much larger files. If we start with a text file that contains pi to 1,000,000 decimal places instead of just 30, we can create a single string containing all these digits. We don\u2019t need to change our program at all except to pass it a different file. We\u2019ll also print just the first 50 decimal places, so we don\u2019t have to watch a million digits scroll by in the terminal:</p>"},{"location":"python/10_files_and_exceptions/#is-your-birthday-contained-in-pi","title":"Is Your Birthday Contained in Pi?\u00b6","text":"<p>I\u2019ve always been curious to know if my birthday appears anywhere in the digits of pi. Let\u2019s use the program we just wrote to find out if someone\u2019s birthday appears anywhere in the first million digits of pi. We can do this by expressing each birthday as a string of digits and seeing if that string appears anywhere in pi_string:</p>"},{"location":"python/10_files_and_exceptions/#writing-to-a-file","title":"WRITING TO A FILE \u00b6","text":"<p>One of the simplest ways to save data is to write it to a file. When you write text to a file, the output will still be available after you close the terminal containing your program\u2019s output. You can examine output after a program finishes running, and you can share the output files with others as well. You can also write programs that read the text back into memory and work with it again later.</p>"},{"location":"python/10_files_and_exceptions/#writing-to-an-empty-file","title":"Writing to an Empty File\u00b6","text":"<p>To write text to a file, you need to call open() with a second argument telling Python that you want to write to the file. To see how this works, let\u2019s write a simple message and store it in a file instead of printing it to the screen:</p>"},{"location":"python/10_files_and_exceptions/#writing-multiple-lines","title":"Writing Multiple Lines\u00b6","text":"<p>The write() function doesn\u2019t add any newlines to the text you write. So if you write more than one line without including newline characters, your file may not look the way you want it to:</p>"},{"location":"python/10_files_and_exceptions/#appending-to-a-file","title":"Appending to a File\u00b6","text":"<p>If you want to add content to a file instead of writing over existing content, you can open the file in append mode. When you open a file in append mode, Python doesn\u2019t erase the contents of the file before returning the file object. Any lines you write to the file will be added at the end of the file. If the file doesn\u2019t exist yet, Python will create an empty file for you.</p> <p>Let\u2019s modify the program by adding some new reasons we love programming to the existing file programming.txt:</p>"},{"location":"python/10_files_and_exceptions/#exceptions","title":"EXCEPTIONS \u00b6","text":"<p>Python uses special objects called exceptions to manage errors that arise during a program\u2019s execution. Whenever an error occurs that makes Python unsure what to do next, it creates an exception object. If you write code that handles the exception, the program will continue running. If you don\u2019t handle the exception, the program will halt and show a traceback, which includes a report of the exception that was raised.</p> <p>Exceptions are handled with try-except blocks. A try-except block asks Python to do something, but it also tells Python what to do if an exception is raised. When you use try-except blocks, your programs will continue running even if things start to go wrong. Instead of tracebacks, which can be confusing for users to read, users will see friendly error messages that you write.</p>"},{"location":"python/10_files_and_exceptions/#handling-the-zerodivisionerror-exception","title":"Handling the ZeroDivisionError Exception\u00b6","text":"<p>Let\u2019s look at a simple error that causes Python to raise an exception. You probably know that it\u2019s impossible to divide a number by zero, but let\u2019s ask Python to do it anyway:</p>"},{"location":"python/10_files_and_exceptions/#using-try-except-blocks","title":"Using try-except Blocks\u00b6","text":"<p>When you think an error may occur, you can write a try-except block to handle the exception that might be raised. You tell Python to try running some code, and you tell it what to do if the code results in a particular kind of exception.</p> <p>Here\u2019s what a try-except block for handling the ZeroDivisionError exception looks like:</p>"},{"location":"python/10_files_and_exceptions/#using-exceptions-to-prevent-crashes","title":"Using Exceptions to Prevent Crashes\u00b6","text":"<p>Handling errors correctly is especially important when the program has more work to do after the error occurs. This happens often in programs that prompt users for input. If the program responds to invalid input appropriately, it can prompt for more valid input instead of crashing.</p> <p>Let\u2019s create a simple calculator that does only division:</p>"},{"location":"python/10_files_and_exceptions/#handling-the-filenotfounderror-exception","title":"Handling the FileNotFoundError Exception\u00b6","text":"<p>One common issue when working with files is handling missing files. The file you\u2019re looking for might be in a different location, the filename may be misspelled, or the file may not exist at all. You can handle all of these situations in a straightforward way with a try-except block.</p> <p>Let\u2019s try to read a file that doesn\u2019t exist. The following program tries to read in the contents of Alice in Wonderland, but I haven\u2019t saved the file alice.txt in the same directory as alice.py:</p>"},{"location":"python/10_files_and_exceptions/#analyzing-text","title":"Analyzing Text\u00b6","text":"<p>You can analyze text files containing entire books. Many classic works of literature are available as simple text files because they are in the public domain. The texts used in this section come from Project Gutenberg (http://gutenberg.org/). Project Gutenberg maintains a collection of literary works that are available in the public domain, and it\u2019s a great resource if you\u2019re interested in working with literary texts in your programming projects.</p> <p>Let\u2019s pull in the text of Alice in Wonderland and try to count the number of words in the text. We\u2019ll use the string method split(), which can build a list of words from a string. Here\u2019s what split() does with a string containing just the title \"Alice in Wonderland\":</p>"},{"location":"python/10_files_and_exceptions/#working-with-multiple-files","title":"Working with Multiple Files\u00b6","text":"<p>Let\u2019s add more books to analyze. But before we do, let\u2019s move the bulk of this program to a function called count_words(). By doing so, it will be easier to run the analysis for multiple books:</p>"},{"location":"python/10_files_and_exceptions/#failing-silently","title":"Failing Silently\u00b6","text":"<p>In the previous example, we informed our users that one of the files was unavailable. But you don\u2019t need to report every exception you catch. Sometimes you\u2019ll want the program to fail silently when an exception occurs and continue on as if nothing happened. To make a program fail silently, you write a try block as usual, but you explicitly tell Python to do nothing in the except block. Python has a pass statement that tells it to do nothing in a block:</p>"},{"location":"python/10_files_and_exceptions/#deciding-which-errors-to-report","title":"Deciding Which Errors to Report\u00b6","text":"<p>How do you know when to report an error to your users and when to fail silently? If users know which texts are supposed to be analyzed, they might appreciate a message informing them why some texts were not analyzed. If users expect to see some results but don\u2019t know which books are supposed to be analyzed, they might not need to know that some texts were unavailable. Giving users information they aren\u2019t looking for can decrease the usability of your program. Python\u2019s error-handling structures give you fine-grained control over how much to share with users when things go wrong; it\u2019s up to you to decide how much information to share.</p> <p>Well-written, properly tested code is not very prone to internal errors, such as syntax or logical errors. But every time your program depends on something external, such as user input, the existence of a file, or the availability of a network connection, there is a possibility of an exception being raised. A little experience will help you know where to include exception handling blocks in your program and how much to report to users about errors that arise.</p>"},{"location":"python/10_files_and_exceptions/#storing-data","title":"STORING DATA \u00b6","text":"<p>Many of your programs will ask users to input certain kinds of information. You might allow users to store preferences in a game or provide data for a visualization. Whatever the focus of your program is, you\u2019ll store the information users provide in data structures such as lists and dictionaries. When users close a program, you\u2019ll almost always want to save the information they entered. A simple way to do this involves storing your data using the json module.</p> <p>The json module allows you to dump simple Python data structures into a file and load the data from that file the next time the program runs. You can also use json to share data between different Python programs. Even better, the JSON data format is not specific to Python, so you can share data you store in the JSON format with people who work in many other programming languages. It\u2019s a useful and portable format, and it\u2019s easy to learn.</p>"},{"location":"python/10_files_and_exceptions/#using-jsondump-and-jsonload","title":"Using json.dump() and json.load()\u00b6","text":"<p>Let\u2019s write a short program that stores a set of numbers and another program that reads these numbers back into memory. The first program will use json.dump() to store the set of numbers, and the second program will use json.load().</p> <p>The json.dump() function takes two arguments: a piece of data to store and a file object it can use to store the data. Here\u2019s how you can use json.dump() to store a list of numbers:</p>"},{"location":"python/10_files_and_exceptions/#saving-and-reading-user-generated-data","title":"Saving and Reading User-Generated Data\u00b6","text":"<p>Saving data with json is useful when you\u2019re working with user-generated data, because if you don\u2019t store your user\u2019s information somehow, you\u2019ll lose it when the program stops running. Let\u2019s look at an example where we prompt the user for their name the first time they run a program and then remember their name when they run the program again.</p> <p>Let\u2019s start by storing the user\u2019s name:</p>"},{"location":"python/10_files_and_exceptions/#summary","title":"SUMMARY \u00b6","text":"<p>In this chapter, you learned how to work with files. You learned to read an entire file at once and read through a file\u2019s contents one line at a time. You learned to write to a file and append text onto the end of a file. You read about exceptions and how to handle the exceptions you\u2019re likely to see in your programs. Finally, you learned how to store Python data structures so you can save information your users provide, preventing them from having to start over each time they run a program.</p>"}]}